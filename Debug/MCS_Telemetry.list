
MCS_Telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000452c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004624  08004624  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08004624  08004624  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004624  08004624  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800462c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000034  08004660  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004660  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c543  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239a  00000000  00000000  0002c59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002e940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002f418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b98  00000000  00000000  0002fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec40  00000000  00000000  00032980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d310  00000000  00000000  000415c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce8d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024ac  00000000  00000000  000ce920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080045d4 	.word	0x080045d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080045d4 	.word	0x080045d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f004 f9c7 	bl	80045c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000236:	4b42      	ldr	r3, [pc, #264]	; (8000340 <MX_GPIO_Init+0x120>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b41      	ldr	r3, [pc, #260]	; (8000340 <MX_GPIO_Init+0x120>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	03c9      	lsls	r1, r1, #15
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b3e      	ldr	r3, [pc, #248]	; (8000340 <MX_GPIO_Init+0x120>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	03db      	lsls	r3, r3, #15
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	4b3b      	ldr	r3, [pc, #236]	; (8000340 <MX_GPIO_Init+0x120>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b3a      	ldr	r3, [pc, #232]	; (8000340 <MX_GPIO_Init+0x120>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	0289      	lsls	r1, r1, #10
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b37      	ldr	r3, [pc, #220]	; (8000340 <MX_GPIO_Init+0x120>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	029b      	lsls	r3, r3, #10
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b34      	ldr	r3, [pc, #208]	; (8000340 <MX_GPIO_Init+0x120>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b33      	ldr	r3, [pc, #204]	; (8000340 <MX_GPIO_Init+0x120>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	02c9      	lsls	r1, r1, #11
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b30      	ldr	r3, [pc, #192]	; (8000340 <MX_GPIO_Init+0x120>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	02db      	lsls	r3, r3, #11
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCB_LED_GREEN_Pin|PCB_LED_RED_Pin|nRF24_CSN_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 800028a:	230c      	movs	r3, #12
 800028c:	33ff      	adds	r3, #255	; 0xff
 800028e:	0019      	movs	r1, r3
 8000290:	2390      	movs	r3, #144	; 0x90
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	2200      	movs	r2, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f001 fa40 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_RESET);
 800029c:	4b29      	ldr	r3, [pc, #164]	; (8000344 <MX_GPIO_Init+0x124>)
 800029e:	2200      	movs	r2, #0
 80002a0:	2101      	movs	r1, #1
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fa3a 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PCB_LED_GREEN_Pin|PCB_LED_RED_Pin|nRF24_CSN_Pin|SD_CS_Pin;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	220c      	movs	r2, #12
 80002ac:	32ff      	adds	r2, #255	; 0xff
 80002ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2201      	movs	r2, #1
 80002b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	193b      	adds	r3, r7, r4
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c2:	193a      	adds	r2, r7, r4
 80002c4:	2390      	movs	r3, #144	; 0x90
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f8be 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF24_IRQ_Pin;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2210      	movs	r2, #16
 80002d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2288      	movs	r2, #136	; 0x88
 80002da:	0352      	lsls	r2, r2, #13
 80002dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 80002e4:	193a      	adds	r2, r7, r4
 80002e6:	2390      	movs	r3, #144	; 0x90
 80002e8:	05db      	lsls	r3, r3, #23
 80002ea:	0011      	movs	r1, r2
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 f8ad 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF24_CE_Pin;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	2201      	movs	r2, #1
 80002fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000304:	193b      	adds	r3, r7, r4
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nRF24_CE_GPIO_Port, &GPIO_InitStruct);
 800030a:	193b      	adds	r3, r7, r4
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <MX_GPIO_Init+0x124>)
 800030e:	0019      	movs	r1, r3
 8000310:	0010      	movs	r0, r2
 8000312:	f001 f89b 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_A_SIGNAL_Pin;
 8000316:	0021      	movs	r1, r4
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	0152      	lsls	r2, r2, #5
 800031e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_A_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800032c:	187b      	adds	r3, r7, r1
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <MX_GPIO_Init+0x124>)
 8000330:	0019      	movs	r1, r3
 8000332:	0010      	movs	r0, r2
 8000334:	f001 f88a 	bl	800144c <HAL_GPIO_Init>

}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b009      	add	sp, #36	; 0x24
 800033e:	bd90      	pop	{r4, r7, pc}
 8000340:	40021000 	.word	0x40021000
 8000344:	48000400 	.word	0x48000400

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f000 ff42 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 f820 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f7ff ff64 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000358:	f000 fd36 	bl	8000dc8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800035c:	f000 fd72 	bl	8000e44 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000360:	f000 fe78 	bl	8001054 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000364:	f003 fab8 	bl	80038d8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi1);
 8000368:	4b07      	ldr	r3, [pc, #28]	; (8000388 <main+0x40>)
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fcd6 	bl	8000d1c <nRF24_Init>
  nRF24_SetRXAddress(0, RxAddr);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <main+0x44>)
 8000372:	0019      	movs	r1, r3
 8000374:	2000      	movs	r0, #0
 8000376:	f000 fba6 	bl	8000ac6 <nRF24_SetRXAddress>
  nRF24_SetTXAddress(TxAddr);
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <main+0x48>)
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fbe9 	bl	8000b54 <nRF24_SetTXAddress>
  nRF24_RX_Mode();
 8000382:	f000 f953 	bl	800062c <nRF24_RX_Mode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000386:	e7fe      	b.n	8000386 <main+0x3e>
 8000388:	20000058 	.word	0x20000058
 800038c:	20000008 	.word	0x20000008
 8000390:	20000000 	.word	0x20000000

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b099      	sub	sp, #100	; 0x64
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	242c      	movs	r4, #44	; 0x2c
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2334      	movs	r3, #52	; 0x34
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f004 f90d 	bl	80045c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003aa:	231c      	movs	r3, #28
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f004 f905 	bl	80045c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	0018      	movs	r0, r3
 80003be:	2318      	movs	r3, #24
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f004 f8fe 	bl	80045c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c8:	0021      	movs	r1, r4
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2202      	movs	r2, #2
 80003ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2201      	movs	r2, #1
 80003d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2210      	movs	r2, #16
 80003da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 f9b7 	bl	8001758 <HAL_RCC_OscConfig>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003ee:	f000 f828 	bl	8000442 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	211c      	movs	r1, #28
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2100      	movs	r1, #0
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fd27 	bl	8001e64 <HAL_RCC_ClockConfig>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800041a:	f000 f812 	bl	8000442 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fe87 	bl	8002140 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000436:	f000 f804 	bl	8000442 <Error_Handler>
  }
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b019      	add	sp, #100	; 0x64
 8000440:	bd90      	pop	{r4, r7, pc}

08000442 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000446:	b672      	cpsid	i
}
 8000448:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044a:	e7fe      	b.n	800044a <Error_Handler+0x8>

0800044c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	0002      	movs	r2, r0
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8000458:	2001      	movs	r0, #1
 800045a:	f000 ff1f 	bl	800129c <HAL_Delay>
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	000a      	movs	r2, r1
 8000472:	1cfb      	adds	r3, r7, #3
 8000474:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <nRF24_SendSpi+0x2c>)
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	1cfb      	adds	r3, r7, #3
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b29a      	uxth	r2, r3
 8000480:	23fa      	movs	r3, #250	; 0xfa
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	f002 f801 	bl	800248c <HAL_SPI_Transmit>
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	20000050 	.word	0x20000050

08000498 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	000a      	movs	r2, r1
 80004a2:	1cfb      	adds	r3, r7, #3
 80004a4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <nRF24_ReadSpi+0x2c>)
 80004a8:	6818      	ldr	r0, [r3, #0]
 80004aa:	1cfb      	adds	r3, r7, #3
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	6879      	ldr	r1, [r7, #4]
 80004b6:	f002 f949 	bl	800274c <HAL_SPI_Receive>
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	20000050 	.word	0x20000050

080004c8 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	0002      	movs	r2, r0
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	701a      	strb	r2, [r3, #0]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 80004dc:	2390      	movs	r3, #144	; 0x90
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 f919 	bl	800171c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	2101      	movs	r1, #1
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff ffba 	bl	8000468 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80004f4:	240f      	movs	r4, #15
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2101      	movs	r1, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff ffcc 	bl	8000498 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000500:	2390      	movs	r3, #144	; 0x90
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	0018      	movs	r0, r3
 800050a:	f001 f907 	bl	800171c <HAL_GPIO_WritePin>

	return result;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	781b      	ldrb	r3, [r3, #0]
}
 8000512:	0018      	movs	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	b005      	add	sp, #20
 8000518:	bd90      	pop	{r4, r7, pc}

0800051a <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	0011      	movs	r1, r2
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	1c02      	adds	r2, r0, #0
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	1c0a      	adds	r2, r1, #0
 800052e:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	1dfb      	adds	r3, r7, #7
 8000536:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 8000538:	2390      	movs	r3, #144	; 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2200      	movs	r2, #0
 800053e:	2108      	movs	r1, #8
 8000540:	0018      	movs	r0, r3
 8000542:	f001 f8eb 	bl	800171c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	2101      	movs	r1, #1
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff ff8c 	bl	8000468 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff ff9d 	bl	8000498 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 800055e:	2390      	movs	r3, #144	; 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2201      	movs	r2, #1
 8000564:	2108      	movs	r1, #8
 8000566:	0018      	movs	r0, r3
 8000568:	f001 f8d8 	bl	800171c <HAL_GPIO_WritePin>
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}

08000574 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	1c0a      	adds	r2, r1, #0
 8000584:	701a      	strb	r2, [r3, #0]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2220      	movs	r2, #32
 800058c:	4313      	orrs	r3, r2
 800058e:	b2da      	uxtb	r2, r3
 8000590:	240c      	movs	r4, #12
 8000592:	193b      	adds	r3, r7, r4
 8000594:	701a      	strb	r2, [r3, #0]
	tmp[1] = val;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	1dba      	adds	r2, r7, #6
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	705a      	strb	r2, [r3, #1]

	NRF24_CSN_LOW;
 800059e:	2390      	movs	r3, #144	; 0x90
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2200      	movs	r2, #0
 80005a4:	2108      	movs	r1, #8
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 f8b8 	bl	800171c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2102      	movs	r1, #2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ff59 	bl	8000468 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 f8ac 	bl	800171c <HAL_GPIO_WritePin>
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b005      	add	sp, #20
 80005ca:	bd90      	pop	{r4, r7, pc}

080005cc <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6039      	str	r1, [r7, #0]
 80005d4:	0011      	movs	r1, r2
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	1c02      	adds	r2, r0, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	1dbb      	adds	r3, r7, #6
 80005de:	1c0a      	adds	r2, r1, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	reg = NRF24_CMD_W_REGISTER | reg;
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2220      	movs	r2, #32
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 80005f0:	2390      	movs	r3, #144	; 0x90
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	2200      	movs	r2, #0
 80005f6:	2108      	movs	r1, #8
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 f88f 	bl	800171c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	2101      	movs	r1, #1
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ff30 	bl	8000468 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000608:	1dbb      	adds	r3, r7, #6
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ff29 	bl	8000468 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000616:	2390      	movs	r3, #144	; 0x90
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2201      	movs	r2, #1
 800061c:	2108      	movs	r1, #8
 800061e:	0018      	movs	r0, r3
 8000620:	f001 f87c 	bl	800171c <HAL_GPIO_WritePin>
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b002      	add	sp, #8
 800062a:	bd80      	pop	{r7, pc}

0800062c <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8000632:	1dfc      	adds	r4, r7, #7
 8000634:	f000 f830 	bl	8000698 <nRF24_ReadConfig>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <nRF24_RX_Mode+0x64>)
 800063e:	0019      	movs	r1, r3
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fa40 	bl	8000ac6 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	1dfa      	adds	r2, r7, #7
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	2102      	movs	r1, #2
 800064e:	430a      	orrs	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	1dfa      	adds	r2, r7, #7
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	0018      	movs	r0, r3
 8000664:	f000 f821 	bl	80006aa <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000668:	2070      	movs	r0, #112	; 0x70
 800066a:	f000 f895 	bl	8000798 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800066e:	f000 f8a3 	bl	80007b8 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000672:	f000 f8be 	bl	80007f2 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <nRF24_RX_Mode+0x68>)
 8000678:	2201      	movs	r2, #1
 800067a:	2101      	movs	r1, #1
 800067c:	0018      	movs	r0, r3
 800067e:	f001 f84d 	bl	800171c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff fee2 	bl	800044c <nRF24_Delay>
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b003      	add	sp, #12
 800068e:	bd90      	pop	{r4, r7, pc}
 8000690:	20000054 	.word	0x20000054
 8000694:	48000400 	.word	0x48000400

08000698 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff13 	bl	80004c8 <nRF24_ReadRegister>
 80006a2:	0003      	movs	r3, r0
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	0002      	movs	r2, r0
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	0019      	movs	r1, r3
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff59 	bl	8000574 <nRF24_WriteRegister>
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}

080006ca <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80006ca:	b5b0      	push	{r4, r5, r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	0002      	movs	r2, r0
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80006d6:	250f      	movs	r5, #15
 80006d8:	197c      	adds	r4, r7, r5
 80006da:	2006      	movs	r0, #6
 80006dc:	f7ff fef4 	bl	80004c8 <nRF24_ReadRegister>
 80006e0:	0003      	movs	r3, r0
 80006e2:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xF9; // Clear PWR bits f8?
 80006e4:	0028      	movs	r0, r5
 80006e6:	183b      	adds	r3, r7, r0
 80006e8:	183a      	adds	r2, r7, r0
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	2106      	movs	r1, #6
 80006ee:	438a      	bics	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
	rf_setup |= (lev<<1);
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b25a      	sxtb	r2, r3
 8000704:	183b      	adds	r3, r7, r0
 8000706:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000708:	183b      	adds	r3, r7, r0
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	0019      	movs	r1, r3
 800070e:	2006      	movs	r0, #6
 8000710:	f7ff ff30 	bl	8000574 <nRF24_WriteRegister>
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b004      	add	sp, #16
 800071a:	bdb0      	pop	{r4, r5, r7, pc}

0800071c <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	701a      	strb	r2, [r3, #0]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000728:	250f      	movs	r5, #15
 800072a:	197c      	adds	r4, r7, r5
 800072c:	2006      	movs	r0, #6
 800072e:	f7ff fecb 	bl	80004c8 <nRF24_ReadRegister>
 8000732:	0003      	movs	r3, r0
 8000734:	7023      	strb	r3, [r4, #0]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000736:	0028      	movs	r0, r5
 8000738:	183b      	adds	r3, r7, r0
 800073a:	183a      	adds	r2, r7, r0
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	2128      	movs	r1, #40	; 0x28
 8000740:	438a      	bics	r2, r1
 8000742:	701a      	strb	r2, [r3, #0]
	if(dr == NRF24_RF_DR_250KBPS)
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d106      	bne.n	800075a <nRF24_SetDataRate+0x3e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 800074c:	183b      	adds	r3, r7, r0
 800074e:	183a      	adds	r2, r7, r0
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	2120      	movs	r1, #32
 8000754:	430a      	orrs	r2, r1
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e00a      	b.n	8000770 <nRF24_SetDataRate+0x54>
	else if(dr == NRF24_RF_DR_2MBPS)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d106      	bne.n	8000770 <nRF24_SetDataRate+0x54>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000762:	220f      	movs	r2, #15
 8000764:	18bb      	adds	r3, r7, r2
 8000766:	18ba      	adds	r2, r7, r2
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	2108      	movs	r1, #8
 800076c:	430a      	orrs	r2, r1
 800076e:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	0019      	movs	r1, r3
 8000778:	2006      	movs	r0, #6
 800077a:	f7ff fefb 	bl	8000574 <nRF24_WriteRegister>
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b004      	add	sp, #16
 8000784:	bdb0      	pop	{r4, r5, r7, pc}

08000786 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800078a:	2007      	movs	r0, #7
 800078c:	f7ff fe9c 	bl	80004c8 <nRF24_ReadRegister>
 8000790:	0003      	movs	r3, r0
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	0019      	movs	r1, r3
 80007aa:	2007      	movs	r0, #7
 80007ac:	f7ff fee2 	bl	8000574 <nRF24_WriteRegister>
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	22e2      	movs	r2, #226	; 0xe2
 80007c2:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2200      	movs	r2, #0
 80007ca:	2108      	movs	r1, #8
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 ffa5 	bl	800171c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2101      	movs	r1, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff fe46 	bl	8000468 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80007dc:	2390      	movs	r3, #144	; 0x90
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	2201      	movs	r2, #1
 80007e2:	2108      	movs	r1, #8
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 ff99 	bl	800171c <HAL_GPIO_WritePin>
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	22e1      	movs	r2, #225	; 0xe1
 80007fc:	701a      	strb	r2, [r3, #0]

	NRF24_CSN_LOW;
 80007fe:	2390      	movs	r3, #144	; 0x90
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2200      	movs	r2, #0
 8000804:	2108      	movs	r1, #8
 8000806:	0018      	movs	r0, r3
 8000808:	f000 ff88 	bl	800171c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	2101      	movs	r1, #1
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff fe29 	bl	8000468 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000816:	2390      	movs	r3, #144	; 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2201      	movs	r2, #1
 800081c:	2108      	movs	r1, #8
 800081e:	0018      	movs	r0, r3
 8000820:	f000 ff7c 	bl	800171c <HAL_GPIO_WritePin>
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}

0800082c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8000838:	250f      	movs	r5, #15
 800083a:	197c      	adds	r4, r7, r5
 800083c:	f7ff ff2c 	bl	8000698 <nRF24_ReadConfig>
 8000840:	0003      	movs	r3, r0
 8000842:	7023      	strb	r3, [r4, #0]

	if(onoff)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <nRF24_EnableCRC+0x2e>
		config |= (1<<NRF24_EN_CRC);
 800084c:	197b      	adds	r3, r7, r5
 800084e:	197a      	adds	r2, r7, r5
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	2108      	movs	r1, #8
 8000854:	430a      	orrs	r2, r1
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e006      	b.n	8000868 <nRF24_EnableCRC+0x3c>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800085a:	220f      	movs	r2, #15
 800085c:	18bb      	adds	r3, r7, r2
 800085e:	18ba      	adds	r2, r7, r2
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	2108      	movs	r1, #8
 8000864:	438a      	bics	r2, r1
 8000866:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 8000868:	230f      	movs	r3, #15
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff ff1b 	bl	80006aa <nRF24_WriteConfig>
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b004      	add	sp, #16
 800087a:	bdb0      	pop	{r4, r5, r7, pc}

0800087c <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	0002      	movs	r2, r0
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8000888:	250f      	movs	r5, #15
 800088a:	197c      	adds	r4, r7, r5
 800088c:	f7ff ff04 	bl	8000698 <nRF24_ReadConfig>
 8000890:	0003      	movs	r3, r0
 8000892:	7023      	strb	r3, [r4, #0]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d106      	bne.n	80008aa <nRF24_SetCRCLength+0x2e>
		config |= (1<<NRF24_CRCO);
 800089c:	197b      	adds	r3, r7, r5
 800089e:	197a      	adds	r2, r7, r5
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	2104      	movs	r1, #4
 80008a4:	430a      	orrs	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e006      	b.n	80008b8 <nRF24_SetCRCLength+0x3c>
	else
		config &= ~(1<<NRF24_CRCO);
 80008aa:	220f      	movs	r2, #15
 80008ac:	18bb      	adds	r3, r7, r2
 80008ae:	18ba      	adds	r2, r7, r2
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	2104      	movs	r1, #4
 80008b4:	438a      	bics	r2, r1
 80008b6:	701a      	strb	r2, [r3, #0]
	nRF24_WriteConfig(config);
 80008b8:	230f      	movs	r3, #15
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fef3 	bl	80006aa <nRF24_WriteConfig>
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b004      	add	sp, #16
 80008ca:	bdb0      	pop	{r4, r5, r7, pc}

080008cc <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	1c0a      	adds	r2, r1, #0
 80008dc:	701a      	strb	r2, [r3, #0]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	b25a      	sxtb	r2, r3
 80008e6:	1dbb      	adds	r3, r7, #6
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	210f      	movs	r1, #15
 80008ee:	400b      	ands	r3, r1
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	0019      	movs	r1, r3
 80008fa:	2004      	movs	r0, #4
 80008fc:	f7ff fe3a 	bl	8000574 <nRF24_WriteRegister>
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}

08000908 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	0002      	movs	r2, r0
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	227f      	movs	r2, #127	; 0x7f
 800091a:	4013      	ands	r3, r2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	0019      	movs	r1, r3
 8000920:	2005      	movs	r0, #5
 8000922:	f7ff fe27 	bl	8000574 <nRF24_WriteRegister>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}

0800092e <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	0002      	movs	r2, r0
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b05      	cmp	r3, #5
 8000946:	d902      	bls.n	800094e <nRF24_SetPayloadSize+0x20>
		pipe = 5; // Block too high pipe number
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	2205      	movs	r2, #5
 800094c:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	3311      	adds	r3, #17
 8000954:	b2da      	uxtb	r2, r3
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	213f      	movs	r1, #63	; 0x3f
 800095c:	400b      	ands	r3, r1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	0019      	movs	r1, r3
 8000962:	0010      	movs	r0, r2
 8000964:	f7ff fe06 	bl	8000574 <nRF24_WriteRegister>
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}

08000970 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	1dbb      	adds	r3, r7, #6
 800097e:	1c0a      	adds	r2, r1, #0
 8000980:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d902      	bls.n	8000990 <nRF24_EnablePipe+0x20>
		pipe = 5; // Block too high pipe number
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	2205      	movs	r2, #5
 800098e:	701a      	strb	r2, [r3, #0]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000990:	250f      	movs	r5, #15
 8000992:	197c      	adds	r4, r7, r5
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff fd97 	bl	80004c8 <nRF24_ReadRegister>
 800099a:	0003      	movs	r3, r0
 800099c:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 800099e:	1dbb      	adds	r3, r7, #6
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d10d      	bne.n	80009c2 <nRF24_EnablePipe+0x52>
		enable_pipe |= (1<<pipe);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2201      	movs	r2, #1
 80009ac:	409a      	lsls	r2, r3
 80009ae:	0013      	movs	r3, r2
 80009b0:	b25a      	sxtb	r2, r3
 80009b2:	197b      	adds	r3, r7, r5
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b25a      	sxtb	r2, r3
 80009bc:	197b      	adds	r3, r7, r5
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	e00f      	b.n	80009e2 <nRF24_EnablePipe+0x72>
	else
		enable_pipe &= ~(1<<pipe);
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2201      	movs	r2, #1
 80009c8:	409a      	lsls	r2, r3
 80009ca:	0013      	movs	r3, r2
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	210f      	movs	r1, #15
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	b252      	sxtb	r2, r2
 80009da:	4013      	ands	r3, r2
 80009dc:	b25a      	sxtb	r2, r3
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80009e2:	230f      	movs	r3, #15
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	0019      	movs	r1, r3
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fdc2 	bl	8000574 <nRF24_WriteRegister>
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b004      	add	sp, #16
 80009f6:	bdb0      	pop	{r4, r5, r7, pc}

080009f8 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	0002      	movs	r2, r0
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	1c0a      	adds	r2, r1, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	if(pipe > 5)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b05      	cmp	r3, #5
 8000a10:	d902      	bls.n	8000a18 <nRF24_AutoACK+0x20>
		pipe = 5; // Block too high pipe number
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	2205      	movs	r2, #5
 8000a16:	701a      	strb	r2, [r3, #0]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000a18:	250f      	movs	r5, #15
 8000a1a:	197c      	adds	r4, r7, r5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fd53 	bl	80004c8 <nRF24_ReadRegister>
 8000a22:	0003      	movs	r3, r0
 8000a24:	7023      	strb	r3, [r4, #0]
	if(onoff == 1)
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d10d      	bne.n	8000a4a <nRF24_AutoACK+0x52>
		enaa |= (1<<pipe);
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2201      	movs	r2, #1
 8000a34:	409a      	lsls	r2, r3
 8000a36:	0013      	movs	r3, r2
 8000a38:	b25a      	sxtb	r2, r3
 8000a3a:	197b      	adds	r3, r7, r5
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b25b      	sxtb	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b25a      	sxtb	r2, r3
 8000a44:	197b      	adds	r3, r7, r5
 8000a46:	701a      	strb	r2, [r3, #0]
 8000a48:	e00f      	b.n	8000a6a <nRF24_AutoACK+0x72>
	else
		enaa &= ~(1<<pipe);
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	409a      	lsls	r2, r3
 8000a52:	0013      	movs	r3, r2
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187a      	adds	r2, r7, r1
 8000a5e:	7812      	ldrb	r2, [r2, #0]
 8000a60:	b252      	sxtb	r2, r2
 8000a62:	4013      	ands	r3, r2
 8000a64:	b25a      	sxtb	r2, r3
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	0019      	movs	r1, r3
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fd7e 	bl	8000574 <nRF24_WriteRegister>
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b004      	add	sp, #16
 8000a7e:	bdb0      	pop	{r4, r5, r7, pc}

08000a80 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	0002      	movs	r2, r0
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	701a      	strb	r2, [r3, #0]
	if(size > 5)
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	d902      	bls.n	8000a9a <nRF24_SetAddressWidth+0x1a>
		size = 5; // Maximum are 5 bytes
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	2205      	movs	r2, #5
 8000a98:	701a      	strb	r2, [r3, #0]
	if(size < 3)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d802      	bhi.n	8000aa8 <nRF24_SetAddressWidth+0x28>
		size = 3; // Minimum are 3 bytes
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	701a      	strb	r2, [r3, #0]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3b02      	subs	r3, #2
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f7ff fd5b 	bl	8000574 <nRF24_WriteRegister>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	0002      	movs	r2, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	701a      	strb	r2, [r3, #0]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <nRF24_SetRXAddress+0x1e>
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d126      	bne.n	8000b32 <nRF24_SetRXAddress+0x6c>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e011      	b.n	8000b12 <nRF24_SetRXAddress+0x4c>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000aee:	200f      	movs	r0, #15
 8000af0:	183b      	adds	r3, r7, r0
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	18d2      	adds	r2, r2, r3
 8000af8:	183b      	adds	r3, r7, r0
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2102      	movs	r1, #2
 8000afe:	1acb      	subs	r3, r1, r3
 8000b00:	7811      	ldrb	r1, [r2, #0]
 8000b02:	220c      	movs	r2, #12
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000b08:	183b      	adds	r3, r7, r0
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	183b      	adds	r3, r7, r0
 8000b0e:	3201      	adds	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	230f      	movs	r3, #15
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d9e8      	bls.n	8000aee <nRF24_SetRXAddress+0x28>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	330a      	adds	r3, #10
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	220c      	movs	r2, #12
 8000b26:	18b9      	adds	r1, r7, r2
 8000b28:	2203      	movs	r2, #3
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff fd4e 	bl	80005cc <nRF24_WriteRegisters>
	{
 8000b30:	e00b      	b.n	8000b4a <nRF24_SetRXAddress+0x84>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	330a      	adds	r3, #10
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f7ff fd16 	bl	8000574 <nRF24_WriteRegister>
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2203      	movs	r2, #3
 8000b62:	0019      	movs	r1, r3
 8000b64:	200a      	movs	r0, #10
 8000b66:	f7ff fcd8 	bl	800051a <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e010      	b.n	8000b96 <nRF24_SetTXAddress+0x42>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8000b74:	200f      	movs	r0, #15
 8000b76:	183b      	adds	r3, r7, r0
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	183b      	adds	r3, r7, r0
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2102      	movs	r1, #2
 8000b80:	1acb      	subs	r3, r1, r3
 8000b82:	210c      	movs	r1, #12
 8000b84:	1879      	adds	r1, r7, r1
 8000b86:	5c89      	ldrb	r1, [r1, r2]
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <nRF24_SetTXAddress+0xa4>)
 8000b8a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000b8c:	183b      	adds	r3, r7, r0
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	183b      	adds	r3, r7, r0
 8000b92:	3201      	adds	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	220f      	movs	r2, #15
 8000b98:	18bb      	adds	r3, r7, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d9e9      	bls.n	8000b74 <nRF24_SetTXAddress+0x20>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000ba0:	18bb      	adds	r3, r7, r2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e011      	b.n	8000bcc <nRF24_SetTXAddress+0x78>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8000ba8:	200f      	movs	r0, #15
 8000baa:	183b      	adds	r3, r7, r0
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	18d2      	adds	r2, r2, r3
 8000bb2:	183b      	adds	r3, r7, r0
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	7811      	ldrb	r1, [r2, #0]
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	18ba      	adds	r2, r7, r2
 8000bc0:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8000bc2:	183b      	adds	r3, r7, r0
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	183b      	adds	r3, r7, r0
 8000bc8:	3201      	adds	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	230f      	movs	r3, #15
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d9e8      	bls.n	8000ba8 <nRF24_SetTXAddress+0x54>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8000bd6:	240c      	movs	r4, #12
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2203      	movs	r2, #3
 8000bdc:	0019      	movs	r1, r3
 8000bde:	200a      	movs	r0, #10
 8000be0:	f7ff fcf4 	bl	80005cc <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2203      	movs	r2, #3
 8000be8:	0019      	movs	r1, r3
 8000bea:	2010      	movs	r0, #16
 8000bec:	f7ff fcee 	bl	80005cc <nRF24_WriteRegisters>

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b005      	add	sp, #20
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	20000054 	.word	0x20000054

08000bfc <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8000c02:	1dfc      	adds	r4, r7, #7
 8000c04:	f7ff fdbf 	bl	8000786 <nRF24_ReadStatus>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	1dfa      	adds	r2, r7, #7
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	2170      	movs	r1, #112	; 0x70
 8000c14:	430a      	orrs	r2, r1
 8000c16:	701a      	strb	r2, [r3, #0]
	nRF24_WriteStatus(status);
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fdbb 	bl	8000798 <nRF24_WriteStatus>
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b003      	add	sp, #12
 8000c28:	bd90      	pop	{r4, r7, pc}

08000c2a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8000c2a:	b5b0      	push	{r4, r5, r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	0002      	movs	r2, r0
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8000c36:	250f      	movs	r5, #15
 8000c38:	197c      	adds	r4, r7, r5
 8000c3a:	f7ff fd2d 	bl	8000698 <nRF24_ReadConfig>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d106      	bne.n	8000c58 <nRF24_EnableRXDataReadyIRQ+0x2e>
		config |= (1<<NRF24_RX_DR);
 8000c4a:	197b      	adds	r3, r7, r5
 8000c4c:	197a      	adds	r2, r7, r5
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	430a      	orrs	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e006      	b.n	8000c66 <nRF24_EnableRXDataReadyIRQ+0x3c>
	else
		config &= ~(1<<NRF24_RX_DR);
 8000c58:	220f      	movs	r2, #15
 8000c5a:	18bb      	adds	r3, r7, r2
 8000c5c:	18ba      	adds	r2, r7, r2
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	438a      	bics	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8000c66:	230f      	movs	r3, #15
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fd1c 	bl	80006aa <nRF24_WriteConfig>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}

08000c7a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8000c7a:	b5b0      	push	{r4, r5, r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	0002      	movs	r2, r0
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8000c86:	250f      	movs	r5, #15
 8000c88:	197c      	adds	r4, r7, r5
 8000c8a:	f7ff fd05 	bl	8000698 <nRF24_ReadConfig>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d106      	bne.n	8000ca8 <nRF24_EnableTXDataSentIRQ+0x2e>
		config |= (1<<NRF24_TX_DS);
 8000c9a:	197b      	adds	r3, r7, r5
 8000c9c:	197a      	adds	r2, r7, r5
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e006      	b.n	8000cb6 <nRF24_EnableTXDataSentIRQ+0x3c>
	else
		config &= ~(1<<NRF24_TX_DS);
 8000ca8:	220f      	movs	r2, #15
 8000caa:	18bb      	adds	r3, r7, r2
 8000cac:	18ba      	adds	r2, r7, r2
 8000cae:	7812      	ldrb	r2, [r2, #0]
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	438a      	bics	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fcf4 	bl	80006aa <nRF24_WriteConfig>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b004      	add	sp, #16
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}

08000cca <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8000cca:	b5b0      	push	{r4, r5, r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	701a      	strb	r2, [r3, #0]
	uint8_t config = nRF24_ReadConfig();
 8000cd6:	250f      	movs	r5, #15
 8000cd8:	197c      	adds	r4, r7, r5
 8000cda:	f7ff fcdd 	bl	8000698 <nRF24_ReadConfig>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	7023      	strb	r3, [r4, #0]

	if(!onoff)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d106      	bne.n	8000cf8 <nRF24_EnableMaxRetransmitIRQ+0x2e>
		config |= (1<<NRF24_MAX_RT);
 8000cea:	197b      	adds	r3, r7, r5
 8000cec:	197a      	adds	r2, r7, r5
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e006      	b.n	8000d06 <nRF24_EnableMaxRetransmitIRQ+0x3c>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	18bb      	adds	r3, r7, r2
 8000cfc:	18ba      	adds	r2, r7, r2
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	2110      	movs	r1, #16
 8000d02:	438a      	bics	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]

	nRF24_WriteConfig(config);
 8000d06:	230f      	movs	r3, #15
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fccc 	bl	80006aa <nRF24_WriteConfig>
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d1c <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <nRF24_Init+0xa4>)
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]

	NRF24_CE_LOW;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <nRF24_Init+0xa8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2101      	movs	r1, #1
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fcf3 	bl	800171c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8000d36:	2390      	movs	r3, #144	; 0x90
 8000d38:	05db      	lsls	r3, r3, #23
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 fcec 	bl	800171c <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8000d44:	2005      	movs	r0, #5
 8000d46:	f7ff fb81 	bl	800044c <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f7ff fcbd 	bl	80006ca <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff fce3 	bl	800071c <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fd68 	bl	800082c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fd8d 	bl	800087c <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8000d62:	2107      	movs	r1, #7
 8000d64:	2004      	movs	r0, #4
 8000d66:	f7ff fdb1 	bl	80008cc <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	201c      	movs	r0, #28
 8000d6e:	f7ff fc01 	bl	8000574 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF_CH channel frequency for transmission, f = 2400 + RF_CH [MHz]
 8000d72:	200a      	movs	r0, #10
 8000d74:	f7ff fdc8 	bl	8000908 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fdd7 	bl	800092e <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8000d80:	2101      	movs	r1, #1
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff fdf4 	bl	8000970 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fe34 	bl	80009f8 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size, 5 bytes
 8000d90:	2003      	movs	r0, #3
 8000d92:	f7ff fe75 	bl	8000a80 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8000d96:	2014      	movs	r0, #20
 8000d98:	f7ff fb58 	bl	800044c <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ff44 	bl	8000c2a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff ff69 	bl	8000c7a <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff8e 	bl	8000cca <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 8000dae:	2014      	movs	r0, #20
 8000db0:	f7ff fb4c 	bl	800044c <nRF24_Delay>

	nRF24_ClearInterrupts();
 8000db4:	f7ff ff22 	bl	8000bfc <nRF24_ClearInterrupts>
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000050 	.word	0x20000050
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <MX_SPI1_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000dd4:	2282      	movs	r2, #130	; 0x82
 8000dd6:	0052      	lsls	r2, r2, #1
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000de2:	22e0      	movs	r2, #224	; 0xe0
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000e16:	2207      	movs	r2, #7
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000e22:	2208      	movs	r2, #8
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <MX_SPI1_Init+0x74>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fa77 	bl	800231c <HAL_SPI_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f7ff fb06 	bl	8000442 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000058 	.word	0x20000058
 8000e40:	40013000 	.word	0x40013000

08000e44 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_SPI2_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e50:	2282      	movs	r2, #130	; 0x82
 8000e52:	0052      	lsls	r2, r2, #1
 8000e54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e5e:	22e0      	movs	r2, #224	; 0xe0
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e92:	2207      	movs	r2, #7
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <MX_SPI2_Init+0x74>)
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 fa39 	bl	800231c <HAL_SPI_Init>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f7ff fac8 	bl	8000442 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200000bc 	.word	0x200000bc
 8000ebc:	40003800 	.word	0x40003800

08000ec0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b08d      	sub	sp, #52	; 0x34
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	241c      	movs	r4, #28
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2314      	movs	r3, #20
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f003 fb76 	bl	80045c4 <memset>
  if(spiHandle->Instance==SPI1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a39      	ldr	r2, [pc, #228]	; (8000fc4 <HAL_SPI_MspInit+0x104>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d133      	bne.n	8000f4a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0149      	lsls	r1, r1, #5
 8000eec:	430a      	orrs	r2, r1
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	015b      	lsls	r3, r3, #5
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	0289      	lsls	r1, r1, #10
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	029b      	lsls	r3, r3, #10
 8000f14:	4013      	ands	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = nRF24_SCK_Pin|nRF24_MISO_Pin|nRF24_MOSI_Pin;
 8000f1a:	0021      	movs	r1, r4
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	22e0      	movs	r2, #224	; 0xe0
 8000f20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2202      	movs	r2, #2
 8000f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2203      	movs	r2, #3
 8000f32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	187a      	adds	r2, r7, r1
 8000f3c:	2390      	movs	r3, #144	; 0x90
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 fa82 	bl	800144c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f48:	e037      	b.n	8000fba <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_SPI_MspInit+0x10c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d132      	bne.n	8000fba <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f56:	69da      	ldr	r2, [r3, #28]
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	01c9      	lsls	r1, r1, #7
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	61da      	str	r2, [r3, #28]
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f64:	69da      	ldr	r2, [r3, #28]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f76:	2180      	movs	r1, #128	; 0x80
 8000f78:	02c9      	lsls	r1, r1, #11
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_SPI_MspInit+0x108>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	02db      	lsls	r3, r3, #11
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000f8c:	211c      	movs	r1, #28
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	22e0      	movs	r2, #224	; 0xe0
 8000f92:	0212      	lsls	r2, r2, #8
 8000f94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2202      	movs	r2, #2
 8000f9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_SPI_MspInit+0x110>)
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	0010      	movs	r0, r2
 8000fb6:	f000 fa49 	bl	800144c <HAL_GPIO_Init>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b00d      	add	sp, #52	; 0x34
 8000fc0:	bd90      	pop	{r4, r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40003800 	.word	0x40003800
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x44>)
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_MspInit+0x44>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	619a      	str	r2, [r3, #24]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x44>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4013      	ands	r3, r2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x44>)
 8000ff4:	69da      	ldr	r2, [r3, #28]
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_MspInit+0x44>)
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	0549      	lsls	r1, r1, #21
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	61da      	str	r2, [r3, #28]
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_MspInit+0x44>)
 8001002:	69da      	ldr	r2, [r3, #28]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	055b      	lsls	r3, r3, #21
 8001008:	4013      	ands	r3, r2
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40021000 	.word	0x40021000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f910 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <MX_USART1_UART_Init+0x5c>)
 800105c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001060:	2296      	movs	r2, #150	; 0x96
 8001062:	0212      	lsls	r2, r2, #8
 8001064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART1_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <MX_USART1_UART_Init+0x58>)
 8001098:	0018      	movs	r0, r3
 800109a:	f002 f85f 	bl	800315c <HAL_UART_Init>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010a2:	f7ff f9ce 	bl	8000442 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000120 	.word	0x20000120
 80010b0:	40013800 	.word	0x40013800

080010b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	2414      	movs	r4, #20
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	0018      	movs	r0, r3
 80010c2:	2314      	movs	r3, #20
 80010c4:	001a      	movs	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	f003 fa7c 	bl	80045c4 <memset>
  if(uartHandle->Instance==USART1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <HAL_UART_MspInit+0x90>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d131      	bne.n	800113a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_UART_MspInit+0x94>)
 80010d8:	699a      	ldr	r2, [r3, #24]
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_UART_MspInit+0x94>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	01c9      	lsls	r1, r1, #7
 80010e0:	430a      	orrs	r2, r1
 80010e2:	619a      	str	r2, [r3, #24]
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_UART_MspInit+0x94>)
 80010e6:	699a      	ldr	r2, [r3, #24]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_UART_MspInit+0x94>)
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_UART_MspInit+0x94>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	02c9      	lsls	r1, r1, #11
 80010fc:	430a      	orrs	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_UART_MspInit+0x94>)
 8001102:	695a      	ldr	r2, [r3, #20]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	02db      	lsls	r3, r3, #11
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800110e:	0021      	movs	r1, r4
 8001110:	187b      	adds	r3, r7, r1
 8001112:	22c0      	movs	r2, #192	; 0xc0
 8001114:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2202      	movs	r2, #2
 800111a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2203      	movs	r2, #3
 8001126:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	187b      	adds	r3, r7, r1
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_UART_MspInit+0x98>)
 8001132:	0019      	movs	r1, r3
 8001134:	0010      	movs	r0, r2
 8001136:	f000 f989 	bl	800144c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b00b      	add	sp, #44	; 0x2c
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	40013800 	.word	0x40013800
 8001148:	40021000 	.word	0x40021000
 800114c:	48000400 	.word	0x48000400

08001150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <LoopForever+0x6>)
    LDR R1, [R0]
 8001156:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001158:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <LoopForever+0xa>)
    CMP R1, R2
 800115c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800115e:	d105      	bne.n	800116c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001162:	4913      	ldr	r1, [pc, #76]	; (80011b0 <LoopForever+0x12>)
    STR R1, [R0]
 8001164:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001166:	4813      	ldr	r0, [pc, #76]	; (80011b4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001168:	4913      	ldr	r1, [pc, #76]	; (80011b8 <LoopForever+0x1a>)
    STR R1, [R0]
 800116a:	6001      	str	r1, [r0, #0]

0800116c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <LoopForever+0x1e>)
  ldr r1, =_edata
 800116e:	4914      	ldr	r1, [pc, #80]	; (80011c0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <LoopForever+0x26>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001184:	4c11      	ldr	r4, [pc, #68]	; (80011cc <LoopForever+0x2e>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001192:	f7ff ff5a 	bl	800104a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001196:	f003 f9f1 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff f8d5 	bl	8000348 <main>

0800119e <LoopForever>:

LoopForever:
    b LoopForever
 800119e:	e7fe      	b.n	800119e <LoopForever>
  ldr   r0, =_estack
 80011a0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80011a4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80011a8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80011ac:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80011b0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80011b4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80011b8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80011c4:	0800462c 	.word	0x0800462c
  ldr r2, =_sbss
 80011c8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80011cc:	200001cc 	.word	0x200001cc

080011d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_IRQHandler>
	...

080011d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_Init+0x24>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_Init+0x24>)
 80011de:	2110      	movs	r1, #16
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f809 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ea:	f7ff fef3 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_InitTick+0x5c>)
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_InitTick+0x60>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	0019      	movs	r1, r3
 800120e:	23fa      	movs	r3, #250	; 0xfa
 8001210:	0098      	lsls	r0, r3, #2
 8001212:	f7fe ff79 	bl	8000108 <__udivsi3>
 8001216:	0003      	movs	r3, r0
 8001218:	0019      	movs	r1, r3
 800121a:	0020      	movs	r0, r4
 800121c:	f7fe ff74 	bl	8000108 <__udivsi3>
 8001220:	0003      	movs	r3, r0
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f905 	bl	8001432 <HAL_SYSTICK_Config>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00f      	b.n	8001250 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d80b      	bhi.n	800124e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	2301      	movs	r3, #1
 800123a:	425b      	negs	r3, r3
 800123c:	2200      	movs	r2, #0
 800123e:	0018      	movs	r0, r3
 8001240:	f000 f8e2 	bl	8001408 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_InitTick+0x64>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b003      	add	sp, #12
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	20000010 	.word	0x20000010
 800125c:	20000018 	.word	0x20000018
 8001260:	20000014 	.word	0x20000014

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	001a      	movs	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	18d2      	adds	r2, r2, r3
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	20000018 	.word	0x20000018
 8001284:	200001a8 	.word	0x200001a8

08001288 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	200001a8 	.word	0x200001a8

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fff0 	bl	8001288 <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	001a      	movs	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	189b      	adds	r3, r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	f7ff ffe0 	bl	8001288 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	20000018 	.word	0x20000018

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	0002      	movs	r2, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b7f      	cmp	r3, #127	; 0x7f
 80012f8:	d828      	bhi.n	800134c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012fa:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <__NVIC_SetPriority+0xd4>)
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	33c0      	adds	r3, #192	; 0xc0
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	589b      	ldr	r3, [r3, r2]
 800130a:	1dfa      	adds	r2, r7, #7
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	0011      	movs	r1, r2
 8001310:	2203      	movs	r2, #3
 8001312:	400a      	ands	r2, r1
 8001314:	00d2      	lsls	r2, r2, #3
 8001316:	21ff      	movs	r1, #255	; 0xff
 8001318:	4091      	lsls	r1, r2
 800131a:	000a      	movs	r2, r1
 800131c:	43d2      	mvns	r2, r2
 800131e:	401a      	ands	r2, r3
 8001320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	019b      	lsls	r3, r3, #6
 8001326:	22ff      	movs	r2, #255	; 0xff
 8001328:	401a      	ands	r2, r3
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	2303      	movs	r3, #3
 8001332:	4003      	ands	r3, r0
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001338:	481f      	ldr	r0, [pc, #124]	; (80013b8 <__NVIC_SetPriority+0xd4>)
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	430a      	orrs	r2, r1
 8001344:	33c0      	adds	r3, #192	; 0xc0
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800134a:	e031      	b.n	80013b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <__NVIC_SetPriority+0xd8>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0019      	movs	r1, r3
 8001354:	230f      	movs	r3, #15
 8001356:	400b      	ands	r3, r1
 8001358:	3b08      	subs	r3, #8
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3306      	adds	r3, #6
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	18d3      	adds	r3, r2, r3
 8001362:	3304      	adds	r3, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	1dfa      	adds	r2, r7, #7
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	0011      	movs	r1, r2
 800136c:	2203      	movs	r2, #3
 800136e:	400a      	ands	r2, r1
 8001370:	00d2      	lsls	r2, r2, #3
 8001372:	21ff      	movs	r1, #255	; 0xff
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	43d2      	mvns	r2, r2
 800137a:	401a      	ands	r2, r3
 800137c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	019b      	lsls	r3, r3, #6
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	401a      	ands	r2, r3
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	0018      	movs	r0, r3
 800138c:	2303      	movs	r3, #3
 800138e:	4003      	ands	r3, r0
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <__NVIC_SetPriority+0xd8>)
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	001c      	movs	r4, r3
 800139c:	230f      	movs	r3, #15
 800139e:	4023      	ands	r3, r4
 80013a0:	3b08      	subs	r3, #8
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	430a      	orrs	r2, r1
 80013a6:	3306      	adds	r3, #6
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	18c3      	adds	r3, r0, r3
 80013ac:	3304      	adds	r3, #4
 80013ae:	601a      	str	r2, [r3, #0]
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b003      	add	sp, #12
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	1e5a      	subs	r2, r3, #1
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	045b      	lsls	r3, r3, #17
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d301      	bcc.n	80013d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d4:	2301      	movs	r3, #1
 80013d6:	e010      	b.n	80013fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <SysTick_Config+0x44>)
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	3a01      	subs	r2, #1
 80013de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e0:	2301      	movs	r3, #1
 80013e2:	425b      	negs	r3, r3
 80013e4:	2103      	movs	r1, #3
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff ff7c 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x44>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x44>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	210f      	movs	r1, #15
 8001414:	187b      	adds	r3, r7, r1
 8001416:	1c02      	adds	r2, r0, #0
 8001418:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	187b      	adds	r3, r7, r1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff ffbf 	bl	80013c0 <SysTick_Config>
 8001442:	0003      	movs	r3, r0
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	e149      	b.n	80016f0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4091      	lsls	r1, r2
 8001466:	000a      	movs	r2, r1
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <HAL_GPIO_Init+0x28>
 8001472:	e13a      	b.n	80016ea <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	4013      	ands	r3, r2
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001488:	2b02      	cmp	r3, #2
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	43da      	mvns	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	0013      	movs	r3, r2
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	2201      	movs	r2, #1
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d017      	beq.n	800152a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	409a      	lsls	r2, r3
 8001508:	0013      	movs	r3, r2
 800150a:	43da      	mvns	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	4013      	ands	r3, r2
 8001532:	2b02      	cmp	r3, #2
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	58d3      	ldr	r3, [r2, r3]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2207      	movs	r2, #7
 8001548:	4013      	ands	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2107      	movs	r1, #7
 8001562:	400b      	ands	r3, r1
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	6939      	ldr	r1, [r7, #16]
 800157c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	401a      	ands	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	23c0      	movs	r3, #192	; 0xc0
 80015b8:	029b      	lsls	r3, r3, #10
 80015ba:	4013      	ands	r3, r2
 80015bc:	d100      	bne.n	80015c0 <HAL_GPIO_Init+0x174>
 80015be:	e094      	b.n	80016ea <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x2bc>)
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_GPIO_Init+0x2bc>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	619a      	str	r2, [r3, #24]
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <HAL_GPIO_Init+0x2bc>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_GPIO_Init+0x2c0>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	589b      	ldr	r3, [r3, r2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4013      	ands	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	2390      	movs	r3, #144	; 0x90
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	429a      	cmp	r2, r3
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x1d6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a41      	ldr	r2, [pc, #260]	; (8001710 <HAL_GPIO_Init+0x2c4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x1d2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a40      	ldr	r2, [pc, #256]	; (8001714 <HAL_GPIO_Init+0x2c8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x1ce>
 8001616:	2302      	movs	r3, #2
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x1d8>
 800161a:	2305      	movs	r3, #5
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x1d8>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x1d8>
 8001622:	2300      	movs	r3, #0
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	2103      	movs	r1, #3
 8001628:	400a      	ands	r2, r1
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	; (800170c <HAL_GPIO_Init+0x2c0>)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43da      	mvns	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	035b      	lsls	r3, r3, #13
 800165a:	4013      	ands	r3, r2
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001666:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43da      	mvns	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	039b      	lsls	r3, r3, #14
 8001684:	4013      	ands	r3, r2
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	029b      	lsls	r3, r3, #10
 80016ae:	4013      	ands	r3, r2
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43da      	mvns	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	4013      	ands	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	40da      	lsrs	r2, r3
 80016f8:	1e13      	subs	r3, r2, #0
 80016fa:	d000      	beq.n	80016fe <HAL_GPIO_Init+0x2b2>
 80016fc:	e6ae      	b.n	800145c <HAL_GPIO_Init+0x10>
  } 
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	48000400 	.word	0x48000400
 8001714:	48000800 	.word	0x48000800
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	0008      	movs	r0, r1
 8001726:	0011      	movs	r1, r2
 8001728:	1cbb      	adds	r3, r7, #2
 800172a:	1c02      	adds	r2, r0, #0
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	1c7b      	adds	r3, r7, #1
 8001730:	1c0a      	adds	r2, r1, #0
 8001732:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001734:	1c7b      	adds	r3, r7, #1
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173c:	1cbb      	adds	r3, r7, #2
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001744:	e003      	b.n	800174e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001746:	1cbb      	adds	r3, r7, #2
 8001748:	881a      	ldrh	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b002      	add	sp, #8
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f000 fb76 	bl	8001e58 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	d100      	bne.n	8001778 <HAL_RCC_OscConfig+0x20>
 8001776:	e08e      	b.n	8001896 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001778:	4bc5      	ldr	r3, [pc, #788]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	220c      	movs	r2, #12
 800177e:	4013      	ands	r3, r2
 8001780:	2b04      	cmp	r3, #4
 8001782:	d00e      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001784:	4bc2      	ldr	r3, [pc, #776]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	220c      	movs	r2, #12
 800178a:	4013      	ands	r3, r2
 800178c:	2b08      	cmp	r3, #8
 800178e:	d117      	bne.n	80017c0 <HAL_RCC_OscConfig+0x68>
 8001790:	4bbf      	ldr	r3, [pc, #764]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	23c0      	movs	r3, #192	; 0xc0
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	401a      	ands	r2, r3
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	429a      	cmp	r2, r3
 80017a0:	d10e      	bne.n	80017c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	4bbb      	ldr	r3, [pc, #748]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	029b      	lsls	r3, r3, #10
 80017aa:	4013      	ands	r3, r2
 80017ac:	d100      	bne.n	80017b0 <HAL_RCC_OscConfig+0x58>
 80017ae:	e071      	b.n	8001894 <HAL_RCC_OscConfig+0x13c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d000      	beq.n	80017ba <HAL_RCC_OscConfig+0x62>
 80017b8:	e06c      	b.n	8001894 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f000 fb4c 	bl	8001e58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x80>
 80017c8:	4bb1      	ldr	r3, [pc, #708]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4bb0      	ldr	r3, [pc, #704]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	0249      	lsls	r1, r1, #9
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e02f      	b.n	8001838 <HAL_RCC_OscConfig+0xe0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0xa2>
 80017e0:	4bab      	ldr	r3, [pc, #684]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4baa      	ldr	r3, [pc, #680]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80017e6:	49ab      	ldr	r1, [pc, #684]	; (8001a94 <HAL_RCC_OscConfig+0x33c>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	4ba8      	ldr	r3, [pc, #672]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4ba7      	ldr	r3, [pc, #668]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80017f2:	49a9      	ldr	r1, [pc, #676]	; (8001a98 <HAL_RCC_OscConfig+0x340>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e01e      	b.n	8001838 <HAL_RCC_OscConfig+0xe0>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d10e      	bne.n	8001820 <HAL_RCC_OscConfig+0xc8>
 8001802:	4ba3      	ldr	r3, [pc, #652]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4ba2      	ldr	r3, [pc, #648]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	02c9      	lsls	r1, r1, #11
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	4b9f      	ldr	r3, [pc, #636]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b9e      	ldr	r3, [pc, #632]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	0249      	lsls	r1, r1, #9
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xe0>
 8001820:	4b9b      	ldr	r3, [pc, #620]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b9a      	ldr	r3, [pc, #616]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001826:	499b      	ldr	r1, [pc, #620]	; (8001a94 <HAL_RCC_OscConfig+0x33c>)
 8001828:	400a      	ands	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	4b98      	ldr	r3, [pc, #608]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b97      	ldr	r3, [pc, #604]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001832:	4999      	ldr	r1, [pc, #612]	; (8001a98 <HAL_RCC_OscConfig+0x340>)
 8001834:	400a      	ands	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d014      	beq.n	800186a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fd22 	bl	8001288 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184a:	f7ff fd1d 	bl	8001288 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b64      	cmp	r3, #100	; 0x64
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e2fd      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185c:	4b8c      	ldr	r3, [pc, #560]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	029b      	lsls	r3, r3, #10
 8001864:	4013      	ands	r3, r2
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0xf2>
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fd0d 	bl	8001288 <HAL_GetTick>
 800186e:	0003      	movs	r3, r0
 8001870:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fd08 	bl	8001288 <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e2e8      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b82      	ldr	r3, [pc, #520]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	4013      	ands	r3, r2
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x11c>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d100      	bne.n	80018a2 <HAL_RCC_OscConfig+0x14a>
 80018a0:	e06c      	b.n	800197c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018a2:	4b7b      	ldr	r3, [pc, #492]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	220c      	movs	r2, #12
 80018a8:	4013      	ands	r3, r2
 80018aa:	d00e      	beq.n	80018ca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018ac:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	220c      	movs	r2, #12
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d11f      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1a0>
 80018b8:	4b75      	ldr	r3, [pc, #468]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	23c0      	movs	r3, #192	; 0xc0
 80018be:	025b      	lsls	r3, r3, #9
 80018c0:	401a      	ands	r2, r3
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d116      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ca:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x188>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e2bb      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b6b      	ldr	r3, [pc, #428]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	22f8      	movs	r2, #248	; 0xf8
 80018e6:	4393      	bics	r3, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00da      	lsls	r2, r3, #3
 80018f0:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f6:	e041      	b.n	800197c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d024      	beq.n	800194a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001900:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001906:	2101      	movs	r1, #1
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fcbc 	bl	8001288 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fcb7 	bl	8001288 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e297      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d0f1      	beq.n	8001916 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	22f8      	movs	r2, #248	; 0xf8
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00da      	lsls	r2, r3, #3
 8001942:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001950:	2101      	movs	r1, #1
 8001952:	438a      	bics	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fc97 	bl	8001288 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fc92 	bl	8001288 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e272      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d1f1      	bne.n	8001960 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	4013      	ands	r3, r2
 8001984:	d036      	beq.n	80019f4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d019      	beq.n	80019c2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001994:	2101      	movs	r1, #1
 8001996:	430a      	orrs	r2, r1
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff fc75 	bl	8001288 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc70 	bl	8001288 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e250      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d0f1      	beq.n	80019a4 <HAL_RCC_OscConfig+0x24c>
 80019c0:	e018      	b.n	80019f4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80019c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c6:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	438a      	bics	r2, r1
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fc5b 	bl	8001288 <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc56 	bl	8001288 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e236      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d1f1      	bne.n	80019d8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2204      	movs	r2, #4
 80019fa:	4013      	ands	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2a8>
 80019fe:	e0b5      	b.n	8001b6c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a00:	201f      	movs	r0, #31
 8001a02:	183b      	adds	r3, r7, r0
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	055b      	lsls	r3, r3, #21
 8001a10:	4013      	ands	r3, r2
 8001a12:	d110      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	0549      	lsls	r1, r1, #21
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	61da      	str	r2, [r3, #28]
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	055b      	lsls	r3, r3, #21
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a30:	183b      	adds	r3, r7, r0
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_OscConfig+0x344>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d11a      	bne.n	8001a78 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_RCC_OscConfig+0x344>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_RCC_OscConfig+0x344>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0049      	lsls	r1, r1, #1
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fc1a 	bl	8001288 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff fc15 	bl	8001288 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1f5      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_OscConfig+0x344>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x348>
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_RCC_OscConfig+0x338>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	621a      	str	r2, [r3, #32]
 8001a8c:	e036      	b.n	8001afc <HAL_RCC_OscConfig+0x3a4>
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40021000 	.word	0x40021000
 8001a94:	fffeffff 	.word	0xfffeffff
 8001a98:	fffbffff 	.word	0xfffbffff
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x36a>
 8001aa8:	4bca      	ldr	r3, [pc, #808]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	4bc9      	ldr	r3, [pc, #804]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	621a      	str	r2, [r3, #32]
 8001ab4:	4bc7      	ldr	r3, [pc, #796]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001ab6:	6a1a      	ldr	r2, [r3, #32]
 8001ab8:	4bc6      	ldr	r3, [pc, #792]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	438a      	bics	r2, r1
 8001abe:	621a      	str	r2, [r3, #32]
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x3a4>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x38c>
 8001aca:	4bc2      	ldr	r3, [pc, #776]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	4bc1      	ldr	r3, [pc, #772]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	621a      	str	r2, [r3, #32]
 8001ad6:	4bbf      	ldr	r3, [pc, #764]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4bbe      	ldr	r3, [pc, #760]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	621a      	str	r2, [r3, #32]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x3a4>
 8001ae4:	4bbb      	ldr	r3, [pc, #748]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	4bba      	ldr	r3, [pc, #744]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	438a      	bics	r2, r1
 8001aee:	621a      	str	r2, [r3, #32]
 8001af0:	4bb8      	ldr	r3, [pc, #736]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001af2:	6a1a      	ldr	r2, [r3, #32]
 8001af4:	4bb7      	ldr	r3, [pc, #732]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001af6:	2104      	movs	r1, #4
 8001af8:	438a      	bics	r2, r1
 8001afa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d014      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fbc0 	bl	8001288 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff fbbb 	bl	8001288 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4aaf      	ldr	r2, [pc, #700]	; (8001dd8 <HAL_RCC_OscConfig+0x680>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e19a      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	4bac      	ldr	r3, [pc, #688]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x3b6>
 8001b2c:	e013      	b.n	8001b56 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fbab 	bl	8001288 <HAL_GetTick>
 8001b32:	0003      	movs	r3, r0
 8001b34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	e009      	b.n	8001b4c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff fba6 	bl	8001288 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4aa5      	ldr	r2, [pc, #660]	; (8001dd8 <HAL_RCC_OscConfig+0x680>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e185      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4ba1      	ldr	r3, [pc, #644]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b56:	231f      	movs	r3, #31
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	4b9c      	ldr	r3, [pc, #624]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	4b9b      	ldr	r3, [pc, #620]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b66:	499d      	ldr	r1, [pc, #628]	; (8001ddc <HAL_RCC_OscConfig+0x684>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2210      	movs	r2, #16
 8001b72:	4013      	ands	r3, r2
 8001b74:	d063      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d12a      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b7e:	4b95      	ldr	r3, [pc, #596]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b82:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b84:	2104      	movs	r1, #4
 8001b86:	430a      	orrs	r2, r1
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b8a:	4b92      	ldr	r3, [pc, #584]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8e:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	430a      	orrs	r2, r1
 8001b94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fb77 	bl	8001288 <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ba0:	f7ff fb72 	bl	8001288 <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e152      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bb2:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d0f1      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bbc:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc0:	22f8      	movs	r2, #248	; 0xf8
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	00da      	lsls	r2, r3, #3
 8001bcc:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd2:	e034      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	3305      	adds	r3, #5
 8001bda:	d111      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bdc:	4b7d      	ldr	r3, [pc, #500]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be0:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	2104      	movs	r1, #4
 8001be4:	438a      	bics	r2, r1
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001be8:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	22f8      	movs	r2, #248	; 0xf8
 8001bee:	4393      	bics	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	00da      	lsls	r2, r3, #3
 8001bf8:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bfe:	e01e      	b.n	8001c3e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c00:	4b74      	ldr	r3, [pc, #464]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c04:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c06:	2104      	movs	r1, #4
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c0c:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c10:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	438a      	bics	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fb36 	bl	8001288 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c22:	f7ff fb31 	bl	8001288 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e111      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c34:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d1f1      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2220      	movs	r2, #32
 8001c44:	4013      	ands	r3, r2
 8001c46:	d05c      	beq.n	8001d02 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c48:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d00e      	beq.n	8001c72 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c54:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	220c      	movs	r2, #12
 8001c5a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d114      	bne.n	8001c8a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c60:	4b5c      	ldr	r3, [pc, #368]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	23c0      	movs	r3, #192	; 0xc0
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	401a      	ands	r2, r3
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	025b      	lsls	r3, r3, #9
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c72:	4b58      	ldr	r3, [pc, #352]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d040      	beq.n	8001d00 <HAL_RCC_OscConfig+0x5a8>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d03c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0e6      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01b      	beq.n	8001cca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c92:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c96:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001c98:	2180      	movs	r1, #128	; 0x80
 8001c9a:	0249      	lsls	r1, r1, #9
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff faf2 	bl	8001288 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001caa:	f7ff faed 	bl	8001288 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0cd      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cbc:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	029b      	lsls	r3, r3, #10
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x552>
 8001cc8:	e01b      	b.n	8001d02 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001cd0:	4943      	ldr	r1, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x688>)
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fad7 	bl	8001288 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce0:	f7ff fad2 	bl	8001288 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0b2      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x588>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d00:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d100      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5b4>
 8001d0a:	e0a4      	b.n	8001e56 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	220c      	movs	r2, #12
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d100      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5c2>
 8001d18:	e078      	b.n	8001e0c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d14c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d28:	492e      	ldr	r1, [pc, #184]	; (8001de4 <HAL_RCC_OscConfig+0x68c>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff faab 	bl	8001288 <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff faa6 	bl	8001288 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e086      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	049b      	lsls	r3, r3, #18
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_RCC_OscConfig+0x690>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	0449      	lsls	r1, r1, #17
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff fa79 	bl	8001288 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff fa74 	bl	8001288 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e054      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	049b      	lsls	r3, r3, #18
 8001db6:	4013      	ands	r3, r2
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x644>
 8001dba:	e04c      	b.n	8001e56 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <HAL_RCC_OscConfig+0x68c>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fa5e 	bl	8001288 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd0:	e015      	b.n	8001dfe <HAL_RCC_OscConfig+0x6a6>
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	00001388 	.word	0x00001388
 8001ddc:	efffffff 	.word	0xefffffff
 8001de0:	fffeffff 	.word	0xfffeffff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff fa4c 	bl	8001288 <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e02c      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_RCC_OscConfig+0x708>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	049b      	lsls	r3, r3, #18
 8001e06:	4013      	ands	r3, r2
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x694>
 8001e0a:	e024      	b.n	8001e56 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e01f      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_RCC_OscConfig+0x708>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x708>)
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	025b      	lsls	r3, r3, #9
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d10e      	bne.n	8001e52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	220f      	movs	r2, #15
 8001e38:	401a      	ands	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	23f0      	movs	r3, #240	; 0xf0
 8001e46:	039b      	lsls	r3, r3, #14
 8001e48:	401a      	ands	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b008      	add	sp, #32
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0bf      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d911      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0a6      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d015      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d006      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4b50      	ldr	r3, [pc, #320]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec4:	21e0      	movs	r1, #224	; 0xe0
 8001ec6:	00c9      	lsls	r1, r1, #3
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	22f0      	movs	r2, #240	; 0xf0
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d04c      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	029b      	lsls	r3, r3, #10
 8001efa:	4013      	ands	r3, r2
 8001efc:	d120      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e07a      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	049b      	lsls	r3, r3, #18
 8001f12:	4013      	ands	r3, r2
 8001f14:	d114      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06e      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e062      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e05b      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f40:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2203      	movs	r2, #3
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f54:	f7ff f998 	bl	8001288 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5c:	e009      	b.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f7ff f993 	bl	8001288 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_RCC_ClockConfig+0x1a4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e042      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	220c      	movs	r2, #12
 8001f78:	401a      	ands	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1ec      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d211      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_RCC_ClockConfig+0x19c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e020      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_RCC_ClockConfig+0x1a8>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fd4:	f000 f820 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd8:	0001      	movs	r1, r0
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x1a0>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x1ac>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	000a      	movs	r2, r1
 8001fea:	40da      	lsrs	r2, r3
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1b0>)
 8001fee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f7ff f903 	bl	80011fc <HAL_InitTick>
  
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b004      	add	sp, #16
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40022000 	.word	0x40022000
 8002004:	40021000 	.word	0x40021000
 8002008:	00001388 	.word	0x00001388
 800200c:	fffff8ff 	.word	0xfffff8ff
 8002010:	080045ec 	.word	0x080045ec
 8002014:	20000010 	.word	0x20000010

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	220c      	movs	r2, #12
 800203c:	4013      	ands	r3, r2
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d046      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002042:	d848      	bhi.n	80020d6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002044:	2b04      	cmp	r3, #4
 8002046:	d002      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x36>
 8002048:	2b08      	cmp	r3, #8
 800204a:	d003      	beq.n	8002054 <HAL_RCC_GetSysClockFreq+0x3c>
 800204c:	e043      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8002050:	613b      	str	r3, [r7, #16]
      break;
 8002052:	e043      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	220f      	movs	r2, #15
 800205a:	4013      	ands	r3, r2
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	220f      	movs	r2, #15
 8002068:	4013      	ands	r3, r2
 800206a:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	23c0      	movs	r3, #192	; 0xc0
 8002074:	025b      	lsls	r3, r3, #9
 8002076:	401a      	ands	r2, r3
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	025b      	lsls	r3, r3, #9
 800207c:	429a      	cmp	r2, r3
 800207e:	d109      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	481a      	ldr	r0, [pc, #104]	; (80020ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8002084:	f7fe f840 	bl	8000108 <__udivsi3>
 8002088:	0003      	movs	r3, r0
 800208a:	001a      	movs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4353      	muls	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e01a      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	401a      	ands	r2, r3
 800209c:	23c0      	movs	r3, #192	; 0xc0
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d109      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	4814      	ldr	r0, [pc, #80]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80020a8:	f7fe f82e 	bl	8000108 <__udivsi3>
 80020ac:	0003      	movs	r3, r0
 80020ae:	001a      	movs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4353      	muls	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e008      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	4810      	ldr	r0, [pc, #64]	; (80020fc <HAL_RCC_GetSysClockFreq+0xe4>)
 80020bc:	f7fe f824 	bl	8000108 <__udivsi3>
 80020c0:	0003      	movs	r3, r0
 80020c2:	001a      	movs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4353      	muls	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	613b      	str	r3, [r7, #16]
      break;
 80020ce:	e005      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80020d2:	613b      	str	r3, [r7, #16]
      break;
 80020d4:	e002      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_GetSysClockFreq+0xe4>)
 80020d8:	613b      	str	r3, [r7, #16]
      break;
 80020da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020dc:	693b      	ldr	r3, [r7, #16]
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b006      	add	sp, #24
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	08004604 	.word	0x08004604
 80020f4:	08004614 	.word	0x08004614
 80020f8:	02dc6c00 	.word	0x02dc6c00
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	20000010 	.word	0x20000010

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	0001      	movs	r1, r0
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	2207      	movs	r2, #7
 8002126:	4013      	ands	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_RCC_GetPCLK1Freq+0x28>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	40d9      	lsrs	r1, r3
 800212e:	000b      	movs	r3, r1
}    
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	40021000 	.word	0x40021000
 800213c:	080045fc 	.word	0x080045fc

08002140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	025b      	lsls	r3, r3, #9
 8002158:	4013      	ands	r3, r2
 800215a:	d100      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800215c:	e08e      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2017      	movs	r0, #23
 8002160:	183b      	adds	r3, r7, r0
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	055b      	lsls	r3, r3, #21
 800216e:	4013      	ands	r3, r2
 8002170:	d110      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b64      	ldr	r3, [pc, #400]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002178:	2180      	movs	r1, #128	; 0x80
 800217a:	0549      	lsls	r1, r1, #21
 800217c:	430a      	orrs	r2, r1
 800217e:	61da      	str	r2, [r3, #28]
 8002180:	4b60      	ldr	r3, [pc, #384]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	055b      	lsls	r3, r3, #21
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218e:	183b      	adds	r3, r7, r0
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b5c      	ldr	r3, [pc, #368]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d11a      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0049      	lsls	r1, r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff f86b 	bl	8001288 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7ff f866 	bl	8001288 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e097      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d6:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021d8:	6a1a      	ldr	r2, [r3, #32]
 80021da:	23c0      	movs	r3, #192	; 0xc0
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d034      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	23c0      	movs	r3, #192	; 0xc0
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d02c      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f8:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a43      	ldr	r2, [pc, #268]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021fe:	4013      	ands	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0249      	lsls	r1, r1, #9
 800220c:	430a      	orrs	r2, r1
 800220e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002216:	493e      	ldr	r1, [pc, #248]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002218:	400a      	ands	r2, r1
 800221a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800221c:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff f82d 	bl	8001288 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e009      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff f828 	bl	8001288 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	4a35      	ldr	r2, [pc, #212]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e058      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d0f0      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002252:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a2d      	ldr	r2, [pc, #180]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002262:	430a      	orrs	r2, r1
 8002264:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002266:	2317      	movs	r3, #23
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d105      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002276:	4928      	ldr	r1, [pc, #160]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002278:	400a      	ands	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	2203      	movs	r2, #3
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002296:	430a      	orrs	r2, r1
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2220      	movs	r2, #32
 80022a0:	4013      	ands	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	2210      	movs	r2, #16
 80022aa:	4393      	bics	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	029b      	lsls	r3, r3, #10
 80022c0:	4013      	ands	r3, r2
 80022c2:	d009      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	4393      	bics	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	4393      	bics	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022f4:	430a      	orrs	r2, r1
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b006      	add	sp, #24
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	fffffcff 	.word	0xfffffcff
 8002310:	fffeffff 	.word	0xfffeffff
 8002314:	00001388 	.word	0x00001388
 8002318:	efffffff 	.word	0xefffffff

0800231c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0a8      	b.n	8002480 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	2382      	movs	r3, #130	; 0x82
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	429a      	cmp	r2, r3
 8002340:	d009      	beq.n	8002356 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	61da      	str	r2, [r3, #28]
 8002348:	e005      	b.n	8002356 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	225d      	movs	r2, #93	; 0x5d
 8002360:	5c9b      	ldrb	r3, [r3, r2]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	225c      	movs	r2, #92	; 0x5c
 800236c:	2100      	movs	r1, #0
 800236e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f7fe fda4 	bl	8000ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	225d      	movs	r2, #93	; 0x5d
 800237c:	2102      	movs	r1, #2
 800237e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2140      	movs	r1, #64	; 0x40
 800238c:	438a      	bics	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	23e0      	movs	r3, #224	; 0xe0
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	429a      	cmp	r2, r3
 800239a:	d902      	bls.n	80023a2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e002      	b.n	80023a8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	015b      	lsls	r3, r3, #5
 80023a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	23f0      	movs	r3, #240	; 0xf0
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d008      	beq.n	80023c6 <HAL_SPI_Init+0xaa>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	23e0      	movs	r3, #224	; 0xe0
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	429a      	cmp	r2, r3
 80023be:	d002      	beq.n	80023c6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	2382      	movs	r3, #130	; 0x82
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	2384      	movs	r3, #132	; 0x84
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	400b      	ands	r3, r1
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2102      	movs	r1, #2
 80023e2:	400b      	ands	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2101      	movs	r1, #1
 80023ec:	400b      	ands	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6999      	ldr	r1, [r3, #24]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	400b      	ands	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2138      	movs	r1, #56	; 0x38
 8002402:	400b      	ands	r3, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	400b      	ands	r3, r1
 800240e:	431a      	orrs	r2, r3
 8002410:	0011      	movs	r1, r2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	019b      	lsls	r3, r3, #6
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	2204      	movs	r2, #4
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2110      	movs	r1, #16
 8002434:	400b      	ands	r3, r1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	2108      	movs	r1, #8
 800243e:	400b      	ands	r3, r1
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68d9      	ldr	r1, [r3, #12]
 8002446:	23f0      	movs	r3, #240	; 0xf0
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	400b      	ands	r3, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	0011      	movs	r1, r2
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	401a      	ands	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4907      	ldr	r1, [pc, #28]	; (8002488 <HAL_SPI_Init+0x16c>)
 800246c:	400a      	ands	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	225d      	movs	r2, #93	; 0x5d
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b004      	add	sp, #16
 8002486:	bd80      	pop	{r7, pc}
 8002488:	fffff7ff 	.word	0xfffff7ff

0800248c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	1dbb      	adds	r3, r7, #6
 800249a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800249c:	231f      	movs	r3, #31
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	225c      	movs	r2, #92	; 0x5c
 80024a8:	5c9b      	ldrb	r3, [r3, r2]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_SPI_Transmit+0x26>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e147      	b.n	8002742 <HAL_SPI_Transmit+0x2b6>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	225c      	movs	r2, #92	; 0x5c
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ba:	f7fe fee5 	bl	8001288 <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80024c2:	2316      	movs	r3, #22
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	1dba      	adds	r2, r7, #6
 80024c8:	8812      	ldrh	r2, [r2, #0]
 80024ca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	225d      	movs	r2, #93	; 0x5d
 80024d0:	5c9b      	ldrb	r3, [r3, r2]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d004      	beq.n	80024e2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80024d8:	231f      	movs	r3, #31
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
    goto error;
 80024e0:	e128      	b.n	8002734 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_SPI_Transmit+0x64>
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80024f0:	231f      	movs	r3, #31
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80024f8:	e11c      	b.n	8002734 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	225d      	movs	r2, #93	; 0x5d
 80024fe:	2103      	movs	r1, #3
 8002500:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1dba      	adds	r2, r7, #6
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1dba      	adds	r2, r7, #6
 800251a:	8812      	ldrh	r2, [r2, #0]
 800251c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2244      	movs	r2, #68	; 0x44
 8002528:	2100      	movs	r1, #0
 800252a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2246      	movs	r2, #70	; 0x46
 8002530:	2100      	movs	r1, #0
 8002532:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	429a      	cmp	r2, r3
 800254a:	d110      	bne.n	800256e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	438a      	bics	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	01c9      	lsls	r1, r1, #7
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2240      	movs	r2, #64	; 0x40
 8002576:	4013      	ands	r3, r2
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d007      	beq.n	800258c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	23e0      	movs	r3, #224	; 0xe0
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	429a      	cmp	r2, r3
 8002596:	d952      	bls.n	800263e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_SPI_Transmit+0x11e>
 80025a0:	2316      	movs	r3, #22
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d143      	bne.n	8002632 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	1c9a      	adds	r2, r3, #2
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025ce:	e030      	b.n	8002632 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d112      	bne.n	8002604 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	1c9a      	adds	r2, r3, #2
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002602:	e016      	b.n	8002632 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002604:	f7fe fe40 	bl	8001288 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d802      	bhi.n	800261a <HAL_SPI_Transmit+0x18e>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_SPI_Transmit+0x194>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d108      	bne.n	8002632 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002620:	231f      	movs	r3, #31
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	2203      	movs	r2, #3
 8002626:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	225d      	movs	r2, #93	; 0x5d
 800262c:	2101      	movs	r1, #1
 800262e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002630:	e080      	b.n	8002734 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1c9      	bne.n	80025d0 <HAL_SPI_Transmit+0x144>
 800263c:	e053      	b.n	80026e6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_SPI_Transmit+0x1c4>
 8002646:	2316      	movs	r3, #22
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d145      	bne.n	80026dc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	330c      	adds	r3, #12
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002676:	e031      	b.n	80026dc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d113      	bne.n	80026ae <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026ac:	e016      	b.n	80026dc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ae:	f7fe fdeb 	bl	8001288 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d802      	bhi.n	80026c4 <HAL_SPI_Transmit+0x238>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	d102      	bne.n	80026ca <HAL_SPI_Transmit+0x23e>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80026ca:	231f      	movs	r3, #31
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2203      	movs	r2, #3
 80026d0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	225d      	movs	r2, #93	; 0x5d
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
          goto error;
 80026da:	e02b      	b.n	8002734 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1c8      	bne.n	8002678 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	6839      	ldr	r1, [r7, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fcef 	bl	80030d0 <SPI_EndRxTxTransaction>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d002      	beq.n	80026fc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002722:	231f      	movs	r3, #31
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e003      	b.n	8002734 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	225d      	movs	r2, #93	; 0x5d
 8002730:	2101      	movs	r1, #1
 8002732:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	225c      	movs	r2, #92	; 0x5c
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800273c:	231f      	movs	r3, #31
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b008      	add	sp, #32
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	1dbb      	adds	r3, r7, #6
 800275a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800275c:	2117      	movs	r1, #23
 800275e:	187b      	adds	r3, r7, r1
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	225d      	movs	r2, #93	; 0x5d
 8002768:	5c9b      	ldrb	r3, [r3, r2]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d003      	beq.n	8002778 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002770:	187b      	adds	r3, r7, r1
 8002772:	2202      	movs	r2, #2
 8002774:	701a      	strb	r2, [r3, #0]
    goto error;
 8002776:	e12b      	b.n	80029d0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	2382      	movs	r3, #130	; 0x82
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	429a      	cmp	r2, r3
 8002782:	d113      	bne.n	80027ac <HAL_SPI_Receive+0x60>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10f      	bne.n	80027ac <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	225d      	movs	r2, #93	; 0x5d
 8002790:	2104      	movs	r1, #4
 8002792:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	881c      	ldrh	r4, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	0023      	movs	r3, r4
 80027a4:	f000 f924 	bl	80029f0 <HAL_SPI_TransmitReceive>
 80027a8:	0003      	movs	r3, r0
 80027aa:	e118      	b.n	80029de <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	225c      	movs	r2, #92	; 0x5c
 80027b0:	5c9b      	ldrb	r3, [r3, r2]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_SPI_Receive+0x6e>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e111      	b.n	80029de <HAL_SPI_Receive+0x292>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	225c      	movs	r2, #92	; 0x5c
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c2:	f7fe fd61 	bl	8001288 <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_SPI_Receive+0x8c>
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80027d8:	2317      	movs	r3, #23
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
    goto error;
 80027e0:	e0f6      	b.n	80029d0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	225d      	movs	r2, #93	; 0x5d
 80027e6:	2104      	movs	r1, #4
 80027e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1dba      	adds	r2, r7, #6
 80027fa:	2144      	movs	r1, #68	; 0x44
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1dba      	adds	r2, r7, #6
 8002804:	2146      	movs	r1, #70	; 0x46
 8002806:	8812      	ldrh	r2, [r2, #0]
 8002808:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	23e0      	movs	r3, #224	; 0xe0
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	429a      	cmp	r2, r3
 8002832:	d908      	bls.n	8002846 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	496a      	ldr	r1, [pc, #424]	; (80029e8 <HAL_SPI_Receive+0x29c>)
 8002840:	400a      	ands	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	e008      	b.n	8002858 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0149      	lsls	r1, r1, #5
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	429a      	cmp	r2, r3
 8002862:	d10f      	bne.n	8002884 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2140      	movs	r1, #64	; 0x40
 8002870:	438a      	bics	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	495b      	ldr	r1, [pc, #364]	; (80029ec <HAL_SPI_Receive+0x2a0>)
 8002880:	400a      	ands	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	4013      	ands	r3, r2
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d007      	beq.n	80028a2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	23e0      	movs	r3, #224	; 0xe0
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d900      	bls.n	80028b0 <HAL_SPI_Receive+0x164>
 80028ae:	e071      	b.n	8002994 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028b0:	e035      	b.n	800291e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2201      	movs	r2, #1
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d117      	bne.n	80028f0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	001a      	movs	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2246      	movs	r2, #70	; 0x46
 80028e0:	5a9b      	ldrh	r3, [r3, r2]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b299      	uxth	r1, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2246      	movs	r2, #70	; 0x46
 80028ec:	5299      	strh	r1, [r3, r2]
 80028ee:	e016      	b.n	800291e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028f0:	f7fe fcca 	bl	8001288 <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d802      	bhi.n	8002906 <HAL_SPI_Receive+0x1ba>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	d102      	bne.n	800290c <HAL_SPI_Receive+0x1c0>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 800290c:	2317      	movs	r3, #23
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2203      	movs	r2, #3
 8002912:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	225d      	movs	r2, #93	; 0x5d
 8002918:	2101      	movs	r1, #1
 800291a:	5499      	strb	r1, [r3, r2]
          goto error;
 800291c:	e058      	b.n	80029d0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2246      	movs	r2, #70	; 0x46
 8002922:	5a9b      	ldrh	r3, [r3, r2]
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1c3      	bne.n	80028b2 <HAL_SPI_Receive+0x166>
 800292a:	e039      	b.n	80029a0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2201      	movs	r2, #1
 8002934:	4013      	ands	r3, r2
 8002936:	2b01      	cmp	r3, #1
 8002938:	d115      	bne.n	8002966 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	b292      	uxth	r2, r2
 8002946:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2246      	movs	r2, #70	; 0x46
 8002956:	5a9b      	ldrh	r3, [r3, r2]
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b299      	uxth	r1, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2246      	movs	r2, #70	; 0x46
 8002962:	5299      	strh	r1, [r3, r2]
 8002964:	e016      	b.n	8002994 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002966:	f7fe fc8f 	bl	8001288 <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d802      	bhi.n	800297c <HAL_SPI_Receive+0x230>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	d102      	bne.n	8002982 <HAL_SPI_Receive+0x236>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002982:	2317      	movs	r3, #23
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2203      	movs	r2, #3
 8002988:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	225d      	movs	r2, #93	; 0x5d
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]
          goto error;
 8002992:	e01d      	b.n	80029d0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2246      	movs	r2, #70	; 0x46
 8002998:	5a9b      	ldrh	r3, [r3, r2]
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1c5      	bne.n	800292c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	6839      	ldr	r1, [r7, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 fb34 	bl	8003014 <SPI_EndRxTransaction>
 80029ac:	1e03      	subs	r3, r0, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80029be:	2317      	movs	r3, #23
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e003      	b.n	80029d0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	225d      	movs	r2, #93	; 0x5d
 80029cc:	2101      	movs	r1, #1
 80029ce:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	225c      	movs	r2, #92	; 0x5c
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029d8:	2317      	movs	r3, #23
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	781b      	ldrb	r3, [r3, #0]
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b007      	add	sp, #28
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	ffffefff 	.word	0xffffefff
 80029ec:	ffffbfff 	.word	0xffffbfff

080029f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	001a      	movs	r2, r3
 80029fe:	1cbb      	adds	r3, r7, #2
 8002a00:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a06:	2323      	movs	r3, #35	; 0x23
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	225c      	movs	r2, #92	; 0x5c
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x2c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e1c4      	b.n	8002da6 <HAL_SPI_TransmitReceive+0x3b6>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	225c      	movs	r2, #92	; 0x5c
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a24:	f7fe fc30 	bl	8001288 <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a2c:	201b      	movs	r0, #27
 8002a2e:	183b      	adds	r3, r7, r0
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	215d      	movs	r1, #93	; 0x5d
 8002a34:	5c52      	ldrb	r2, [r2, r1]
 8002a36:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a3e:	2312      	movs	r3, #18
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	1cba      	adds	r2, r7, #2
 8002a44:	8812      	ldrh	r2, [r2, #0]
 8002a46:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a48:	183b      	adds	r3, r7, r0
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d011      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x84>
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	2382      	movs	r3, #130	; 0x82
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d107      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x7a>
 8002a62:	183b      	adds	r3, r7, r0
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d004      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002a6a:	2323      	movs	r3, #35	; 0x23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a72:	e191      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <HAL_SPI_TransmitReceive+0x98>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_SPI_TransmitReceive+0x98>
 8002a80:	1cbb      	adds	r3, r7, #2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002a88:	2323      	movs	r3, #35	; 0x23
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a90:	e182      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	225d      	movs	r2, #93	; 0x5d
 8002a96:	5c9b      	ldrb	r3, [r3, r2]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d003      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	225d      	movs	r2, #93	; 0x5d
 8002aa2:	2105      	movs	r1, #5
 8002aa4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1cba      	adds	r2, r7, #2
 8002ab6:	2146      	movs	r1, #70	; 0x46
 8002ab8:	8812      	ldrh	r2, [r2, #0]
 8002aba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1cba      	adds	r2, r7, #2
 8002ac0:	2144      	movs	r1, #68	; 0x44
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1cba      	adds	r2, r7, #2
 8002ad0:	8812      	ldrh	r2, [r2, #0]
 8002ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1cba      	adds	r2, r7, #2
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	23e0      	movs	r3, #224	; 0xe0
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d908      	bls.n	8002b06 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	49ac      	ldr	r1, [pc, #688]	; (8002db0 <HAL_SPI_TransmitReceive+0x3c0>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	e008      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0149      	lsls	r1, r1, #5
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d007      	beq.n	8002b36 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2140      	movs	r1, #64	; 0x40
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	23e0      	movs	r3, #224	; 0xe0
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d800      	bhi.n	8002b44 <HAL_SPI_TransmitReceive+0x154>
 8002b42:	e083      	b.n	8002c4c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x168>
 8002b4c:	2312      	movs	r3, #18
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d000      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x168>
 8002b56:	e06d      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b7c:	e05a      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2202      	movs	r2, #2
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x1d4>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x1d4>
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d113      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	1c9a      	adds	r2, r3, #2
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d11c      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x21c>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2246      	movs	r2, #70	; 0x46
 8002bd6:	5a9b      	ldrh	r3, [r3, r2]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	b292      	uxth	r2, r2
 8002bea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	1c9a      	adds	r2, r3, #2
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2246      	movs	r2, #70	; 0x46
 8002bfa:	5a9b      	ldrh	r3, [r3, r2]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b299      	uxth	r1, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2246      	movs	r2, #70	; 0x46
 8002c06:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c0c:	f7fe fb3c 	bl	8001288 <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d80b      	bhi.n	8002c34 <HAL_SPI_TransmitReceive+0x244>
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	3301      	adds	r3, #1
 8002c20:	d008      	beq.n	8002c34 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002c22:	2323      	movs	r3, #35	; 0x23
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2203      	movs	r2, #3
 8002c28:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	225d      	movs	r2, #93	; 0x5d
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
        goto error;
 8002c32:	e0b1      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d19f      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x18e>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2246      	movs	r2, #70	; 0x46
 8002c42:	5a9b      	ldrh	r3, [r3, r2]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d199      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x18e>
 8002c4a:	e089      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_SPI_TransmitReceive+0x270>
 8002c54:	2312      	movs	r3, #18
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d000      	beq.n	8002c60 <HAL_SPI_TransmitReceive+0x270>
 8002c5e:	e074      	b.n	8002d4a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	7812      	ldrb	r2, [r2, #0]
 8002c6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c86:	e060      	b.n	8002d4a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d11c      	bne.n	8002cd0 <HAL_SPI_TransmitReceive+0x2e0>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x2e0>
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d114      	bne.n	8002cd0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d11e      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x32c>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2246      	movs	r2, #70	; 0x46
 8002ce2:	5a9b      	ldrh	r3, [r3, r2]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	7812      	ldrb	r2, [r2, #0]
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2246      	movs	r2, #70	; 0x46
 8002d0a:	5a9b      	ldrh	r3, [r3, r2]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b299      	uxth	r1, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2246      	movs	r2, #70	; 0x46
 8002d16:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d1c:	f7fe fab4 	bl	8001288 <HAL_GetTick>
 8002d20:	0002      	movs	r2, r0
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d802      	bhi.n	8002d32 <HAL_SPI_TransmitReceive+0x342>
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	3301      	adds	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x348>
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d108      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002d38:	2323      	movs	r3, #35	; 0x23
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	225d      	movs	r2, #93	; 0x5d
 8002d44:	2101      	movs	r1, #1
 8002d46:	5499      	strb	r1, [r3, r2]
        goto error;
 8002d48:	e026      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d199      	bne.n	8002c88 <HAL_SPI_TransmitReceive+0x298>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2246      	movs	r2, #70	; 0x46
 8002d58:	5a9b      	ldrh	r3, [r3, r2]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d193      	bne.n	8002c88 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f9b2 	bl	80030d0 <SPI_EndRxTxTransaction>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d006      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002d70:	2323      	movs	r3, #35	; 0x23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002d86:	2323      	movs	r3, #35	; 0x23
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e003      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	225d      	movs	r2, #93	; 0x5d
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	225c      	movs	r2, #92	; 0x5c
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002da0:	2323      	movs	r3, #35	; 0x23
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781b      	ldrb	r3, [r3, #0]
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b00a      	add	sp, #40	; 0x28
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	ffffefff 	.word	0xffffefff

08002db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dc4:	f7fe fa60 	bl	8001288 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	18d3      	adds	r3, r2, r3
 8002dd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dd4:	f7fe fa58 	bl	8001288 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	015b      	lsls	r3, r3, #5
 8002de2:	0d1b      	lsrs	r3, r3, #20
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	4353      	muls	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dea:	e058      	b.n	8002e9e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	d055      	beq.n	8002e9e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002df2:	f7fe fa49 	bl	8001288 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d902      	bls.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d142      	bne.n	8002e8e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	21e0      	movs	r1, #224	; 0xe0
 8002e14:	438a      	bics	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	2382      	movs	r3, #130	; 0x82
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d113      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d005      	beq.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d107      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2140      	movs	r1, #64	; 0x40
 8002e48:	438a      	bics	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	019b      	lsls	r3, r3, #6
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d110      	bne.n	8002e7a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	491a      	ldr	r1, [pc, #104]	; (8002ecc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	0189      	lsls	r1, r1, #6
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	225d      	movs	r2, #93	; 0x5d
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	225c      	movs	r2, #92	; 0x5c
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e017      	b.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	425a      	negs	r2, r3
 8002eae:	4153      	adcs	r3, r2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	1dfb      	adds	r3, r7, #7
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d197      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b008      	add	sp, #32
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	ffffdfff 	.word	0xffffdfff

08002ed0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ede:	2317      	movs	r3, #23
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ee6:	f7fe f9cf 	bl	8001288 <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	18d3      	adds	r3, r2, r3
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002ef6:	f7fe f9c7 	bl	8001288 <HAL_GetTick>
 8002efa:	0003      	movs	r3, r0
 8002efc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	0013      	movs	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	00da      	lsls	r2, r3, #3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	0d1b      	lsrs	r3, r3, #20
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	4353      	muls	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f1c:	e068      	b.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	23c0      	movs	r3, #192	; 0xc0
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d10a      	bne.n	8002f3e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	2117      	movs	r1, #23
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	d055      	beq.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f44:	f7fe f9a0 	bl	8001288 <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d902      	bls.n	8002f5a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d142      	bne.n	8002fe0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	21e0      	movs	r1, #224	; 0xe0
 8002f66:	438a      	bics	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	2382      	movs	r3, #130	; 0x82
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d113      	bne.n	8002f9e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d005      	beq.n	8002f8e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d107      	bne.n	8002f9e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	438a      	bics	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d110      	bne.n	8002fcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4916      	ldr	r1, [pc, #88]	; (8003010 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2180      	movs	r1, #128	; 0x80
 8002fc6:	0189      	lsls	r1, r1, #6
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	225d      	movs	r2, #93	; 0x5d
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	225c      	movs	r2, #92	; 0x5c
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e010      	b.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d18e      	bne.n	8002f1e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b00a      	add	sp, #40	; 0x28
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	20000010 	.word	0x20000010
 8003010:	ffffdfff 	.word	0xffffdfff

08003014 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	2382      	movs	r3, #130	; 0x82
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	429a      	cmp	r2, r3
 800302a:	d113      	bne.n	8003054 <SPI_EndRxTransaction+0x40>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	429a      	cmp	r2, r3
 8003036:	d005      	beq.n	8003044 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	429a      	cmp	r2, r3
 8003042:	d107      	bne.n	8003054 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	438a      	bics	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	0013      	movs	r3, r2
 800305e:	2200      	movs	r2, #0
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	f7ff fea7 	bl	8002db4 <SPI_WaitFlagStateUntilTimeout>
 8003066:	1e03      	subs	r3, r0, #0
 8003068:	d007      	beq.n	800307a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306e:	2220      	movs	r2, #32
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e026      	b.n	80030c8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	2382      	movs	r3, #130	; 0x82
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	429a      	cmp	r2, r3
 8003084:	d11f      	bne.n	80030c6 <SPI_EndRxTransaction+0xb2>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	429a      	cmp	r2, r3
 8003090:	d005      	beq.n	800309e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	429a      	cmp	r2, r3
 800309c:	d113      	bne.n	80030c6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	23c0      	movs	r3, #192	; 0xc0
 80030a2:	00d9      	lsls	r1, r3, #3
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	0013      	movs	r3, r2
 80030ac:	2200      	movs	r2, #0
 80030ae:	f7ff ff0f 	bl	8002ed0 <SPI_WaitFifoStateUntilTimeout>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d007      	beq.n	80030c6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ba:	2220      	movs	r2, #32
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e000      	b.n	80030c8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	23c0      	movs	r3, #192	; 0xc0
 80030e0:	0159      	lsls	r1, r3, #5
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	0013      	movs	r3, r2
 80030ea:	2200      	movs	r2, #0
 80030ec:	f7ff fef0 	bl	8002ed0 <SPI_WaitFifoStateUntilTimeout>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d007      	beq.n	8003104 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f8:	2220      	movs	r2, #32
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e027      	b.n	8003154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	0013      	movs	r3, r2
 800310e:	2200      	movs	r2, #0
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	f7ff fe4f 	bl	8002db4 <SPI_WaitFlagStateUntilTimeout>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d007      	beq.n	800312a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	2220      	movs	r2, #32
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e014      	b.n	8003154 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	23c0      	movs	r3, #192	; 0xc0
 800312e:	00d9      	lsls	r1, r3, #3
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	0013      	movs	r3, r2
 8003138:	2200      	movs	r2, #0
 800313a:	f7ff fec9 	bl	8002ed0 <SPI_WaitFifoStateUntilTimeout>
 800313e:	1e03      	subs	r3, r0, #0
 8003140:	d007      	beq.n	8003152 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	2220      	movs	r2, #32
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e000      	b.n	8003154 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b004      	add	sp, #16
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e044      	b.n	80031f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2278      	movs	r2, #120	; 0x78
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	f7fd ff97 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2224      	movs	r2, #36	; 0x24
 800318a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2101      	movs	r1, #1
 8003198:	438a      	bics	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 f830 	bl	8003204 <UART_SetConfig>
 80031a4:	0003      	movs	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e024      	b.n	80031f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f963 	bl	8003484 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	490d      	ldr	r1, [pc, #52]	; (8003200 <HAL_UART_Init+0xa4>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	212a      	movs	r1, #42	; 0x2a
 80031da:	438a      	bics	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 f9fb 	bl	80035ec <UART_CheckIdleState>
 80031f6:	0003      	movs	r3, r0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	ffffb7ff 	.word	0xffffb7ff

08003204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800320c:	231e      	movs	r3, #30
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a8d      	ldr	r2, [pc, #564]	; (8003468 <UART_SetConfig+0x264>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a88      	ldr	r2, [pc, #544]	; (800346c <UART_SetConfig+0x268>)
 800324a:	4013      	ands	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a7f      	ldr	r2, [pc, #508]	; (8003470 <UART_SetConfig+0x26c>)
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a7b      	ldr	r2, [pc, #492]	; (8003474 <UART_SetConfig+0x270>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d127      	bne.n	80032da <UART_SetConfig+0xd6>
 800328a:	4b7b      	ldr	r3, [pc, #492]	; (8003478 <UART_SetConfig+0x274>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	2203      	movs	r2, #3
 8003290:	4013      	ands	r3, r2
 8003292:	2b03      	cmp	r3, #3
 8003294:	d00d      	beq.n	80032b2 <UART_SetConfig+0xae>
 8003296:	d81b      	bhi.n	80032d0 <UART_SetConfig+0xcc>
 8003298:	2b02      	cmp	r3, #2
 800329a:	d014      	beq.n	80032c6 <UART_SetConfig+0xc2>
 800329c:	d818      	bhi.n	80032d0 <UART_SetConfig+0xcc>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <UART_SetConfig+0xa4>
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d00a      	beq.n	80032bc <UART_SetConfig+0xb8>
 80032a6:	e013      	b.n	80032d0 <UART_SetConfig+0xcc>
 80032a8:	231f      	movs	r3, #31
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e021      	b.n	80032f6 <UART_SetConfig+0xf2>
 80032b2:	231f      	movs	r3, #31
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e01c      	b.n	80032f6 <UART_SetConfig+0xf2>
 80032bc:	231f      	movs	r3, #31
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2204      	movs	r2, #4
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e017      	b.n	80032f6 <UART_SetConfig+0xf2>
 80032c6:	231f      	movs	r3, #31
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2208      	movs	r2, #8
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e012      	b.n	80032f6 <UART_SetConfig+0xf2>
 80032d0:	231f      	movs	r3, #31
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2210      	movs	r2, #16
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e00d      	b.n	80032f6 <UART_SetConfig+0xf2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a67      	ldr	r2, [pc, #412]	; (800347c <UART_SetConfig+0x278>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d104      	bne.n	80032ee <UART_SetConfig+0xea>
 80032e4:	231f      	movs	r3, #31
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e003      	b.n	80032f6 <UART_SetConfig+0xf2>
 80032ee:	231f      	movs	r3, #31
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2210      	movs	r2, #16
 80032f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	429a      	cmp	r2, r3
 8003300:	d15c      	bne.n	80033bc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003302:	231f      	movs	r3, #31
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d015      	beq.n	8003338 <UART_SetConfig+0x134>
 800330c:	dc18      	bgt.n	8003340 <UART_SetConfig+0x13c>
 800330e:	2b04      	cmp	r3, #4
 8003310:	d00d      	beq.n	800332e <UART_SetConfig+0x12a>
 8003312:	dc15      	bgt.n	8003340 <UART_SetConfig+0x13c>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <UART_SetConfig+0x11a>
 8003318:	2b02      	cmp	r3, #2
 800331a:	d005      	beq.n	8003328 <UART_SetConfig+0x124>
 800331c:	e010      	b.n	8003340 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331e:	f7fe fef9 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003322:	0003      	movs	r3, r0
 8003324:	61bb      	str	r3, [r7, #24]
        break;
 8003326:	e012      	b.n	800334e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003328:	4b55      	ldr	r3, [pc, #340]	; (8003480 <UART_SetConfig+0x27c>)
 800332a:	61bb      	str	r3, [r7, #24]
        break;
 800332c:	e00f      	b.n	800334e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332e:	f7fe fe73 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8003332:	0003      	movs	r3, r0
 8003334:	61bb      	str	r3, [r7, #24]
        break;
 8003336:	e00a      	b.n	800334e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	61bb      	str	r3, [r7, #24]
        break;
 800333e:	e006      	b.n	800334e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003344:	231e      	movs	r3, #30
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
        break;
 800334c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d100      	bne.n	8003356 <UART_SetConfig+0x152>
 8003354:	e07a      	b.n	800344c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	005a      	lsls	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	18d2      	adds	r2, r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0019      	movs	r1, r3
 8003368:	0010      	movs	r0, r2
 800336a:	f7fc fecd 	bl	8000108 <__udivsi3>
 800336e:	0003      	movs	r3, r0
 8003370:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d91c      	bls.n	80033b2 <UART_SetConfig+0x1ae>
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	025b      	lsls	r3, r3, #9
 800337e:	429a      	cmp	r2, r3
 8003380:	d217      	bcs.n	80033b2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	b29a      	uxth	r2, r3
 8003386:	200e      	movs	r0, #14
 8003388:	183b      	adds	r3, r7, r0
 800338a:	210f      	movs	r1, #15
 800338c:	438a      	bics	r2, r1
 800338e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	b29b      	uxth	r3, r3
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	b299      	uxth	r1, r3
 800339c:	183b      	adds	r3, r7, r0
 800339e:	183a      	adds	r2, r7, r0
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	183a      	adds	r2, r7, r0
 80033ac:	8812      	ldrh	r2, [r2, #0]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e04c      	b.n	800344c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80033b2:	231e      	movs	r3, #30
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e047      	b.n	800344c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033bc:	231f      	movs	r3, #31
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d015      	beq.n	80033f2 <UART_SetConfig+0x1ee>
 80033c6:	dc18      	bgt.n	80033fa <UART_SetConfig+0x1f6>
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d00d      	beq.n	80033e8 <UART_SetConfig+0x1e4>
 80033cc:	dc15      	bgt.n	80033fa <UART_SetConfig+0x1f6>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <UART_SetConfig+0x1d4>
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d005      	beq.n	80033e2 <UART_SetConfig+0x1de>
 80033d6:	e010      	b.n	80033fa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7fe fe9c 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 80033dc:	0003      	movs	r3, r0
 80033de:	61bb      	str	r3, [r7, #24]
        break;
 80033e0:	e012      	b.n	8003408 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <UART_SetConfig+0x27c>)
 80033e4:	61bb      	str	r3, [r7, #24]
        break;
 80033e6:	e00f      	b.n	8003408 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e8:	f7fe fe16 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80033ec:	0003      	movs	r3, r0
 80033ee:	61bb      	str	r3, [r7, #24]
        break;
 80033f0:	e00a      	b.n	8003408 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e006      	b.n	8003408 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033fe:	231e      	movs	r3, #30
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
        break;
 8003406:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01e      	beq.n	800344c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	085a      	lsrs	r2, r3, #1
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	18d2      	adds	r2, r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0019      	movs	r1, r3
 800341e:	0010      	movs	r0, r2
 8003420:	f7fc fe72 	bl	8000108 <__udivsi3>
 8003424:	0003      	movs	r3, r0
 8003426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d90a      	bls.n	8003444 <UART_SetConfig+0x240>
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	025b      	lsls	r3, r3, #9
 8003434:	429a      	cmp	r2, r3
 8003436:	d205      	bcs.n	8003444 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	e003      	b.n	800344c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003444:	231e      	movs	r3, #30
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003458:	231e      	movs	r3, #30
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b008      	add	sp, #32
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	efff69f3 	.word	0xefff69f3
 800346c:	ffffcfff 	.word	0xffffcfff
 8003470:	fffff4ff 	.word	0xfffff4ff
 8003474:	40013800 	.word	0x40013800
 8003478:	40021000 	.word	0x40021000
 800347c:	40004400 	.word	0x40004400
 8003480:	007a1200 	.word	0x007a1200

08003484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2201      	movs	r2, #1
 8003492:	4013      	ands	r3, r2
 8003494:	d00b      	beq.n	80034ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a4a      	ldr	r2, [pc, #296]	; (80035c8 <UART_AdvFeatureConfig+0x144>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2202      	movs	r2, #2
 80034b4:	4013      	ands	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a43      	ldr	r2, [pc, #268]	; (80035cc <UART_AdvFeatureConfig+0x148>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2204      	movs	r2, #4
 80034d6:	4013      	ands	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <UART_AdvFeatureConfig+0x14c>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	2208      	movs	r2, #8
 80034f8:	4013      	ands	r3, r2
 80034fa:	d00b      	beq.n	8003514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a34      	ldr	r2, [pc, #208]	; (80035d4 <UART_AdvFeatureConfig+0x150>)
 8003504:	4013      	ands	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2210      	movs	r2, #16
 800351a:	4013      	ands	r3, r2
 800351c:	d00b      	beq.n	8003536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a2c      	ldr	r2, [pc, #176]	; (80035d8 <UART_AdvFeatureConfig+0x154>)
 8003526:	4013      	ands	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2220      	movs	r2, #32
 800353c:	4013      	ands	r3, r2
 800353e:	d00b      	beq.n	8003558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4a25      	ldr	r2, [pc, #148]	; (80035dc <UART_AdvFeatureConfig+0x158>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2240      	movs	r2, #64	; 0x40
 800355e:	4013      	ands	r3, r2
 8003560:	d01d      	beq.n	800359e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <UART_AdvFeatureConfig+0x15c>)
 800356a:	4013      	ands	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	035b      	lsls	r3, r3, #13
 8003582:	429a      	cmp	r2, r3
 8003584:	d10b      	bne.n	800359e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <UART_AdvFeatureConfig+0x160>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	4013      	ands	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <UART_AdvFeatureConfig+0x164>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	0019      	movs	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	fffdffff 	.word	0xfffdffff
 80035cc:	fffeffff 	.word	0xfffeffff
 80035d0:	fffbffff 	.word	0xfffbffff
 80035d4:	ffff7fff 	.word	0xffff7fff
 80035d8:	ffffefff 	.word	0xffffefff
 80035dc:	ffffdfff 	.word	0xffffdfff
 80035e0:	ffefffff 	.word	0xffefffff
 80035e4:	ff9fffff 	.word	0xff9fffff
 80035e8:	fff7ffff 	.word	0xfff7ffff

080035ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b092      	sub	sp, #72	; 0x48
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2284      	movs	r2, #132	; 0x84
 80035f8:	2100      	movs	r1, #0
 80035fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035fc:	f7fd fe44 	bl	8001288 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2208      	movs	r2, #8
 800360c:	4013      	ands	r3, r2
 800360e:	2b08      	cmp	r3, #8
 8003610:	d12c      	bne.n	800366c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	0391      	lsls	r1, r2, #14
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4a46      	ldr	r2, [pc, #280]	; (8003734 <UART_CheckIdleState+0x148>)
 800361c:	9200      	str	r2, [sp, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	f000 f88c 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 8003624:	1e03      	subs	r3, r0, #0
 8003626:	d021      	beq.n	800366c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003628:	f3ef 8310 	mrs	r3, PRIMASK
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
 8003632:	2301      	movs	r3, #1
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	f383 8810 	msr	PRIMASK, r3
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	438a      	bics	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2278      	movs	r2, #120	; 0x78
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e05f      	b.n	800372c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2204      	movs	r2, #4
 8003674:	4013      	ands	r3, r2
 8003676:	2b04      	cmp	r3, #4
 8003678:	d146      	bne.n	8003708 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	03d1      	lsls	r1, r2, #15
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <UART_CheckIdleState+0x148>)
 8003684:	9200      	str	r2, [sp, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	f000 f858 	bl	800373c <UART_WaitOnFlagUntilTimeout>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d03b      	beq.n	8003708 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003690:	f3ef 8310 	mrs	r3, PRIMASK
 8003694:	60fb      	str	r3, [r7, #12]
  return(result);
 8003696:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
 800369a:	2301      	movs	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4921      	ldr	r1, [pc, #132]	; (8003738 <UART_CheckIdleState+0x14c>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80036c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
 80036cc:	2301      	movs	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	438a      	bics	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	2120      	movs	r1, #32
 80036fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2278      	movs	r2, #120	; 0x78
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e011      	b.n	800372c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	2120      	movs	r1, #32
 8003714:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2278      	movs	r2, #120	; 0x78
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b010      	add	sp, #64	; 0x40
 8003732:	bd80      	pop	{r7, pc}
 8003734:	01ffffff 	.word	0x01ffffff
 8003738:	fffffedf 	.word	0xfffffedf

0800373c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374c:	e04b      	b.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	3301      	adds	r3, #1
 8003752:	d048      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003754:	f7fd fd98 	bl	8001288 <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e04b      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2204      	movs	r2, #4
 8003776:	4013      	ands	r3, r2
 8003778:	d035      	beq.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	2208      	movs	r2, #8
 8003782:	4013      	ands	r3, r2
 8003784:	2b08      	cmp	r3, #8
 8003786:	d111      	bne.n	80037ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2208      	movs	r2, #8
 800378e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f83c 	bl	8003810 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2284      	movs	r2, #132	; 0x84
 800379c:	2108      	movs	r1, #8
 800379e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2278      	movs	r2, #120	; 0x78
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e02c      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	401a      	ands	r2, r3
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	429a      	cmp	r2, r3
 80037be:	d112      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f81f 	bl	8003810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2284      	movs	r2, #132	; 0x84
 80037d6:	2120      	movs	r1, #32
 80037d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2278      	movs	r2, #120	; 0x78
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e00f      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	425a      	negs	r2, r3
 80037f6:	4153      	adcs	r3, r2
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	001a      	movs	r2, r3
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d0a4      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b004      	add	sp, #16
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08e      	sub	sp, #56	; 0x38
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	617b      	str	r3, [r7, #20]
  return(result);
 800381e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
 8003822:	2301      	movs	r3, #1
 8003824:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4926      	ldr	r1, [pc, #152]	; (80038d4 <UART_EndRxTransfer+0xc4>)
 800383a:	400a      	ands	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384a:	f3ef 8310 	mrs	r3, PRIMASK
 800384e:	623b      	str	r3, [r7, #32]
  return(result);
 8003850:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
 8003854:	2301      	movs	r3, #1
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2101      	movs	r1, #1
 800386c:	438a      	bics	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003880:	2b01      	cmp	r3, #1
 8003882:	d118      	bne.n	80038b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003884:	f3ef 8310 	mrs	r3, PRIMASK
 8003888:	60bb      	str	r3, [r7, #8]
  return(result);
 800388a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388e:	2301      	movs	r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2110      	movs	r1, #16
 80038a6:	438a      	bics	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	2120      	movs	r1, #32
 80038bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b00e      	add	sp, #56	; 0x38
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	fffffedf 	.word	0xfffffedf

080038d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80038dc:	4a06      	ldr	r2, [pc, #24]	; (80038f8 <MX_FATFS_Init+0x20>)
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <MX_FATFS_Init+0x24>)
 80038e0:	0011      	movs	r1, r2
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 fe3a 	bl	800455c <FATFS_LinkDriver>
 80038e8:	0003      	movs	r3, r0
 80038ea:	001a      	movs	r2, r3
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <MX_FATFS_Init+0x28>)
 80038ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	200001b0 	.word	0x200001b0
 80038fc:	2000001c 	.word	0x2000001c
 8003900:	200001ac 	.word	0x200001ac

08003904 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	0002      	movs	r2, r0
 800390c:	1dfb      	adds	r3, r7, #7
 800390e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	0018      	movs	r0, r3
 8003916:	f000 fa1f 	bl	8003d58 <USER_SPI_initialize>
 800391a:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dfb      	adds	r3, r7, #7
 800392e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8003930:	1dfb      	adds	r3, r7, #7
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 fb27 	bl	8003f88 <USER_SPI_status>
 800393a:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	250f      	movs	r5, #15
 8003952:	197b      	adds	r3, r7, r5
 8003954:	1c02      	adds	r2, r0, #0
 8003956:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read ( pdrv, buff,  sector,  count);
 8003958:	683c      	ldr	r4, [r7, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	197b      	adds	r3, r7, r5
 8003960:	7818      	ldrb	r0, [r3, #0]
 8003962:	0023      	movs	r3, r4
 8003964:	f000 fb26 	bl	8003fb4 <USER_SPI_read>
 8003968:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bdb0      	pop	{r4, r5, r7, pc}

08003972 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003972:	b5b0      	push	{r4, r5, r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	250f      	movs	r5, #15
 8003980:	197b      	adds	r3, r7, r5
 8003982:	1c02      	adds	r2, r0, #0
 8003984:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write ( pdrv, buff, sector, count);
 8003986:	683c      	ldr	r4, [r7, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	197b      	adds	r3, r7, r5
 800398e:	7818      	ldrb	r0, [r3, #0]
 8003990:	0023      	movs	r3, r4
 8003992:	f000 fb7b 	bl	800408c <USER_SPI_write>
 8003996:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b004      	add	sp, #16
 800399e:	bdb0      	pop	{r4, r5, r7, pc}

080039a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	603a      	str	r2, [r7, #0]
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	1c02      	adds	r2, r0, #0
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	1dbb      	adds	r3, r7, #6
 80039b0:	1c0a      	adds	r2, r1, #0
 80039b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl ( pdrv,  cmd, buff);
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	1dbb      	adds	r3, r7, #6
 80039b8:	7819      	ldrb	r1, [r3, #0]
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 fbe4 	bl	800418c <USER_SPI_ioctl>
 80039c4:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b002      	add	sp, #8
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80039d8:	f7fd fc56 	bl	8001288 <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SPI_Timer_On+0x20>)
 80039e0:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <SPI_Timer_On+0x24>)
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	200001b8 	.word	0x200001b8
 80039f4:	200001bc 	.word	0x200001bc

080039f8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80039fc:	f7fd fc44 	bl	8001288 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <SPI_Timer_Status+0x24>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1ad2      	subs	r2, r2, r3
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <SPI_Timer_Status+0x28>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	419b      	sbcs	r3, r3
 8003a10:	425b      	negs	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	200001b8 	.word	0x200001b8
 8003a20:	200001bc 	.word	0x200001bc

08003a24 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	1dfb      	adds	r3, r7, #7
 8003a2e:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 8003a30:	240f      	movs	r4, #15
 8003a32:	193a      	adds	r2, r7, r4
 8003a34:	1df9      	adds	r1, r7, #7
 8003a36:	4806      	ldr	r0, [pc, #24]	; (8003a50 <xchg_spi+0x2c>)
 8003a38:	2332      	movs	r3, #50	; 0x32
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f7fe ffd7 	bl	80029f0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	781b      	ldrb	r3, [r3, #0]
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b005      	add	sp, #20
 8003a4c:	bd90      	pop	{r4, r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	200000bc 	.word	0x200000bc

08003a54 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	e00a      	b.n	8003a7a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	18d4      	adds	r4, r2, r3
 8003a6a:	20ff      	movs	r0, #255	; 0xff
 8003a6c:	f7ff ffda 	bl	8003a24 <xchg_spi>
 8003a70:	0003      	movs	r3, r0
 8003a72:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3f0      	bcc.n	8003a64 <rcvr_spi_multi+0x10>
	}
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b005      	add	sp, #20
 8003a8a:	bd90      	pop	{r4, r7, pc}

08003a8c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e009      	b.n	8003ab0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff ffbd 	bl	8003a24 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3f1      	bcc.n	8003a9c <xmit_spi_multi+0x10>
	}
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003ac2:	b5b0      	push	{r4, r5, r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003aca:	f7fd fbdd 	bl	8001288 <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003ad6:	250f      	movs	r5, #15
 8003ad8:	197c      	adds	r4, r7, r5
 8003ada:	20ff      	movs	r0, #255	; 0xff
 8003adc:	f7ff ffa2 	bl	8003a24 <xchg_spi>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003ae4:	197b      	adds	r3, r7, r5
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2bff      	cmp	r3, #255	; 0xff
 8003aea:	d007      	beq.n	8003afc <wait_ready+0x3a>
 8003aec:	f7fd fbcc 	bl	8001288 <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d8ec      	bhi.n	8003ad6 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8003afc:	230f      	movs	r3, #15
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	3bff      	subs	r3, #255	; 0xff
 8003b04:	425a      	negs	r2, r3
 8003b06:	4153      	adcs	r3, r2
 8003b08:	b2db      	uxtb	r3, r3
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b006      	add	sp, #24
 8003b10:	bdb0      	pop	{r4, r5, r7, pc}

08003b12 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	0059      	lsls	r1, r3, #1
 8003b1a:	2390      	movs	r3, #144	; 0x90
 8003b1c:	05db      	lsls	r3, r3, #23
 8003b1e:	2201      	movs	r2, #1
 8003b20:	0018      	movs	r0, r3
 8003b22:	f7fd fdfb 	bl	800171c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003b26:	20ff      	movs	r0, #255	; 0xff
 8003b28:	f7ff ff7c 	bl	8003a24 <xchg_spi>

}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	0059      	lsls	r1, r3, #1
 8003b3a:	2390      	movs	r3, #144	; 0x90
 8003b3c:	05db      	lsls	r3, r3, #23
 8003b3e:	2200      	movs	r2, #0
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fd fdeb 	bl	800171c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003b46:	20ff      	movs	r0, #255	; 0xff
 8003b48:	f7ff ff6c 	bl	8003a24 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003b4c:	23fa      	movs	r3, #250	; 0xfa
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff ffb6 	bl	8003ac2 <wait_ready>
 8003b56:	1e03      	subs	r3, r0, #0
 8003b58:	d001      	beq.n	8003b5e <spiselect+0x2c>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e002      	b.n	8003b64 <spiselect+0x32>

	despiselect();
 8003b5e:	f7ff ffd8 	bl	8003b12 <despiselect>
	return 0;	/* Timeout */
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003b6a:	b5b0      	push	{r4, r5, r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003b74:	20c8      	movs	r0, #200	; 0xc8
 8003b76:	f7ff ff2b 	bl	80039d0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003b7a:	250f      	movs	r5, #15
 8003b7c:	197c      	adds	r4, r7, r5
 8003b7e:	20ff      	movs	r0, #255	; 0xff
 8003b80:	f7ff ff50 	bl	8003a24 <xchg_spi>
 8003b84:	0003      	movs	r3, r0
 8003b86:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003b88:	197b      	adds	r3, r7, r5
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2bff      	cmp	r3, #255	; 0xff
 8003b8e:	d103      	bne.n	8003b98 <rcvr_datablock+0x2e>
 8003b90:	f7ff ff32 	bl	80039f8 <SPI_Timer_Status>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d1f0      	bne.n	8003b7a <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003b98:	230f      	movs	r3, #15
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2bfe      	cmp	r3, #254	; 0xfe
 8003ba0:	d001      	beq.n	8003ba6 <rcvr_datablock+0x3c>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e00c      	b.n	8003bc0 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0011      	movs	r1, r2
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7ff ff51 	bl	8003a54 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003bb2:	20ff      	movs	r0, #255	; 0xff
 8003bb4:	f7ff ff36 	bl	8003a24 <xchg_spi>
 8003bb8:	20ff      	movs	r0, #255	; 0xff
 8003bba:	f7ff ff33 	bl	8003a24 <xchg_spi>

	return 1;						/* Function succeeded */
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b004      	add	sp, #16
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}

08003bc8 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	000a      	movs	r2, r1
 8003bd2:	1cfb      	adds	r3, r7, #3
 8003bd4:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003bd6:	23fa      	movs	r3, #250	; 0xfa
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff ff71 	bl	8003ac2 <wait_ready>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d101      	bne.n	8003be8 <xmit_datablock+0x20>
 8003be4:	2300      	movs	r3, #0
 8003be6:	e025      	b.n	8003c34 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8003be8:	1cfb      	adds	r3, r7, #3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff ff19 	bl	8003a24 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003bf2:	1cfb      	adds	r3, r7, #3
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2bfd      	cmp	r3, #253	; 0xfd
 8003bf8:	d01b      	beq.n	8003c32 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	009a      	lsls	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0011      	movs	r1, r2
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7ff ff42 	bl	8003a8c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003c08:	20ff      	movs	r0, #255	; 0xff
 8003c0a:	f7ff ff0b 	bl	8003a24 <xchg_spi>
 8003c0e:	20ff      	movs	r0, #255	; 0xff
 8003c10:	f7ff ff08 	bl	8003a24 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003c14:	250f      	movs	r5, #15
 8003c16:	197c      	adds	r4, r7, r5
 8003c18:	20ff      	movs	r0, #255	; 0xff
 8003c1a:	f7ff ff03 	bl	8003a24 <xchg_spi>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	221f      	movs	r2, #31
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d001      	beq.n	8003c32 <xmit_datablock+0x6a>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <xmit_datablock+0x6c>
	}
	return 1;
 8003c32:	2301      	movs	r3, #1
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b004      	add	sp, #16
 8003c3a:	bdb0      	pop	{r4, r5, r7, pc}

08003c3c <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003c3c:	b5b0      	push	{r4, r5, r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	0002      	movs	r2, r0
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	1dfb      	adds	r3, r7, #7
 8003c48:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	da15      	bge.n	8003c80 <send_cmd+0x44>
		cmd &= 0x7F;
 8003c54:	1dfb      	adds	r3, r7, #7
 8003c56:	1dfa      	adds	r2, r7, #7
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	217f      	movs	r1, #127	; 0x7f
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8003c60:	250e      	movs	r5, #14
 8003c62:	197c      	adds	r4, r7, r5
 8003c64:	2100      	movs	r1, #0
 8003c66:	2037      	movs	r0, #55	; 0x37
 8003c68:	f7ff ffe8 	bl	8003c3c <send_cmd>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8003c70:	002a      	movs	r2, r5
 8003c72:	18bb      	adds	r3, r7, r2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d902      	bls.n	8003c80 <send_cmd+0x44>
 8003c7a:	18bb      	adds	r3, r7, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	e067      	b.n	8003d50 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	d007      	beq.n	8003c98 <send_cmd+0x5c>
		despiselect();
 8003c88:	f7ff ff43 	bl	8003b12 <despiselect>
		if (!spiselect()) return 0xFF;
 8003c8c:	f7ff ff51 	bl	8003b32 <spiselect>
 8003c90:	1e03      	subs	r3, r0, #0
 8003c92:	d101      	bne.n	8003c98 <send_cmd+0x5c>
 8003c94:	23ff      	movs	r3, #255	; 0xff
 8003c96:	e05b      	b.n	8003d50 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003c98:	1dfb      	adds	r3, r7, #7
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2240      	movs	r2, #64	; 0x40
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7ff febe 	bl	8003a24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	0e1b      	lsrs	r3, r3, #24
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7ff feb8 	bl	8003a24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff feb2 	bl	8003a24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7ff feac 	bl	8003a24 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff fea7 	bl	8003a24 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003cd6:	210f      	movs	r1, #15
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d102      	bne.n	8003cec <send_cmd+0xb0>
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2295      	movs	r2, #149	; 0x95
 8003cea:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d103      	bne.n	8003cfc <send_cmd+0xc0>
 8003cf4:	230f      	movs	r3, #15
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	2287      	movs	r2, #135	; 0x87
 8003cfa:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff fe8e 	bl	8003a24 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	d102      	bne.n	8003d16 <send_cmd+0xda>
 8003d10:	20ff      	movs	r0, #255	; 0xff
 8003d12:	f7ff fe87 	bl	8003a24 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003d16:	230f      	movs	r3, #15
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	220a      	movs	r2, #10
 8003d1c:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8003d1e:	250e      	movs	r5, #14
 8003d20:	197c      	adds	r4, r7, r5
 8003d22:	20ff      	movs	r0, #255	; 0xff
 8003d24:	f7ff fe7e 	bl	8003a24 <xchg_spi>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8003d2c:	197b      	adds	r3, r7, r5
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da09      	bge.n	8003d4a <send_cmd+0x10e>
 8003d36:	210f      	movs	r1, #15
 8003d38:	187b      	adds	r3, r7, r1
 8003d3a:	187a      	adds	r2, r7, r1
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	3a01      	subs	r2, #1
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e9      	bne.n	8003d1e <send_cmd+0xe2>

	return res;							/* Return received response */
 8003d4a:	230e      	movs	r3, #14
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	781b      	ldrb	r3, [r3, #0]
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b004      	add	sp, #16
 8003d56:	bdb0      	pop	{r4, r5, r7, pc}

08003d58 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d58:	b5b0      	push	{r4, r5, r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	0002      	movs	r2, r0
 8003d60:	1dfb      	adds	r3, r7, #7
 8003d62:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <USER_SPI_initialize+0x18>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e100      	b.n	8003f72 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003d70:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <USER_SPI_initialize+0x224>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	001a      	movs	r2, r3
 8003d78:	2302      	movs	r3, #2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <USER_SPI_initialize+0x2e>
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <USER_SPI_initialize+0x224>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	e0f5      	b.n	8003f72 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8003d86:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <USER_SPI_initialize+0x228>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2238      	movs	r2, #56	; 0x38
 8003d8e:	4393      	bics	r3, r2
 8003d90:	001a      	movs	r2, r3
 8003d92:	4b7b      	ldr	r3, [pc, #492]	; (8003f80 <USER_SPI_initialize+0x228>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2130      	movs	r1, #48	; 0x30
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003d9c:	230f      	movs	r3, #15
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	220a      	movs	r2, #10
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e008      	b.n	8003db8 <USER_SPI_initialize+0x60>
 8003da6:	20ff      	movs	r0, #255	; 0xff
 8003da8:	f7ff fe3c 	bl	8003a24 <xchg_spi>
 8003dac:	210f      	movs	r1, #15
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	3a01      	subs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	240f      	movs	r4, #15
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f1      	bne.n	8003da6 <USER_SPI_initialize+0x4e>

	ty = 0;
 8003dc2:	230d      	movs	r3, #13
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003dca:	2100      	movs	r1, #0
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7ff ff35 	bl	8003c3c <send_cmd>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d000      	beq.n	8003dda <USER_SPI_initialize+0x82>
 8003dd8:	e0a6      	b.n	8003f28 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003dda:	23fa      	movs	r3, #250	; 0xfa
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff fdf6 	bl	80039d0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003de4:	23d5      	movs	r3, #213	; 0xd5
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	0019      	movs	r1, r3
 8003dea:	2008      	movs	r0, #8
 8003dec:	f7ff ff26 	bl	8003c3c <send_cmd>
 8003df0:	0003      	movs	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d162      	bne.n	8003ebc <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003df6:	193b      	adds	r3, r7, r4
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e00f      	b.n	8003e1e <USER_SPI_initialize+0xc6>
 8003dfe:	250f      	movs	r5, #15
 8003e00:	197b      	adds	r3, r7, r5
 8003e02:	781c      	ldrb	r4, [r3, #0]
 8003e04:	20ff      	movs	r0, #255	; 0xff
 8003e06:	f7ff fe0d 	bl	8003a24 <xchg_spi>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	001a      	movs	r2, r3
 8003e0e:	2308      	movs	r3, #8
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	551a      	strb	r2, [r3, r4]
 8003e14:	197b      	adds	r3, r7, r5
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	197b      	adds	r3, r7, r5
 8003e1a:	3201      	adds	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	230f      	movs	r3, #15
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d9ea      	bls.n	8003dfe <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003e28:	2208      	movs	r2, #8
 8003e2a:	18bb      	adds	r3, r7, r2
 8003e2c:	789b      	ldrb	r3, [r3, #2]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d000      	beq.n	8003e34 <USER_SPI_initialize+0xdc>
 8003e32:	e079      	b.n	8003f28 <USER_SPI_initialize+0x1d0>
 8003e34:	18bb      	adds	r3, r7, r2
 8003e36:	78db      	ldrb	r3, [r3, #3]
 8003e38:	2baa      	cmp	r3, #170	; 0xaa
 8003e3a:	d000      	beq.n	8003e3e <USER_SPI_initialize+0xe6>
 8003e3c:	e074      	b.n	8003f28 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	f7ff fdda 	bl	80039f8 <SPI_Timer_Status>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d007      	beq.n	8003e58 <USER_SPI_initialize+0x100>
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	05db      	lsls	r3, r3, #23
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	20a9      	movs	r0, #169	; 0xa9
 8003e50:	f7ff fef4 	bl	8003c3c <send_cmd>
 8003e54:	1e03      	subs	r3, r0, #0
 8003e56:	d1f3      	bne.n	8003e40 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003e58:	f7ff fdce 	bl	80039f8 <SPI_Timer_Status>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d063      	beq.n	8003f28 <USER_SPI_initialize+0x1d0>
 8003e60:	2100      	movs	r1, #0
 8003e62:	203a      	movs	r0, #58	; 0x3a
 8003e64:	f7ff feea 	bl	8003c3c <send_cmd>
 8003e68:	1e03      	subs	r3, r0, #0
 8003e6a:	d15d      	bne.n	8003f28 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e00f      	b.n	8003e96 <USER_SPI_initialize+0x13e>
 8003e76:	250f      	movs	r5, #15
 8003e78:	197b      	adds	r3, r7, r5
 8003e7a:	781c      	ldrb	r4, [r3, #0]
 8003e7c:	20ff      	movs	r0, #255	; 0xff
 8003e7e:	f7ff fdd1 	bl	8003a24 <xchg_spi>
 8003e82:	0003      	movs	r3, r0
 8003e84:	001a      	movs	r2, r3
 8003e86:	2308      	movs	r3, #8
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	551a      	strb	r2, [r3, r4]
 8003e8c:	197b      	adds	r3, r7, r5
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	197b      	adds	r3, r7, r5
 8003e92:	3201      	adds	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	230f      	movs	r3, #15
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d9ea      	bls.n	8003e76 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	2340      	movs	r3, #64	; 0x40
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d001      	beq.n	8003eb2 <USER_SPI_initialize+0x15a>
 8003eae:	220c      	movs	r2, #12
 8003eb0:	e000      	b.n	8003eb4 <USER_SPI_initialize+0x15c>
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	230d      	movs	r3, #13
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e035      	b.n	8003f28 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	20a9      	movs	r0, #169	; 0xa9
 8003ec0:	f7ff febc 	bl	8003c3c <send_cmd>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d808      	bhi.n	8003edc <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003eca:	230d      	movs	r3, #13
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	230e      	movs	r3, #14
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	22a9      	movs	r2, #169	; 0xa9
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	e007      	b.n	8003eec <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003edc:	230d      	movs	r3, #13
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	230e      	movs	r3, #14
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	f7ff fd83 	bl	80039f8 <SPI_Timer_Status>
 8003ef2:	1e03      	subs	r3, r0, #0
 8003ef4:	d008      	beq.n	8003f08 <USER_SPI_initialize+0x1b0>
 8003ef6:	230e      	movs	r3, #14
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2100      	movs	r1, #0
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fe9c 	bl	8003c3c <send_cmd>
 8003f04:	1e03      	subs	r3, r0, #0
 8003f06:	d1f2      	bne.n	8003eee <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003f08:	f7ff fd76 	bl	80039f8 <SPI_Timer_Status>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d007      	beq.n	8003f20 <USER_SPI_initialize+0x1c8>
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	0019      	movs	r1, r3
 8003f16:	2010      	movs	r0, #16
 8003f18:	f7ff fe90 	bl	8003c3c <send_cmd>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d003      	beq.n	8003f28 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8003f20:	230d      	movs	r3, #13
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
		}
	} 
	CardType = ty;	/* Card type */
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <USER_SPI_initialize+0x22c>)
 8003f2a:	240d      	movs	r4, #13
 8003f2c:	193a      	adds	r2, r7, r4
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	701a      	strb	r2, [r3, #0]
	despiselect();
 8003f32:	f7ff fdee 	bl	8003b12 <despiselect>

	if (ty) {			/* OK */
 8003f36:	193b      	adds	r3, r7, r4
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d013      	beq.n	8003f66 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <USER_SPI_initialize+0x228>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2238      	movs	r2, #56	; 0x38
 8003f46:	4393      	bics	r3, r2
 8003f48:	001a      	movs	r2, r3
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <USER_SPI_initialize+0x228>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2110      	movs	r1, #16
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <USER_SPI_initialize+0x224>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <USER_SPI_initialize+0x224>)
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e002      	b.n	8003f6c <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <USER_SPI_initialize+0x224>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <USER_SPI_initialize+0x224>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	20000030 	.word	0x20000030
 8003f80:	200000bc 	.word	0x200000bc
 8003f84:	200001b4 	.word	0x200001b4

08003f88 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	0002      	movs	r2, r0
 8003f90:	1dfb      	adds	r3, r7, #7
 8003f92:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <USER_SPI_status+0x18>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e002      	b.n	8003fa6 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <USER_SPI_status+0x28>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b002      	add	sp, #8
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000030 	.word	0x20000030

08003fb4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	210f      	movs	r1, #15
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	1c02      	adds	r2, r0, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <USER_SPI_read+0x22>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <USER_SPI_read+0x26>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e04f      	b.n	800407a <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <USER_SPI_read+0xd0>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	001a      	movs	r2, r3
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d001      	beq.n	8003fec <USER_SPI_read+0x38>
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e046      	b.n	800407a <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003fec:	4b26      	ldr	r3, [pc, #152]	; (8004088 <USER_SPI_read+0xd4>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d102      	bne.n	8003ffe <USER_SPI_read+0x4a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	025b      	lsls	r3, r3, #9
 8003ffc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d112      	bne.n	800402a <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0019      	movs	r1, r3
 8004008:	2011      	movs	r0, #17
 800400a:	f7ff fe17 	bl	8003c3c <send_cmd>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d12d      	bne.n	800406e <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	009a      	lsls	r2, r3, #2
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff fda5 	bl	8003b6a <rcvr_datablock>
 8004020:	1e03      	subs	r3, r0, #0
 8004022:	d024      	beq.n	800406e <USER_SPI_read+0xba>
			count = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	e021      	b.n	800406e <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0019      	movs	r1, r3
 800402e:	2012      	movs	r0, #18
 8004030:	f7ff fe04 	bl	8003c3c <send_cmd>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d11a      	bne.n	800406e <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0011      	movs	r1, r2
 8004040:	0018      	movs	r0, r3
 8004042:	f7ff fd92 	bl	8003b6a <rcvr_datablock>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d00c      	beq.n	8004064 <USER_SPI_read+0xb0>
				buff += 512;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	4694      	mov	ip, r2
 8004052:	4463      	add	r3, ip
 8004054:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	3b01      	subs	r3, #1
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ea      	bne.n	8004038 <USER_SPI_read+0x84>
 8004062:	e000      	b.n	8004066 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8004064:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004066:	2100      	movs	r1, #0
 8004068:	200c      	movs	r0, #12
 800406a:	f7ff fde7 	bl	8003c3c <send_cmd>
		}
	}
	despiselect();
 800406e:	f7ff fd50 	bl	8003b12 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	4193      	sbcs	r3, r2
 8004078:	b2db      	uxtb	r3, r3
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	20000030 	.word	0x20000030
 8004088:	200001b4 	.word	0x200001b4

0800408c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	210f      	movs	r1, #15
 800409a:	187b      	adds	r3, r7, r1
 800409c:	1c02      	adds	r2, r0, #0
 800409e:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <USER_SPI_write+0x22>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <USER_SPI_write+0x26>
 80040ae:	2304      	movs	r3, #4
 80040b0:	e063      	b.n	800417a <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80040b2:	4b34      	ldr	r3, [pc, #208]	; (8004184 <USER_SPI_write+0xf8>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	001a      	movs	r2, r3
 80040ba:	2301      	movs	r3, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	d001      	beq.n	80040c4 <USER_SPI_write+0x38>
 80040c0:	2303      	movs	r3, #3
 80040c2:	e05a      	b.n	800417a <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80040c4:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <USER_SPI_write+0xf8>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	001a      	movs	r2, r3
 80040cc:	2304      	movs	r3, #4
 80040ce:	4013      	ands	r3, r2
 80040d0:	d001      	beq.n	80040d6 <USER_SPI_write+0x4a>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e051      	b.n	800417a <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <USER_SPI_write+0xfc>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	001a      	movs	r2, r3
 80040dc:	2308      	movs	r3, #8
 80040de:	4013      	ands	r3, r2
 80040e0:	d102      	bne.n	80040e8 <USER_SPI_write+0x5c>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d110      	bne.n	8004110 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0019      	movs	r1, r3
 80040f2:	2018      	movs	r0, #24
 80040f4:	f7ff fda2 	bl	8003c3c <send_cmd>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d138      	bne.n	800416e <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	21fe      	movs	r1, #254	; 0xfe
 8004100:	0018      	movs	r0, r3
 8004102:	f7ff fd61 	bl	8003bc8 <xmit_datablock>
 8004106:	1e03      	subs	r3, r0, #0
 8004108:	d031      	beq.n	800416e <USER_SPI_write+0xe2>
			count = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	e02e      	b.n	800416e <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <USER_SPI_write+0xfc>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	001a      	movs	r2, r3
 8004116:	2306      	movs	r3, #6
 8004118:	4013      	ands	r3, r2
 800411a:	d004      	beq.n	8004126 <USER_SPI_write+0x9a>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	0019      	movs	r1, r3
 8004120:	2097      	movs	r0, #151	; 0x97
 8004122:	f7ff fd8b 	bl	8003c3c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0019      	movs	r1, r3
 800412a:	2019      	movs	r0, #25
 800412c:	f7ff fd86 	bl	8003c3c <send_cmd>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d11c      	bne.n	800416e <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	21fc      	movs	r1, #252	; 0xfc
 8004138:	0018      	movs	r0, r3
 800413a:	f7ff fd45 	bl	8003bc8 <xmit_datablock>
 800413e:	1e03      	subs	r3, r0, #0
 8004140:	d00c      	beq.n	800415c <USER_SPI_write+0xd0>
				buff += 512;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	4694      	mov	ip, r2
 800414a:	4463      	add	r3, ip
 800414c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	3b01      	subs	r3, #1
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ec      	bne.n	8004134 <USER_SPI_write+0xa8>
 800415a:	e000      	b.n	800415e <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 800415c:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800415e:	21fd      	movs	r1, #253	; 0xfd
 8004160:	2000      	movs	r0, #0
 8004162:	f7ff fd31 	bl	8003bc8 <xmit_datablock>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d101      	bne.n	800416e <USER_SPI_write+0xe2>
 800416a:	2301      	movs	r3, #1
 800416c:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800416e:	f7ff fcd0 	bl	8003b12 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	4193      	sbcs	r3, r2
 8004178:	b2db      	uxtb	r3, r3
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b004      	add	sp, #16
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	20000030 	.word	0x20000030
 8004188:	200001b4 	.word	0x200001b4

0800418c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b08d      	sub	sp, #52	; 0x34
 8004190:	af00      	add	r7, sp, #0
 8004192:	603a      	str	r2, [r7, #0]
 8004194:	1dfb      	adds	r3, r7, #7
 8004196:	1c02      	adds	r2, r0, #0
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	1c0a      	adds	r2, r1, #0
 800419e:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80041a0:	1dfb      	adds	r3, r7, #7
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <USER_SPI_ioctl+0x20>
 80041a8:	2304      	movs	r3, #4
 80041aa:	e178      	b.n	800449e <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80041ac:	4bbe      	ldr	r3, [pc, #760]	; (80044a8 <USER_SPI_ioctl+0x31c>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	001a      	movs	r2, r3
 80041b4:	2301      	movs	r3, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d001      	beq.n	80041be <USER_SPI_ioctl+0x32>
 80041ba:	2303      	movs	r3, #3
 80041bc:	e16f      	b.n	800449e <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 80041be:	232f      	movs	r3, #47	; 0x2f
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80041c6:	1dbb      	adds	r3, r7, #6
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d100      	bne.n	80041d0 <USER_SPI_ioctl+0x44>
 80041ce:	e100      	b.n	80043d2 <USER_SPI_ioctl+0x246>
 80041d0:	dd00      	ble.n	80041d4 <USER_SPI_ioctl+0x48>
 80041d2:	e14d      	b.n	8004470 <USER_SPI_ioctl+0x2e4>
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d100      	bne.n	80041da <USER_SPI_ioctl+0x4e>
 80041d8:	e074      	b.n	80042c4 <USER_SPI_ioctl+0x138>
 80041da:	dd00      	ble.n	80041de <USER_SPI_ioctl+0x52>
 80041dc:	e148      	b.n	8004470 <USER_SPI_ioctl+0x2e4>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <USER_SPI_ioctl+0x5c>
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d00a      	beq.n	80041fc <USER_SPI_ioctl+0x70>
 80041e6:	e143      	b.n	8004470 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80041e8:	f7ff fca3 	bl	8003b32 <spiselect>
 80041ec:	1e03      	subs	r3, r0, #0
 80041ee:	d100      	bne.n	80041f2 <USER_SPI_ioctl+0x66>
 80041f0:	e143      	b.n	800447a <USER_SPI_ioctl+0x2ee>
 80041f2:	232f      	movs	r3, #47	; 0x2f
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
		break;
 80041fa:	e13e      	b.n	800447a <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80041fc:	2100      	movs	r1, #0
 80041fe:	2009      	movs	r0, #9
 8004200:	f7ff fd1c 	bl	8003c3c <send_cmd>
 8004204:	1e03      	subs	r3, r0, #0
 8004206:	d000      	beq.n	800420a <USER_SPI_ioctl+0x7e>
 8004208:	e139      	b.n	800447e <USER_SPI_ioctl+0x2f2>
 800420a:	240c      	movs	r4, #12
 800420c:	193b      	adds	r3, r7, r4
 800420e:	2110      	movs	r1, #16
 8004210:	0018      	movs	r0, r3
 8004212:	f7ff fcaa 	bl	8003b6a <rcvr_datablock>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d100      	bne.n	800421c <USER_SPI_ioctl+0x90>
 800421a:	e130      	b.n	800447e <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800421c:	0020      	movs	r0, r4
 800421e:	183b      	adds	r3, r7, r0
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	099b      	lsrs	r3, r3, #6
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d115      	bne.n	8004256 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800422a:	183b      	adds	r3, r7, r0
 800422c:	7a5b      	ldrb	r3, [r3, #9]
 800422e:	001a      	movs	r2, r3
 8004230:	183b      	adds	r3, r7, r0
 8004232:	7a1b      	ldrb	r3, [r3, #8]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	18d3      	adds	r3, r2, r3
 8004238:	0019      	movs	r1, r3
 800423a:	183b      	adds	r3, r7, r0
 800423c:	79db      	ldrb	r3, [r3, #7]
 800423e:	041a      	lsls	r2, r3, #16
 8004240:	23fc      	movs	r3, #252	; 0xfc
 8004242:	039b      	lsls	r3, r3, #14
 8004244:	4013      	ands	r3, r2
 8004246:	18cb      	adds	r3, r1, r3
 8004248:	3301      	adds	r3, #1
 800424a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	029a      	lsls	r2, r3, #10
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e031      	b.n	80042ba <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004256:	200c      	movs	r0, #12
 8004258:	183b      	adds	r3, r7, r0
 800425a:	795b      	ldrb	r3, [r3, #5]
 800425c:	220f      	movs	r2, #15
 800425e:	4013      	ands	r3, r2
 8004260:	b2da      	uxtb	r2, r3
 8004262:	183b      	adds	r3, r7, r0
 8004264:	7a9b      	ldrb	r3, [r3, #10]
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	b2db      	uxtb	r3, r3
 800426a:	18d3      	adds	r3, r2, r3
 800426c:	b2da      	uxtb	r2, r3
 800426e:	183b      	adds	r3, r7, r0
 8004270:	7a5b      	ldrb	r3, [r3, #9]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2106      	movs	r1, #6
 8004278:	400b      	ands	r3, r1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	b2da      	uxtb	r2, r3
 8004280:	242e      	movs	r4, #46	; 0x2e
 8004282:	193b      	adds	r3, r7, r4
 8004284:	3202      	adds	r2, #2
 8004286:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004288:	183b      	adds	r3, r7, r0
 800428a:	7a1b      	ldrb	r3, [r3, #8]
 800428c:	099b      	lsrs	r3, r3, #6
 800428e:	b2db      	uxtb	r3, r3
 8004290:	001a      	movs	r2, r3
 8004292:	183b      	adds	r3, r7, r0
 8004294:	79db      	ldrb	r3, [r3, #7]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	18d2      	adds	r2, r2, r3
 800429a:	183b      	adds	r3, r7, r0
 800429c:	799b      	ldrb	r3, [r3, #6]
 800429e:	0299      	lsls	r1, r3, #10
 80042a0:	23c0      	movs	r3, #192	; 0xc0
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	400b      	ands	r3, r1
 80042a6:	18d3      	adds	r3, r2, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80042ac:	193b      	adds	r3, r7, r4
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	3b09      	subs	r3, #9
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	409a      	lsls	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80042ba:	232f      	movs	r3, #47	; 0x2f
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80042c2:	e0dc      	b.n	800447e <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80042c4:	4b79      	ldr	r3, [pc, #484]	; (80044ac <USER_SPI_ioctl+0x320>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	001a      	movs	r2, r3
 80042ca:	2304      	movs	r3, #4
 80042cc:	4013      	ands	r3, r2
 80042ce:	d035      	beq.n	800433c <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80042d0:	2100      	movs	r1, #0
 80042d2:	208d      	movs	r0, #141	; 0x8d
 80042d4:	f7ff fcb2 	bl	8003c3c <send_cmd>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d000      	beq.n	80042de <USER_SPI_ioctl+0x152>
 80042dc:	e0d1      	b.n	8004482 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 80042de:	20ff      	movs	r0, #255	; 0xff
 80042e0:	f7ff fba0 	bl	8003a24 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80042e4:	230c      	movs	r3, #12
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2110      	movs	r1, #16
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7ff fc3d 	bl	8003b6a <rcvr_datablock>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d100      	bne.n	80042f6 <USER_SPI_ioctl+0x16a>
 80042f4:	e0c5      	b.n	8004482 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80042f6:	232e      	movs	r3, #46	; 0x2e
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2230      	movs	r2, #48	; 0x30
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e008      	b.n	8004312 <USER_SPI_ioctl+0x186>
 8004300:	20ff      	movs	r0, #255	; 0xff
 8004302:	f7ff fb8f 	bl	8003a24 <xchg_spi>
 8004306:	212e      	movs	r1, #46	; 0x2e
 8004308:	187b      	adds	r3, r7, r1
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	187b      	adds	r3, r7, r1
 800430e:	3a01      	subs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	232e      	movs	r3, #46	; 0x2e
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f1      	bne.n	8004300 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800431c:	230c      	movs	r3, #12
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	7a9b      	ldrb	r3, [r3, #10]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	b2db      	uxtb	r3, r3
 8004326:	001a      	movs	r2, r3
 8004328:	2310      	movs	r3, #16
 800432a:	4093      	lsls	r3, r2
 800432c:	001a      	movs	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004332:	232f      	movs	r3, #47	; 0x2f
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800433a:	e0a2      	b.n	8004482 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800433c:	2100      	movs	r1, #0
 800433e:	2009      	movs	r0, #9
 8004340:	f7ff fc7c 	bl	8003c3c <send_cmd>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d000      	beq.n	800434a <USER_SPI_ioctl+0x1be>
 8004348:	e09b      	b.n	8004482 <USER_SPI_ioctl+0x2f6>
 800434a:	240c      	movs	r4, #12
 800434c:	193b      	adds	r3, r7, r4
 800434e:	2110      	movs	r1, #16
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff fc0a 	bl	8003b6a <rcvr_datablock>
 8004356:	1e03      	subs	r3, r0, #0
 8004358:	d100      	bne.n	800435c <USER_SPI_ioctl+0x1d0>
 800435a:	e092      	b.n	8004482 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800435c:	4b53      	ldr	r3, [pc, #332]	; (80044ac <USER_SPI_ioctl+0x320>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	001a      	movs	r2, r3
 8004362:	2302      	movs	r3, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d016      	beq.n	8004396 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004368:	0021      	movs	r1, r4
 800436a:	187b      	adds	r3, r7, r1
 800436c:	7a9b      	ldrb	r3, [r3, #10]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	227e      	movs	r2, #126	; 0x7e
 8004372:	4013      	ands	r3, r2
 8004374:	187a      	adds	r2, r7, r1
 8004376:	7ad2      	ldrb	r2, [r2, #11]
 8004378:	09d2      	lsrs	r2, r2, #7
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	189b      	adds	r3, r3, r2
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	187b      	adds	r3, r7, r1
 8004382:	7b5b      	ldrb	r3, [r3, #13]
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	409a      	lsls	r2, r3
 800438c:	0013      	movs	r3, r2
 800438e:	001a      	movs	r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	e018      	b.n	80043c8 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004396:	210c      	movs	r1, #12
 8004398:	187b      	adds	r3, r7, r1
 800439a:	7a9b      	ldrb	r3, [r3, #10]
 800439c:	109b      	asrs	r3, r3, #2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	001a      	movs	r2, r3
 80043a2:	231f      	movs	r3, #31
 80043a4:	4013      	ands	r3, r2
 80043a6:	3301      	adds	r3, #1
 80043a8:	0008      	movs	r0, r1
 80043aa:	187a      	adds	r2, r7, r1
 80043ac:	7ad2      	ldrb	r2, [r2, #11]
 80043ae:	00d2      	lsls	r2, r2, #3
 80043b0:	2118      	movs	r1, #24
 80043b2:	400a      	ands	r2, r1
 80043b4:	1839      	adds	r1, r7, r0
 80043b6:	7ac9      	ldrb	r1, [r1, #11]
 80043b8:	0949      	lsrs	r1, r1, #5
 80043ba:	b2c9      	uxtb	r1, r1
 80043bc:	1852      	adds	r2, r2, r1
 80043be:	3201      	adds	r2, #1
 80043c0:	4353      	muls	r3, r2
 80043c2:	001a      	movs	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80043c8:	232f      	movs	r3, #47	; 0x2f
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
		break;
 80043d0:	e057      	b.n	8004482 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <USER_SPI_ioctl+0x320>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	001a      	movs	r2, r3
 80043d8:	2306      	movs	r3, #6
 80043da:	4013      	ands	r3, r2
 80043dc:	d053      	beq.n	8004486 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80043de:	240c      	movs	r4, #12
 80043e0:	193a      	adds	r2, r7, r4
 80043e2:	1dfb      	adds	r3, r7, #7
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	210b      	movs	r1, #11
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7ff fecf 	bl	800418c <USER_SPI_ioctl>
 80043ee:	1e03      	subs	r3, r0, #0
 80043f0:	d14b      	bne.n	800448a <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80043f2:	193b      	adds	r3, r7, r4
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <USER_SPI_ioctl+0x27e>
 80043fe:	193b      	adds	r3, r7, r4
 8004400:	7a9b      	ldrb	r3, [r3, #10]
 8004402:	001a      	movs	r2, r3
 8004404:	2340      	movs	r3, #64	; 0x40
 8004406:	4013      	ands	r3, r2
 8004408:	d041      	beq.n	800448e <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <USER_SPI_ioctl+0x320>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	001a      	movs	r2, r3
 8004420:	2308      	movs	r3, #8
 8004422:	4013      	ands	r3, r2
 8004424:	d105      	bne.n	8004432 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	025b      	lsls	r3, r3, #9
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	025b      	lsls	r3, r3, #9
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	0019      	movs	r1, r3
 8004436:	2020      	movs	r0, #32
 8004438:	f7ff fc00 	bl	8003c3c <send_cmd>
 800443c:	1e03      	subs	r3, r0, #0
 800443e:	d128      	bne.n	8004492 <USER_SPI_ioctl+0x306>
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	0019      	movs	r1, r3
 8004444:	2021      	movs	r0, #33	; 0x21
 8004446:	f7ff fbf9 	bl	8003c3c <send_cmd>
 800444a:	1e03      	subs	r3, r0, #0
 800444c:	d121      	bne.n	8004492 <USER_SPI_ioctl+0x306>
 800444e:	2100      	movs	r1, #0
 8004450:	2026      	movs	r0, #38	; 0x26
 8004452:	f7ff fbf3 	bl	8003c3c <send_cmd>
 8004456:	1e03      	subs	r3, r0, #0
 8004458:	d11b      	bne.n	8004492 <USER_SPI_ioctl+0x306>
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <USER_SPI_ioctl+0x324>)
 800445c:	0018      	movs	r0, r3
 800445e:	f7ff fb30 	bl	8003ac2 <wait_ready>
 8004462:	1e03      	subs	r3, r0, #0
 8004464:	d015      	beq.n	8004492 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004466:	232f      	movs	r3, #47	; 0x2f
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800446e:	e010      	b.n	8004492 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8004470:	232f      	movs	r3, #47	; 0x2f
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2204      	movs	r2, #4
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e00c      	b.n	8004494 <USER_SPI_ioctl+0x308>
		break;
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	e00a      	b.n	8004494 <USER_SPI_ioctl+0x308>
		break;
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	e008      	b.n	8004494 <USER_SPI_ioctl+0x308>
		break;
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	e006      	b.n	8004494 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	e004      	b.n	8004494 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	e002      	b.n	8004494 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	e000      	b.n	8004494 <USER_SPI_ioctl+0x308>
		break;
 8004492:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8004494:	f7ff fb3d 	bl	8003b12 <despiselect>

	return res;
 8004498:	232f      	movs	r3, #47	; 0x2f
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	781b      	ldrb	r3, [r3, #0]
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b00d      	add	sp, #52	; 0x34
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	20000030 	.word	0x20000030
 80044ac:	200001b4 	.word	0x200001b4
 80044b0:	00007530 	.word	0x00007530

080044b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80044c2:	2417      	movs	r4, #23
 80044c4:	193b      	adds	r3, r7, r4
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80044ca:	2016      	movs	r0, #22
 80044cc:	183b      	adds	r3, r7, r0
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 80044d2:	4b21      	ldr	r3, [pc, #132]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 80044d4:	7a5b      	ldrb	r3, [r3, #9]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d836      	bhi.n	800454a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80044dc:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 80044de:	7a5b      	ldrb	r3, [r3, #9]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	001a      	movs	r2, r3
 80044e4:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 80044e6:	2100      	movs	r1, #0
 80044e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80044ea:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 80044ec:	7a5b      	ldrb	r3, [r3, #9]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	3304      	adds	r3, #4
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 80044fe:	7a5b      	ldrb	r3, [r3, #9]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	001a      	movs	r2, r3
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 8004506:	189b      	adds	r3, r3, r2
 8004508:	1dfa      	adds	r2, r7, #7
 800450a:	7812      	ldrb	r2, [r2, #0]
 800450c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 8004510:	7a5b      	ldrb	r3, [r3, #9]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	b2d1      	uxtb	r1, r2
 8004518:	4a0f      	ldr	r2, [pc, #60]	; (8004558 <FATFS_LinkDriverEx+0xa4>)
 800451a:	7251      	strb	r1, [r2, #9]
 800451c:	183a      	adds	r2, r7, r0
 800451e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8004520:	183b      	adds	r3, r7, r0
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	3330      	adds	r3, #48	; 0x30
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3301      	adds	r3, #1
 8004530:	223a      	movs	r2, #58	; 0x3a
 8004532:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3302      	adds	r3, #2
 8004538:	222f      	movs	r2, #47	; 0x2f
 800453a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3303      	adds	r3, #3
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004544:	193b      	adds	r3, r7, r4
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800454a:	2317      	movs	r3, #23
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	781b      	ldrb	r3, [r3, #0]
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b007      	add	sp, #28
 8004556:	bd90      	pop	{r4, r7, pc}
 8004558:	200001c0 	.word	0x200001c0

0800455c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff ffa1 	bl	80044b4 <FATFS_LinkDriverEx>
 8004572:	0003      	movs	r3, r0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	2600      	movs	r6, #0
 8004580:	4d0c      	ldr	r5, [pc, #48]	; (80045b4 <__libc_init_array+0x38>)
 8004582:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004584:	1b64      	subs	r4, r4, r5
 8004586:	10a4      	asrs	r4, r4, #2
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	2600      	movs	r6, #0
 800458e:	f000 f821 	bl	80045d4 <_init>
 8004592:	4d0a      	ldr	r5, [pc, #40]	; (80045bc <__libc_init_array+0x40>)
 8004594:	4c0a      	ldr	r4, [pc, #40]	; (80045c0 <__libc_init_array+0x44>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	00b3      	lsls	r3, r6, #2
 80045a2:	58eb      	ldr	r3, [r5, r3]
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	00b3      	lsls	r3, r6, #2
 80045ac:	58eb      	ldr	r3, [r5, r3]
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	08004624 	.word	0x08004624
 80045b8:	08004624 	.word	0x08004624
 80045bc:	08004624 	.word	0x08004624
 80045c0:	08004628 	.word	0x08004628

080045c4 <memset>:
 80045c4:	0003      	movs	r3, r0
 80045c6:	1882      	adds	r2, r0, r2
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d100      	bne.n	80045ce <memset+0xa>
 80045cc:	4770      	bx	lr
 80045ce:	7019      	strb	r1, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	e7f9      	b.n	80045c8 <memset+0x4>

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
