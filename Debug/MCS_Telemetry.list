
MCS_Telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c8  080035c8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080035c8  080035c8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c8  080035c8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080035d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000024  080035f4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080035f4  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afe6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204c  00000000  00000000  0002b032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197a5  00000000  00000000  0002e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df3e  00000000  00000000  00047a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c636  00000000  00000000  0005597b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1fb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa0  00000000  00000000  000e2004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003578 	.word	0x08003578

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08003578 	.word	0x08003578

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 f999 	bl	8003568 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000236:	4b2e      	ldr	r3, [pc, #184]	; (80002f0 <MX_GPIO_Init+0xd0>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <MX_GPIO_Init+0xd0>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	03c9      	lsls	r1, r1, #15
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b2a      	ldr	r3, [pc, #168]	; (80002f0 <MX_GPIO_Init+0xd0>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	03db      	lsls	r3, r3, #15
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	4b27      	ldr	r3, [pc, #156]	; (80002f0 <MX_GPIO_Init+0xd0>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <MX_GPIO_Init+0xd0>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	0289      	lsls	r1, r1, #10
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <MX_GPIO_Init+0xd0>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	029b      	lsls	r3, r3, #10
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <MX_GPIO_Init+0xd0>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <MX_GPIO_Init+0xd0>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	02c9      	lsls	r1, r1, #11
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b1c      	ldr	r3, [pc, #112]	; (80002f0 <MX_GPIO_Init+0xd0>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	02db      	lsls	r3, r3, #11
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCB_LED_GREEN_Pin|PCB_LED_RED_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 800028a:	2304      	movs	r3, #4
 800028c:	33ff      	adds	r3, #255	; 0xff
 800028e:	0019      	movs	r1, r3
 8000290:	2390      	movs	r3, #144	; 0x90
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	2200      	movs	r2, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fd22 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PCB_LED_GREEN_Pin|PCB_LED_RED_Pin|SD_CS_Pin;
 800029c:	193b      	adds	r3, r7, r4
 800029e:	2204      	movs	r2, #4
 80002a0:	32ff      	adds	r2, #255	; 0xff
 80002a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2201      	movs	r2, #1
 80002a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b6:	193a      	adds	r2, r7, r4
 80002b8:	2390      	movs	r3, #144	; 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	0011      	movs	r1, r2
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 fba6 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_A_SIGNAL_Pin;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0152      	lsls	r2, r2, #5
 80002cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_A_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <MX_GPIO_Init+0xd4>)
 80002de:	0019      	movs	r1, r3
 80002e0:	0010      	movs	r0, r2
 80002e2:	f000 fb95 	bl	8000a10 <HAL_GPIO_Init>

}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b009      	add	sp, #36	; 0x24
 80002ec:	bd90      	pop	{r4, r7, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	40021000 	.word	0x40021000
 80002f4:	48000400 	.word	0x48000400

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 fa70 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f80b 	bl	800031a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f7ff ff8c 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000308:	f000 f864 	bl	80003d4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800030c:	f000 f8a0 	bl	8000450 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000310:	f000 f9a6 	bl	8000660 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000314:	f002 fab2 	bl	800287c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000318:	e7fe      	b.n	8000318 <main+0x20>

0800031a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031a:	b590      	push	{r4, r7, lr}
 800031c:	b099      	sub	sp, #100	; 0x64
 800031e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000320:	242c      	movs	r4, #44	; 0x2c
 8000322:	193b      	adds	r3, r7, r4
 8000324:	0018      	movs	r0, r3
 8000326:	2334      	movs	r3, #52	; 0x34
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f003 f91c 	bl	8003568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	231c      	movs	r3, #28
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	0018      	movs	r0, r3
 8000336:	2310      	movs	r3, #16
 8000338:	001a      	movs	r2, r3
 800033a:	2100      	movs	r1, #0
 800033c:	f003 f914 	bl	8003568 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	0018      	movs	r0, r3
 8000344:	2318      	movs	r3, #24
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f003 f90d 	bl	8003568 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034e:	0021      	movs	r1, r4
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2202      	movs	r2, #2
 8000354:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2201      	movs	r2, #1
 800035a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2210      	movs	r2, #16
 8000360:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	187b      	adds	r3, r7, r1
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fcd6 	bl	8000d1c <HAL_RCC_OscConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000374:	f000 f828 	bl	80003c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000378:	211c      	movs	r1, #28
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2207      	movs	r2, #7
 800037e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2100      	movs	r1, #0
 8000396:	0018      	movs	r0, r3
 8000398:	f001 f846 	bl	8001428 <HAL_RCC_ClockConfig>
 800039c:	1e03      	subs	r3, r0, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003a0:	f000 f812 	bl	80003c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2201      	movs	r2, #1
 80003a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 f9a6 	bl	8001704 <HAL_RCCEx_PeriphCLKConfig>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003bc:	f000 f804 	bl	80003c8 <Error_Handler>
  }
}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b019      	add	sp, #100	; 0x64
 80003c6:	bd90      	pop	{r4, r7, pc}

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x8>
	...

080003d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_SPI1_Init+0x74>)
 80003da:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_SPI1_Init+0x78>)
 80003dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_SPI1_Init+0x74>)
 80003e0:	2282      	movs	r2, #130	; 0x82
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <MX_SPI1_Init+0x74>)
 80003ee:	22c0      	movs	r2, #192	; 0xc0
 80003f0:	0092      	lsls	r2, r2, #2
 80003f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_SPI1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_SPI1_Init+0x74>)
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	0092      	lsls	r2, r2, #2
 8000406:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_SPI1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_SPI1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_SPI1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_SPI1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_SPI1_Init+0x74>)
 8000422:	2207      	movs	r2, #7
 8000424:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_SPI1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_SPI1_Init+0x74>)
 800042e:	2208      	movs	r2, #8
 8000430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_SPI1_Init+0x74>)
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fa53 	bl	80018e0 <HAL_SPI_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800043e:	f7ff ffc3 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000040 	.word	0x20000040
 800044c:	40013000 	.word	0x40013000

08000450 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_SPI2_Init+0x74>)
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <MX_SPI2_Init+0x78>)
 8000458:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_SPI2_Init+0x74>)
 800045c:	2282      	movs	r2, #130	; 0x82
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_SPI2_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_SPI2_Init+0x74>)
 800046a:	22e0      	movs	r2, #224	; 0xe0
 800046c:	00d2      	lsls	r2, r2, #3
 800046e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_SPI2_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_SPI2_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_SPI2_Init+0x74>)
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_SPI2_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_SPI2_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_SPI2_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_SPI2_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_SPI2_Init+0x74>)
 800049e:	2207      	movs	r2, #7
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_SPI2_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_SPI2_Init+0x74>)
 80004aa:	2208      	movs	r2, #8
 80004ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <MX_SPI2_Init+0x74>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fa15 	bl	80018e0 <HAL_SPI_Init>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004ba:	f7ff ff85 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000a4 	.word	0x200000a4
 80004c8:	40003800 	.word	0x40003800

080004cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b08d      	sub	sp, #52	; 0x34
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	241c      	movs	r4, #28
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f003 f842 	bl	8003568 <memset>
  if(spiHandle->Instance==SPI1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a39      	ldr	r2, [pc, #228]	; (80005d0 <HAL_SPI_MspInit+0x104>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d133      	bne.n	8000556 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 80004f0:	699a      	ldr	r2, [r3, #24]
 80004f2:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0149      	lsls	r1, r1, #5
 80004f8:	430a      	orrs	r2, r1
 80004fa:	619a      	str	r2, [r3, #24]
 80004fc:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	015b      	lsls	r3, r3, #5
 8000504:	4013      	ands	r3, r2
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0289      	lsls	r1, r1, #10
 8000514:	430a      	orrs	r2, r1
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	029b      	lsls	r3, r3, #10
 8000520:	4013      	ands	r3, r2
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000526:	0021      	movs	r1, r4
 8000528:	187b      	adds	r3, r7, r1
 800052a:	22e0      	movs	r2, #224	; 0xe0
 800052c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2202      	movs	r2, #2
 8000532:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2203      	movs	r2, #3
 800053e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	187a      	adds	r2, r7, r1
 8000548:	2390      	movs	r3, #144	; 0x90
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fa5e 	bl	8000a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000554:	e037      	b.n	80005c6 <HAL_SPI_MspInit+0xfa>
  else if(spiHandle->Instance==SPI2)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a1f      	ldr	r2, [pc, #124]	; (80005d8 <HAL_SPI_MspInit+0x10c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d132      	bne.n	80005c6 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	01c9      	lsls	r1, r1, #7
 800056a:	430a      	orrs	r2, r1
 800056c:	61da      	str	r2, [r3, #28]
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	01db      	lsls	r3, r3, #7
 8000576:	4013      	ands	r3, r2
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 800057e:	695a      	ldr	r2, [r3, #20]
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	02c9      	lsls	r1, r1, #11
 8000586:	430a      	orrs	r2, r1
 8000588:	615a      	str	r2, [r3, #20]
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_SPI_MspInit+0x108>)
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	02db      	lsls	r3, r3, #11
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000598:	211c      	movs	r1, #28
 800059a:	187b      	adds	r3, r7, r1
 800059c:	22e0      	movs	r2, #224	; 0xe0
 800059e:	0212      	lsls	r2, r2, #8
 80005a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2202      	movs	r2, #2
 80005a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2203      	movs	r2, #3
 80005b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_SPI_MspInit+0x110>)
 80005be:	0019      	movs	r1, r3
 80005c0:	0010      	movs	r0, r2
 80005c2:	f000 fa25 	bl	8000a10 <HAL_GPIO_Init>
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b00d      	add	sp, #52	; 0x34
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40013000 	.word	0x40013000
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40003800 	.word	0x40003800
 80005dc:	48000400 	.word	0x48000400

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x44>)
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_MspInit+0x44>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	619a      	str	r2, [r3, #24]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x44>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_MspInit+0x44>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0549      	lsls	r1, r1, #21
 8000608:	430a      	orrs	r2, r1
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_MspInit+0x44>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	055b      	lsls	r3, r3, #21
 8000614:	4013      	ands	r3, r2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f910 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART1_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800066c:	2296      	movs	r2, #150	; 0x96
 800066e:	0212      	lsls	r2, r2, #8
 8000670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fd2b 	bl	8002100 <HAL_UART_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f7ff fe8b 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000108 	.word	0x20000108
 80006bc:	40013800 	.word	0x40013800

080006c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	2414      	movs	r4, #20
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f002 ff48 	bl	8003568 <memset>
  if(uartHandle->Instance==USART1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d131      	bne.n	8000746 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_UART_MspInit+0x94>)
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_UART_MspInit+0x94>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	01c9      	lsls	r1, r1, #7
 80006ec:	430a      	orrs	r2, r1
 80006ee:	619a      	str	r2, [r3, #24]
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_UART_MspInit+0x94>)
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	01db      	lsls	r3, r3, #7
 80006f8:	4013      	ands	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_UART_MspInit+0x94>)
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_UART_MspInit+0x94>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	02c9      	lsls	r1, r1, #11
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_UART_MspInit+0x94>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	02db      	lsls	r3, r3, #11
 8000714:	4013      	ands	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800071a:	0021      	movs	r1, r4
 800071c:	187b      	adds	r3, r7, r1
 800071e:	22c0      	movs	r2, #192	; 0xc0
 8000720:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2202      	movs	r2, #2
 8000726:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2203      	movs	r2, #3
 8000732:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	187b      	adds	r3, r7, r1
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_UART_MspInit+0x98>)
 800073e:	0019      	movs	r1, r3
 8000740:	0010      	movs	r0, r2
 8000742:	f000 f965 	bl	8000a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b00b      	add	sp, #44	; 0x2c
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000762:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000764:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <LoopForever+0xa>)
    CMP R1, R2
 8000768:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800076a:	d105      	bne.n	8000778 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800076e:	4913      	ldr	r1, [pc, #76]	; (80007bc <LoopForever+0x12>)
    STR R1, [R0]
 8000770:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000772:	4813      	ldr	r0, [pc, #76]	; (80007c0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000774:	4913      	ldr	r1, [pc, #76]	; (80007c4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000776:	6001      	str	r1, [r0, #0]

08000778 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800077a:	4914      	ldr	r1, [pc, #80]	; (80007cc <LoopForever+0x22>)
  ldr r2, =_sidata
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <LoopForever+0x26>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000790:	4c11      	ldr	r4, [pc, #68]	; (80007d8 <LoopForever+0x2e>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800079e:	f7ff ff5a 	bl	8000656 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007a2:	f002 febd 	bl	8003520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fda7 	bl	80002f8 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80007b0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80007b4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80007b8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80007bc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80007c0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80007c4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80007d0:	080035d0 	.word	0x080035d0
  ldr r2, =_sbss
 80007d4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80007d8:	200001b4 	.word	0x200001b4

080007dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_IRQHandler>
	...

080007e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <HAL_Init+0x24>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_Init+0x24>)
 80007ea:	2110      	movs	r1, #16
 80007ec:	430a      	orrs	r2, r1
 80007ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f809 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f6:	f7ff fef3 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_InitTick+0x5c>)
 8000812:	681c      	ldr	r4, [r3, #0]
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_InitTick+0x60>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	0019      	movs	r1, r3
 800081a:	23fa      	movs	r3, #250	; 0xfa
 800081c:	0098      	lsls	r0, r3, #2
 800081e:	f7ff fc73 	bl	8000108 <__udivsi3>
 8000822:	0003      	movs	r3, r0
 8000824:	0019      	movs	r1, r3
 8000826:	0020      	movs	r0, r4
 8000828:	f7ff fc6e 	bl	8000108 <__udivsi3>
 800082c:	0003      	movs	r3, r0
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f8e1 	bl	80009f6 <HAL_SYSTICK_Config>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e00f      	b.n	800085c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b03      	cmp	r3, #3
 8000840:	d80b      	bhi.n	800085a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	2200      	movs	r2, #0
 800084a:	0018      	movs	r0, r3
 800084c:	f000 f8be 	bl	80009cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_InitTick+0x64>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b003      	add	sp, #12
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000008 	.word	0x20000008
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	18d2      	adds	r2, r2, r3
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000008 	.word	0x20000008
 8000890:	20000190 	.word	0x20000190

08000894 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000190 	.word	0x20000190

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b7f      	cmp	r3, #127	; 0x7f
 80008bc:	d828      	bhi.n	8000910 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <__NVIC_SetPriority+0xd4>)
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	33c0      	adds	r3, #192	; 0xc0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	589b      	ldr	r3, [r3, r2]
 80008ce:	1dfa      	adds	r2, r7, #7
 80008d0:	7812      	ldrb	r2, [r2, #0]
 80008d2:	0011      	movs	r1, r2
 80008d4:	2203      	movs	r2, #3
 80008d6:	400a      	ands	r2, r1
 80008d8:	00d2      	lsls	r2, r2, #3
 80008da:	21ff      	movs	r1, #255	; 0xff
 80008dc:	4091      	lsls	r1, r2
 80008de:	000a      	movs	r2, r1
 80008e0:	43d2      	mvns	r2, r2
 80008e2:	401a      	ands	r2, r3
 80008e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	019b      	lsls	r3, r3, #6
 80008ea:	22ff      	movs	r2, #255	; 0xff
 80008ec:	401a      	ands	r2, r3
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	0018      	movs	r0, r3
 80008f4:	2303      	movs	r3, #3
 80008f6:	4003      	ands	r3, r0
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fc:	481f      	ldr	r0, [pc, #124]	; (800097c <__NVIC_SetPriority+0xd4>)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	089b      	lsrs	r3, r3, #2
 8000906:	430a      	orrs	r2, r1
 8000908:	33c0      	adds	r3, #192	; 0xc0
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800090e:	e031      	b.n	8000974 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <__NVIC_SetPriority+0xd8>)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0019      	movs	r1, r3
 8000918:	230f      	movs	r3, #15
 800091a:	400b      	ands	r3, r1
 800091c:	3b08      	subs	r3, #8
 800091e:	089b      	lsrs	r3, r3, #2
 8000920:	3306      	adds	r3, #6
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	18d3      	adds	r3, r2, r3
 8000926:	3304      	adds	r3, #4
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	1dfa      	adds	r2, r7, #7
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	0011      	movs	r1, r2
 8000930:	2203      	movs	r2, #3
 8000932:	400a      	ands	r2, r1
 8000934:	00d2      	lsls	r2, r2, #3
 8000936:	21ff      	movs	r1, #255	; 0xff
 8000938:	4091      	lsls	r1, r2
 800093a:	000a      	movs	r2, r1
 800093c:	43d2      	mvns	r2, r2
 800093e:	401a      	ands	r2, r3
 8000940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	019b      	lsls	r3, r3, #6
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	401a      	ands	r2, r3
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	0018      	movs	r0, r3
 8000950:	2303      	movs	r3, #3
 8000952:	4003      	ands	r3, r0
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <__NVIC_SetPriority+0xd8>)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	001c      	movs	r4, r3
 8000960:	230f      	movs	r3, #15
 8000962:	4023      	ands	r3, r4
 8000964:	3b08      	subs	r3, #8
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	430a      	orrs	r2, r1
 800096a:	3306      	adds	r3, #6
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	18c3      	adds	r3, r0, r3
 8000970:	3304      	adds	r3, #4
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b003      	add	sp, #12
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	1e5a      	subs	r2, r3, #1
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	045b      	lsls	r3, r3, #17
 8000994:	429a      	cmp	r2, r3
 8000996:	d301      	bcc.n	800099c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000998:	2301      	movs	r3, #1
 800099a:	e010      	b.n	80009be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <SysTick_Config+0x44>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	3a01      	subs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a4:	2301      	movs	r3, #1
 80009a6:	425b      	negs	r3, r3
 80009a8:	2103      	movs	r1, #3
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff ff7c 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x44>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x44>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	0018      	movs	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	210f      	movs	r1, #15
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	1c02      	adds	r2, r0, #0
 80009dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ff5d 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b004      	add	sp, #16
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ffbf 	bl	8000984 <SysTick_Config>
 8000a06:	0003      	movs	r3, r0
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e149      	b.n	8000cb4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <HAL_GPIO_Init+0x28>
 8000a36:	e13a      	b.n	8000cae <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d005      	beq.n	8000a50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2203      	movs	r2, #3
 8000a4a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d130      	bne.n	8000ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	0013      	movs	r3, r2
 8000a60:	43da      	mvns	r2, r3
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	409a      	lsls	r2, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a86:	2201      	movs	r2, #1
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	091b      	lsrs	r3, r3, #4
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d017      	beq.n	8000aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2203      	movs	r2, #3
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d123      	bne.n	8000b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	08da      	lsrs	r2, r3, #3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3208      	adds	r2, #8
 8000b02:	0092      	lsls	r2, r2, #2
 8000b04:	58d3      	ldr	r3, [r2, r3]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	2207      	movs	r2, #7
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	220f      	movs	r2, #15
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	691a      	ldr	r2, [r3, #16]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	2107      	movs	r1, #7
 8000b26:	400b      	ands	r3, r1
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	6939      	ldr	r1, [r7, #16]
 8000b40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	43da      	mvns	r2, r3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2203      	movs	r2, #3
 8000b60:	401a      	ands	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	23c0      	movs	r3, #192	; 0xc0
 8000b7c:	029b      	lsls	r3, r3, #10
 8000b7e:	4013      	ands	r3, r2
 8000b80:	d100      	bne.n	8000b84 <HAL_GPIO_Init+0x174>
 8000b82:	e094      	b.n	8000cae <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	4b51      	ldr	r3, [pc, #324]	; (8000ccc <HAL_GPIO_Init+0x2bc>)
 8000b86:	699a      	ldr	r2, [r3, #24]
 8000b88:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <HAL_GPIO_Init+0x2bc>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	619a      	str	r2, [r3, #24]
 8000b90:	4b4e      	ldr	r3, [pc, #312]	; (8000ccc <HAL_GPIO_Init+0x2bc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	2201      	movs	r2, #1
 8000b96:	4013      	ands	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	; (8000cd0 <HAL_GPIO_Init+0x2c0>)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	589b      	ldr	r3, [r3, r2]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	2203      	movs	r2, #3
 8000bae:	4013      	ands	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	2390      	movs	r3, #144	; 0x90
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d00d      	beq.n	8000be6 <HAL_GPIO_Init+0x1d6>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a41      	ldr	r2, [pc, #260]	; (8000cd4 <HAL_GPIO_Init+0x2c4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d007      	beq.n	8000be2 <HAL_GPIO_Init+0x1d2>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_GPIO_Init+0x2c8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_GPIO_Init+0x1ce>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e004      	b.n	8000be8 <HAL_GPIO_Init+0x1d8>
 8000bde:	2305      	movs	r3, #5
 8000be0:	e002      	b.n	8000be8 <HAL_GPIO_Init+0x1d8>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <HAL_GPIO_Init+0x1d8>
 8000be6:	2300      	movs	r3, #0
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	2103      	movs	r1, #3
 8000bec:	400a      	ands	r2, r1
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	4093      	lsls	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bf8:	4935      	ldr	r1, [pc, #212]	; (8000cd0 <HAL_GPIO_Init+0x2c0>)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	3302      	adds	r3, #2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	035b      	lsls	r3, r3, #13
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c30:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	039b      	lsls	r3, r3, #14
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	43da      	mvns	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	029b      	lsls	r3, r3, #10
 8000c72:	4013      	ands	r3, r2
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	025b      	lsls	r3, r3, #9
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	40da      	lsrs	r2, r3
 8000cbc:	1e13      	subs	r3, r2, #0
 8000cbe:	d000      	beq.n	8000cc2 <HAL_GPIO_Init+0x2b2>
 8000cc0:	e6ae      	b.n	8000a20 <HAL_GPIO_Init+0x10>
  } 
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b006      	add	sp, #24
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	48000400 	.word	0x48000400
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	0008      	movs	r0, r1
 8000cea:	0011      	movs	r1, r2
 8000cec:	1cbb      	adds	r3, r7, #2
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	801a      	strh	r2, [r3, #0]
 8000cf2:	1c7b      	adds	r3, r7, #1
 8000cf4:	1c0a      	adds	r2, r1, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf8:	1c7b      	adds	r3, r7, #1
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d00:	1cbb      	adds	r3, r7, #2
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d08:	e003      	b.n	8000d12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d0a:	1cbb      	adds	r3, r7, #2
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f000 fb76 	bl	800141c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2201      	movs	r2, #1
 8000d36:	4013      	ands	r3, r2
 8000d38:	d100      	bne.n	8000d3c <HAL_RCC_OscConfig+0x20>
 8000d3a:	e08e      	b.n	8000e5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d3c:	4bc5      	ldr	r3, [pc, #788]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	220c      	movs	r2, #12
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d00e      	beq.n	8000d66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d48:	4bc2      	ldr	r3, [pc, #776]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	220c      	movs	r2, #12
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d117      	bne.n	8000d84 <HAL_RCC_OscConfig+0x68>
 8000d54:	4bbf      	ldr	r3, [pc, #764]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	23c0      	movs	r3, #192	; 0xc0
 8000d5a:	025b      	lsls	r3, r3, #9
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	025b      	lsls	r3, r3, #9
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d10e      	bne.n	8000d84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d66:	4bbb      	ldr	r3, [pc, #748]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	029b      	lsls	r3, r3, #10
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d100      	bne.n	8000d74 <HAL_RCC_OscConfig+0x58>
 8000d72:	e071      	b.n	8000e58 <HAL_RCC_OscConfig+0x13c>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d000      	beq.n	8000d7e <HAL_RCC_OscConfig+0x62>
 8000d7c:	e06c      	b.n	8000e58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f000 fb4c 	bl	800141c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d107      	bne.n	8000d9c <HAL_RCC_OscConfig+0x80>
 8000d8c:	4bb1      	ldr	r3, [pc, #708]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4bb0      	ldr	r3, [pc, #704]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	0249      	lsls	r1, r1, #9
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e02f      	b.n	8000dfc <HAL_RCC_OscConfig+0xe0>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10c      	bne.n	8000dbe <HAL_RCC_OscConfig+0xa2>
 8000da4:	4bab      	ldr	r3, [pc, #684]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4baa      	ldr	r3, [pc, #680]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000daa:	49ab      	ldr	r1, [pc, #684]	; (8001058 <HAL_RCC_OscConfig+0x33c>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	4ba8      	ldr	r3, [pc, #672]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4ba7      	ldr	r3, [pc, #668]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000db6:	49a9      	ldr	r1, [pc, #676]	; (800105c <HAL_RCC_OscConfig+0x340>)
 8000db8:	400a      	ands	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e01e      	b.n	8000dfc <HAL_RCC_OscConfig+0xe0>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d10e      	bne.n	8000de4 <HAL_RCC_OscConfig+0xc8>
 8000dc6:	4ba3      	ldr	r3, [pc, #652]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4ba2      	ldr	r3, [pc, #648]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	02c9      	lsls	r1, r1, #11
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	4b9f      	ldr	r3, [pc, #636]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b9e      	ldr	r3, [pc, #632]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	0249      	lsls	r1, r1, #9
 8000dde:	430a      	orrs	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e00b      	b.n	8000dfc <HAL_RCC_OscConfig+0xe0>
 8000de4:	4b9b      	ldr	r3, [pc, #620]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b9a      	ldr	r3, [pc, #616]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000dea:	499b      	ldr	r1, [pc, #620]	; (8001058 <HAL_RCC_OscConfig+0x33c>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	4b98      	ldr	r3, [pc, #608]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b97      	ldr	r3, [pc, #604]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000df6:	4999      	ldr	r1, [pc, #612]	; (800105c <HAL_RCC_OscConfig+0x340>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d014      	beq.n	8000e2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fd46 	bl	8000894 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0e:	f7ff fd41 	bl	8000894 <HAL_GetTick>
 8000e12:	0002      	movs	r2, r0
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b64      	cmp	r3, #100	; 0x64
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e2fd      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e20:	4b8c      	ldr	r3, [pc, #560]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0xf2>
 8000e2c:	e015      	b.n	8000e5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fd31 	bl	8000894 <HAL_GetTick>
 8000e32:	0003      	movs	r3, r0
 8000e34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fd2c 	bl	8000894 <HAL_GetTick>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e2e8      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4a:	4b82      	ldr	r3, [pc, #520]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x11c>
 8000e56:	e000      	b.n	8000e5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	4013      	ands	r3, r2
 8000e62:	d100      	bne.n	8000e66 <HAL_RCC_OscConfig+0x14a>
 8000e64:	e06c      	b.n	8000f40 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e66:	4b7b      	ldr	r3, [pc, #492]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d00e      	beq.n	8000e8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e70:	4b78      	ldr	r3, [pc, #480]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	220c      	movs	r2, #12
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d11f      	bne.n	8000ebc <HAL_RCC_OscConfig+0x1a0>
 8000e7c:	4b75      	ldr	r3, [pc, #468]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	23c0      	movs	r3, #192	; 0xc0
 8000e82:	025b      	lsls	r3, r3, #9
 8000e84:	401a      	ands	r2, r3
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d116      	bne.n	8000ebc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	4b71      	ldr	r3, [pc, #452]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2202      	movs	r2, #2
 8000e94:	4013      	ands	r3, r2
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x188>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d001      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e2bb      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea4:	4b6b      	ldr	r3, [pc, #428]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	22f8      	movs	r2, #248	; 0xf8
 8000eaa:	4393      	bics	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	00da      	lsls	r2, r3, #3
 8000eb4:	4b67      	ldr	r3, [pc, #412]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	e041      	b.n	8000f40 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d024      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec4:	4b63      	ldr	r3, [pc, #396]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b62      	ldr	r3, [pc, #392]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fce0 	bl	8000894 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eda:	f7ff fcdb 	bl	8000894 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e297      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	4b59      	ldr	r3, [pc, #356]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d0f1      	beq.n	8000eda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef6:	4b57      	ldr	r3, [pc, #348]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	22f8      	movs	r2, #248	; 0xf8
 8000efc:	4393      	bics	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	00da      	lsls	r2, r3, #3
 8000f06:	4b53      	ldr	r3, [pc, #332]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e018      	b.n	8000f40 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b50      	ldr	r3, [pc, #320]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	438a      	bics	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fcbb 	bl	8000894 <HAL_GetTick>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f24:	f7ff fcb6 	bl	8000894 <HAL_GetTick>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e272      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	4b47      	ldr	r3, [pc, #284]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d1f1      	bne.n	8000f24 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2208      	movs	r2, #8
 8000f46:	4013      	ands	r3, r2
 8000f48:	d036      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d019      	beq.n	8000f86 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f56:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fc99 	bl	8000894 <HAL_GetTick>
 8000f62:	0003      	movs	r3, r0
 8000f64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc94 	bl	8000894 <HAL_GetTick>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e250      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d0f1      	beq.n	8000f68 <HAL_RCC_OscConfig+0x24c>
 8000f84:	e018      	b.n	8000fb8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8a:	4b32      	ldr	r3, [pc, #200]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	438a      	bics	r2, r1
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff fc7f 	bl	8000894 <HAL_GetTick>
 8000f96:	0003      	movs	r3, r0
 8000f98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc7a 	bl	8000894 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e236      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fae:	4b29      	ldr	r3, [pc, #164]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d1f1      	bne.n	8000f9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d100      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x2a8>
 8000fc2:	e0b5      	b.n	8001130 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc4:	201f      	movs	r0, #31
 8000fc6:	183b      	adds	r3, r7, r0
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000fce:	69da      	ldr	r2, [r3, #28]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	055b      	lsls	r3, r3, #21
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d110      	bne.n	8000ffa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0549      	lsls	r1, r1, #21
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	61da      	str	r2, [r3, #28]
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	055b      	lsls	r3, r3, #21
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ff4:	183b      	adds	r3, r7, r0
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_RCC_OscConfig+0x344>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4013      	ands	r3, r2
 8001004:	d11a      	bne.n	800103c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_RCC_OscConfig+0x344>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_RCC_OscConfig+0x344>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	0049      	lsls	r1, r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001014:	f7ff fc3e 	bl	8000894 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101e:	f7ff fc39 	bl	8000894 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e1f5      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_RCC_OscConfig+0x344>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4013      	ands	r3, r2
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10f      	bne.n	8001064 <HAL_RCC_OscConfig+0x348>
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <HAL_RCC_OscConfig+0x338>)
 800104a:	2101      	movs	r1, #1
 800104c:	430a      	orrs	r2, r1
 800104e:	621a      	str	r2, [r3, #32]
 8001050:	e036      	b.n	80010c0 <HAL_RCC_OscConfig+0x3a4>
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	40021000 	.word	0x40021000
 8001058:	fffeffff 	.word	0xfffeffff
 800105c:	fffbffff 	.word	0xfffbffff
 8001060:	40007000 	.word	0x40007000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0x36a>
 800106c:	4bca      	ldr	r3, [pc, #808]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	4bc9      	ldr	r3, [pc, #804]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001072:	2101      	movs	r1, #1
 8001074:	438a      	bics	r2, r1
 8001076:	621a      	str	r2, [r3, #32]
 8001078:	4bc7      	ldr	r3, [pc, #796]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	4bc6      	ldr	r3, [pc, #792]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800107e:	2104      	movs	r1, #4
 8001080:	438a      	bics	r2, r1
 8001082:	621a      	str	r2, [r3, #32]
 8001084:	e01c      	b.n	80010c0 <HAL_RCC_OscConfig+0x3a4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x38c>
 800108e:	4bc2      	ldr	r3, [pc, #776]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001090:	6a1a      	ldr	r2, [r3, #32]
 8001092:	4bc1      	ldr	r3, [pc, #772]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001094:	2104      	movs	r1, #4
 8001096:	430a      	orrs	r2, r1
 8001098:	621a      	str	r2, [r3, #32]
 800109a:	4bbf      	ldr	r3, [pc, #764]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800109c:	6a1a      	ldr	r2, [r3, #32]
 800109e:	4bbe      	ldr	r3, [pc, #760]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	621a      	str	r2, [r3, #32]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0x3a4>
 80010a8:	4bbb      	ldr	r3, [pc, #748]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80010aa:	6a1a      	ldr	r2, [r3, #32]
 80010ac:	4bba      	ldr	r3, [pc, #744]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	438a      	bics	r2, r1
 80010b2:	621a      	str	r2, [r3, #32]
 80010b4:	4bb8      	ldr	r3, [pc, #736]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80010b6:	6a1a      	ldr	r2, [r3, #32]
 80010b8:	4bb7      	ldr	r3, [pc, #732]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	438a      	bics	r2, r1
 80010be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d014      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fbe4 	bl	8000894 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d0:	e009      	b.n	80010e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f7ff fbdf 	bl	8000894 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	4aaf      	ldr	r2, [pc, #700]	; (800139c <HAL_RCC_OscConfig+0x680>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e19a      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e6:	4bac      	ldr	r3, [pc, #688]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	2202      	movs	r2, #2
 80010ec:	4013      	ands	r3, r2
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x3b6>
 80010f0:	e013      	b.n	800111a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fbcf 	bl	8000894 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010fa:	e009      	b.n	8001110 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fc:	f7ff fbca 	bl	8000894 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4aa5      	ldr	r2, [pc, #660]	; (800139c <HAL_RCC_OscConfig+0x680>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e185      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4ba1      	ldr	r3, [pc, #644]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	2202      	movs	r2, #2
 8001116:	4013      	ands	r3, r2
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800111a:	231f      	movs	r3, #31
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001124:	4b9c      	ldr	r3, [pc, #624]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001126:	69da      	ldr	r2, [r3, #28]
 8001128:	4b9b      	ldr	r3, [pc, #620]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800112a:	499d      	ldr	r1, [pc, #628]	; (80013a0 <HAL_RCC_OscConfig+0x684>)
 800112c:	400a      	ands	r2, r1
 800112e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2210      	movs	r2, #16
 8001136:	4013      	ands	r3, r2
 8001138:	d063      	beq.n	8001202 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d12a      	bne.n	8001198 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001142:	4b95      	ldr	r3, [pc, #596]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001146:	4b94      	ldr	r3, [pc, #592]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001148:	2104      	movs	r1, #4
 800114a:	430a      	orrs	r2, r1
 800114c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800114e:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001152:	4b91      	ldr	r3, [pc, #580]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001154:	2101      	movs	r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb9b 	bl	8000894 <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001164:	f7ff fb96 	bl	8000894 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e152      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d0f1      	beq.n	8001164 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001180:	4b85      	ldr	r3, [pc, #532]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	22f8      	movs	r2, #248	; 0xf8
 8001186:	4393      	bics	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	00da      	lsls	r2, r3, #3
 8001190:	4b81      	ldr	r3, [pc, #516]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001192:	430a      	orrs	r2, r1
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
 8001196:	e034      	b.n	8001202 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	3305      	adds	r3, #5
 800119e:	d111      	bne.n	80011c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011a0:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a4:	4b7c      	ldr	r3, [pc, #496]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011a6:	2104      	movs	r1, #4
 80011a8:	438a      	bics	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011ac:	4b7a      	ldr	r3, [pc, #488]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	22f8      	movs	r2, #248	; 0xf8
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	00da      	lsls	r2, r3, #3
 80011bc:	4b76      	ldr	r3, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011be:	430a      	orrs	r2, r1
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
 80011c2:	e01e      	b.n	8001202 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011c4:	4b74      	ldr	r3, [pc, #464]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c8:	4b73      	ldr	r3, [pc, #460]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	2104      	movs	r1, #4
 80011cc:	430a      	orrs	r2, r1
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011d0:	4b71      	ldr	r3, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d4:	4b70      	ldr	r3, [pc, #448]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	438a      	bics	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fb5a 	bl	8000894 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011e6:	f7ff fb55 	bl	8000894 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e111      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011f8:	4b67      	ldr	r3, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80011fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fc:	2202      	movs	r2, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d1f1      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2220      	movs	r2, #32
 8001208:	4013      	ands	r3, r2
 800120a:	d05c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800120c:	4b62      	ldr	r3, [pc, #392]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	220c      	movs	r2, #12
 8001212:	4013      	ands	r3, r2
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d00e      	beq.n	8001236 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001218:	4b5f      	ldr	r3, [pc, #380]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	220c      	movs	r2, #12
 800121e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001220:	2b08      	cmp	r3, #8
 8001222:	d114      	bne.n	800124e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001224:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	23c0      	movs	r3, #192	; 0xc0
 800122a:	025b      	lsls	r3, r3, #9
 800122c:	401a      	ands	r2, r3
 800122e:	23c0      	movs	r3, #192	; 0xc0
 8001230:	025b      	lsls	r3, r3, #9
 8001232:	429a      	cmp	r2, r3
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001236:	4b58      	ldr	r3, [pc, #352]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	029b      	lsls	r3, r3, #10
 800123e:	4013      	ands	r3, r2
 8001240:	d040      	beq.n	80012c4 <HAL_RCC_OscConfig+0x5a8>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d03c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0e6      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d01b      	beq.n	800128e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001256:	4b50      	ldr	r3, [pc, #320]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125a:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	0249      	lsls	r1, r1, #9
 8001260:	430a      	orrs	r2, r1
 8001262:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fb16 	bl	8000894 <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800126e:	f7ff fb11 	bl	8000894 <HAL_GetTick>
 8001272:	0002      	movs	r2, r0
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0cd      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001280:	4b45      	ldr	r3, [pc, #276]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	029b      	lsls	r3, r3, #10
 8001288:	4013      	ands	r3, r2
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x552>
 800128c:	e01b      	b.n	80012c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800128e:	4b42      	ldr	r3, [pc, #264]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001294:	4943      	ldr	r1, [pc, #268]	; (80013a4 <HAL_RCC_OscConfig+0x688>)
 8001296:	400a      	ands	r2, r1
 8001298:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fafb 	bl	8000894 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012a4:	f7ff faf6 	bl	8000894 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0b2      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80012b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x588>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80012c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d100      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5b4>
 80012ce:	e0a4      	b.n	800141a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	220c      	movs	r2, #12
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d100      	bne.n	80012de <HAL_RCC_OscConfig+0x5c2>
 80012dc:	e078      	b.n	80013d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d14c      	bne.n	8001380 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 80012ec:	492e      	ldr	r1, [pc, #184]	; (80013a8 <HAL_RCC_OscConfig+0x68c>)
 80012ee:	400a      	ands	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff facf 	bl	8000894 <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff faca 	bl	8000894 <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e086      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	049b      	lsls	r3, r3, #18
 8001316:	4013      	ands	r3, r2
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	220f      	movs	r2, #15
 8001320:	4393      	bics	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800132a:	430a      	orrs	r2, r1
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_RCC_OscConfig+0x690>)
 8001334:	4013      	ands	r3, r2
 8001336:	0019      	movs	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	431a      	orrs	r2, r3
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0449      	lsls	r1, r1, #17
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fa9d 	bl	8000894 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fa98 	bl	8000894 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e054      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	049b      	lsls	r3, r3, #18
 800137a:	4013      	ands	r3, r2
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x644>
 800137e:	e04c      	b.n	800141a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_RCC_OscConfig+0x67c>)
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <HAL_RCC_OscConfig+0x68c>)
 8001388:	400a      	ands	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fa82 	bl	8000894 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x6a6>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	40021000 	.word	0x40021000
 800139c:	00001388 	.word	0x00001388
 80013a0:	efffffff 	.word	0xefffffff
 80013a4:	fffeffff 	.word	0xfffeffff
 80013a8:	feffffff 	.word	0xfeffffff
 80013ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fa70 	bl	8000894 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e02c      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_RCC_OscConfig+0x708>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	049b      	lsls	r3, r3, #18
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x694>
 80013ce:	e024      	b.n	800141a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e01f      	b.n	800141c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_RCC_OscConfig+0x708>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_OscConfig+0x708>)
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	025b      	lsls	r3, r3, #9
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d10e      	bne.n	8001416 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	220f      	movs	r2, #15
 80013fc:	401a      	ands	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d107      	bne.n	8001416 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	23f0      	movs	r3, #240	; 0xf0
 800140a:	039b      	lsls	r3, r3, #14
 800140c:	401a      	ands	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b008      	add	sp, #32
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0bf      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d911      	bls.n	800146e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	4393      	bics	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	4013      	ands	r3, r2
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d001      	beq.n	800146e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0a6      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2202      	movs	r2, #2
 8001474:	4013      	ands	r3, r2
 8001476:	d015      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2204      	movs	r2, #4
 800147e:	4013      	ands	r3, r2
 8001480:	d006      	beq.n	8001490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001488:	21e0      	movs	r1, #224	; 0xe0
 800148a:	00c9      	lsls	r1, r1, #3
 800148c:	430a      	orrs	r2, r1
 800148e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	4b4d      	ldr	r3, [pc, #308]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	22f0      	movs	r2, #240	; 0xf0
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2201      	movs	r2, #1
 80014aa:	4013      	ands	r3, r2
 80014ac:	d04c      	beq.n	8001548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d120      	bne.n	8001504 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e07a      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	049b      	lsls	r3, r3, #18
 80014d6:	4013      	ands	r3, r2
 80014d8:	d114      	bne.n	8001504 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e06e      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 80014e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	029b      	lsls	r3, r3, #10
 80014ee:	4013      	ands	r3, r2
 80014f0:	d108      	bne.n	8001504 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e062      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2202      	movs	r2, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e05b      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2203      	movs	r2, #3
 800150a:	4393      	bics	r3, r2
 800150c:	0019      	movs	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff f9bc 	bl	8000894 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001520:	e009      	b.n	8001536 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001522:	f7ff f9b7 	bl	8000894 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_RCC_ClockConfig+0x1a4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e042      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	220c      	movs	r2, #12
 800153c:	401a      	ands	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1ec      	bne.n	8001522 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d211      	bcs.n	800157a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2201      	movs	r2, #1
 800155c:	4393      	bics	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_RCC_ClockConfig+0x19c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d001      	beq.n	800157a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e020      	b.n	80015bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2204      	movs	r2, #4
 8001580:	4013      	ands	r3, r2
 8001582:	d009      	beq.n	8001598 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_RCC_ClockConfig+0x1a8>)
 800158a:	4013      	ands	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001598:	f000 f820 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 800159c:	0001      	movs	r1, r0
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1a0>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	220f      	movs	r2, #15
 80015a6:	4013      	ands	r3, r2
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1ac>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	000a      	movs	r2, r1
 80015ae:	40da      	lsrs	r2, r3
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1b0>)
 80015b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f7ff f927 	bl	8000808 <HAL_InitTick>
  
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40022000 	.word	0x40022000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	00001388 	.word	0x00001388
 80015d0:	fffff8ff 	.word	0xfffff8ff
 80015d4:	08003590 	.word	0x08003590
 80015d8:	20000000 	.word	0x20000000

080015dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_GetSysClockFreq+0xd0>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	220c      	movs	r2, #12
 8001600:	4013      	ands	r3, r2
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d046      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0xb8>
 8001606:	d848      	bhi.n	800169a <HAL_RCC_GetSysClockFreq+0xbe>
 8001608:	2b04      	cmp	r3, #4
 800160a:	d002      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x36>
 800160c:	2b08      	cmp	r3, #8
 800160e:	d003      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x3c>
 8001610:	e043      	b.n	800169a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001614:	613b      	str	r3, [r7, #16]
      break;
 8001616:	e043      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	220f      	movs	r2, #15
 800161e:	4013      	ands	r3, r2
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	220f      	movs	r2, #15
 800162c:	4013      	ands	r3, r2
 800162e:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	23c0      	movs	r3, #192	; 0xc0
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	401a      	ands	r2, r3
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	025b      	lsls	r3, r3, #9
 8001640:	429a      	cmp	r2, r3
 8001642:	d109      	bne.n	8001658 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	481a      	ldr	r0, [pc, #104]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001648:	f7fe fd5e 	bl	8000108 <__udivsi3>
 800164c:	0003      	movs	r3, r0
 800164e:	001a      	movs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4353      	muls	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e01a      	b.n	800168e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	23c0      	movs	r3, #192	; 0xc0
 800165c:	025b      	lsls	r3, r3, #9
 800165e:	401a      	ands	r2, r3
 8001660:	23c0      	movs	r3, #192	; 0xc0
 8001662:	025b      	lsls	r3, r3, #9
 8001664:	429a      	cmp	r2, r3
 8001666:	d109      	bne.n	800167c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <HAL_RCC_GetSysClockFreq+0xe0>)
 800166c:	f7fe fd4c 	bl	8000108 <__udivsi3>
 8001670:	0003      	movs	r3, r0
 8001672:	001a      	movs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4353      	muls	r3, r2
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e008      	b.n	800168e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	4810      	ldr	r0, [pc, #64]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001680:	f7fe fd42 	bl	8000108 <__udivsi3>
 8001684:	0003      	movs	r3, r0
 8001686:	001a      	movs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4353      	muls	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	613b      	str	r3, [r7, #16]
      break;
 8001692:	e005      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001696:	613b      	str	r3, [r7, #16]
      break;
 8001698:	e002      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xe4>)
 800169c:	613b      	str	r3, [r7, #16]
      break;
 800169e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016a0:	693b      	ldr	r3, [r7, #16]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b006      	add	sp, #24
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40021000 	.word	0x40021000
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	080035a8 	.word	0x080035a8
 80016b8:	080035b8 	.word	0x080035b8
 80016bc:	02dc6c00 	.word	0x02dc6c00
 80016c0:	007a1200 	.word	0x007a1200

080016c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	20000000 	.word	0x20000000

080016d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016dc:	f7ff fff2 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 80016e0:	0001      	movs	r1, r0
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	2207      	movs	r2, #7
 80016ea:	4013      	ands	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	000b      	movs	r3, r1
}    
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	40021000 	.word	0x40021000
 8001700:	080035a0 	.word	0x080035a0

08001704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	4013      	ands	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001720:	e08e      	b.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2017      	movs	r0, #23
 8001724:	183b      	adds	r3, r7, r0
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	055b      	lsls	r3, r3, #21
 8001732:	4013      	ands	r3, r2
 8001734:	d110      	bne.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0549      	lsls	r1, r1, #21
 8001740:	430a      	orrs	r2, r1
 8001742:	61da      	str	r2, [r3, #28]
 8001744:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001746:	69da      	ldr	r2, [r3, #28]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	055b      	lsls	r3, r3, #21
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	183b      	adds	r3, r7, r0
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4013      	ands	r3, r2
 8001762:	d11a      	bne.n	800179a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	0049      	lsls	r1, r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff f88f 	bl	8000894 <HAL_GetTick>
 8001776:	0003      	movs	r3, r0
 8001778:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	e008      	b.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177c:	f7ff f88a 	bl	8000894 <HAL_GetTick>
 8001780:	0002      	movs	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e097      	b.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178e:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4013      	ands	r3, r2
 8001798:	d0f0      	beq.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d034      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	23c0      	movs	r3, #192	; 0xc0
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d02c      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017bc:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017c8:	6a1a      	ldr	r2, [r3, #32]
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0249      	lsls	r1, r1, #9
 80017d0:	430a      	orrs	r2, r1
 80017d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017da:	493e      	ldr	r1, [pc, #248]	; (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017dc:	400a      	ands	r2, r1
 80017de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff f851 	bl	8000894 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	e009      	b.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff f84c 	bl	8000894 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	4a35      	ldr	r2, [pc, #212]	; (80018d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e058      	b.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800181c:	4013      	ands	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001826:	430a      	orrs	r2, r1
 8001828:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800182a:	2317      	movs	r3, #23
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001836:	69da      	ldr	r2, [r3, #28]
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800183a:	4928      	ldr	r1, [pc, #160]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800183c:	400a      	ands	r2, r1
 800183e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2201      	movs	r2, #1
 8001846:	4013      	ands	r3, r2
 8001848:	d009      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	2203      	movs	r2, #3
 8001850:	4393      	bics	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800185a:	430a      	orrs	r2, r1
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2220      	movs	r2, #32
 8001864:	4013      	ands	r3, r2
 8001866:	d009      	beq.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	2210      	movs	r2, #16
 800186e:	4393      	bics	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001878:	430a      	orrs	r2, r1
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	d009      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001898:	430a      	orrs	r2, r1
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4013      	ands	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	2240      	movs	r2, #64	; 0x40
 80018ae:	4393      	bics	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b006      	add	sp, #24
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40007000 	.word	0x40007000
 80018d0:	fffffcff 	.word	0xfffffcff
 80018d4:	fffeffff 	.word	0xfffeffff
 80018d8:	00001388 	.word	0x00001388
 80018dc:	efffffff 	.word	0xefffffff

080018e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0a8      	b.n	8001a44 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	2382      	movs	r3, #130	; 0x82
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	429a      	cmp	r2, r3
 8001904:	d009      	beq.n	800191a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
 800190c:	e005      	b.n	800191a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	225d      	movs	r2, #93	; 0x5d
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d107      	bne.n	800193c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	225c      	movs	r2, #92	; 0x5c
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f7fe fdc8 	bl	80004cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	225d      	movs	r2, #93	; 0x5d
 8001940:	2102      	movs	r1, #2
 8001942:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2140      	movs	r1, #64	; 0x40
 8001950:	438a      	bics	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	23e0      	movs	r3, #224	; 0xe0
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	429a      	cmp	r2, r3
 800195e:	d902      	bls.n	8001966 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e002      	b.n	800196c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	23f0      	movs	r3, #240	; 0xf0
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	429a      	cmp	r2, r3
 8001976:	d008      	beq.n	800198a <HAL_SPI_Init+0xaa>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	23e0      	movs	r3, #224	; 0xe0
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	429a      	cmp	r2, r3
 8001982:	d002      	beq.n	800198a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	2382      	movs	r3, #130	; 0x82
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	2384      	movs	r3, #132	; 0x84
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	400b      	ands	r3, r1
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2102      	movs	r1, #2
 80019a6:	400b      	ands	r3, r1
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	2101      	movs	r1, #1
 80019b0:	400b      	ands	r3, r1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6999      	ldr	r1, [r3, #24]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	400b      	ands	r3, r1
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2138      	movs	r1, #56	; 0x38
 80019c6:	400b      	ands	r3, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	400b      	ands	r3, r1
 80019d2:	431a      	orrs	r2, r3
 80019d4:	0011      	movs	r1, r2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	019b      	lsls	r3, r3, #6
 80019de:	401a      	ands	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	2204      	movs	r2, #4
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2110      	movs	r1, #16
 80019f8:	400b      	ands	r3, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	2108      	movs	r1, #8
 8001a02:	400b      	ands	r3, r1
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	23f0      	movs	r3, #240	; 0xf0
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	400b      	ands	r3, r1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	0011      	movs	r1, r2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	015b      	lsls	r3, r3, #5
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4907      	ldr	r1, [pc, #28]	; (8001a4c <HAL_SPI_Init+0x16c>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	225d      	movs	r2, #93	; 0x5d
 8001a3e:	2101      	movs	r1, #1
 8001a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b004      	add	sp, #16
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	fffff7ff 	.word	0xfffff7ff

08001a50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	1cbb      	adds	r3, r7, #2
 8001a60:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a62:	2301      	movs	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001a66:	2323      	movs	r3, #35	; 0x23
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	225c      	movs	r2, #92	; 0x5c
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_SPI_TransmitReceive+0x2c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e1c4      	b.n	8001e06 <HAL_SPI_TransmitReceive+0x3b6>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	225c      	movs	r2, #92	; 0x5c
 8001a80:	2101      	movs	r1, #1
 8001a82:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a84:	f7fe ff06 	bl	8000894 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a8c:	201b      	movs	r0, #27
 8001a8e:	183b      	adds	r3, r7, r0
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	215d      	movs	r1, #93	; 0x5d
 8001a94:	5c52      	ldrb	r2, [r2, r1]
 8001a96:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001a9e:	2312      	movs	r3, #18
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	1cba      	adds	r2, r7, #2
 8001aa4:	8812      	ldrh	r2, [r2, #0]
 8001aa6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001aa8:	183b      	adds	r3, r7, r0
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d011      	beq.n	8001ad4 <HAL_SPI_TransmitReceive+0x84>
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	2382      	movs	r3, #130	; 0x82
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d107      	bne.n	8001aca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <HAL_SPI_TransmitReceive+0x7a>
 8001ac2:	183b      	adds	r3, r7, r0
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d004      	beq.n	8001ad4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001aca:	2323      	movs	r3, #35	; 0x23
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	2202      	movs	r2, #2
 8001ad0:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ad2:	e191      	b.n	8001df8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_SPI_TransmitReceive+0x98>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_SPI_TransmitReceive+0x98>
 8001ae0:	1cbb      	adds	r3, r7, #2
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d104      	bne.n	8001af2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001ae8:	2323      	movs	r3, #35	; 0x23
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
    goto error;
 8001af0:	e182      	b.n	8001df8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	225d      	movs	r2, #93	; 0x5d
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d003      	beq.n	8001b06 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	225d      	movs	r2, #93	; 0x5d
 8001b02:	2105      	movs	r1, #5
 8001b04:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1cba      	adds	r2, r7, #2
 8001b16:	2146      	movs	r1, #70	; 0x46
 8001b18:	8812      	ldrh	r2, [r2, #0]
 8001b1a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1cba      	adds	r2, r7, #2
 8001b20:	2144      	movs	r1, #68	; 0x44
 8001b22:	8812      	ldrh	r2, [r2, #0]
 8001b24:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1cba      	adds	r2, r7, #2
 8001b30:	8812      	ldrh	r2, [r2, #0]
 8001b32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1cba      	adds	r2, r7, #2
 8001b38:	8812      	ldrh	r2, [r2, #0]
 8001b3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	23e0      	movs	r3, #224	; 0xe0
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d908      	bls.n	8001b66 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	49ac      	ldr	r1, [pc, #688]	; (8001e10 <HAL_SPI_TransmitReceive+0x3c0>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	e008      	b.n	8001b78 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	0149      	lsls	r1, r1, #5
 8001b74:	430a      	orrs	r2, r1
 8001b76:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b40      	cmp	r3, #64	; 0x40
 8001b84:	d007      	beq.n	8001b96 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	23e0      	movs	r3, #224	; 0xe0
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d800      	bhi.n	8001ba4 <HAL_SPI_TransmitReceive+0x154>
 8001ba2:	e083      	b.n	8001cac <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_SPI_TransmitReceive+0x168>
 8001bac:	2312      	movs	r3, #18
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d000      	beq.n	8001bb8 <HAL_SPI_TransmitReceive+0x168>
 8001bb6:	e06d      	b.n	8001c94 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	1c9a      	adds	r2, r3, #2
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bdc:	e05a      	b.n	8001c94 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d11b      	bne.n	8001c24 <HAL_SPI_TransmitReceive+0x1d4>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d016      	beq.n	8001c24 <HAL_SPI_TransmitReceive+0x1d4>
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d113      	bne.n	8001c24 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	1c9a      	adds	r2, r3, #2
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d11c      	bne.n	8001c6c <HAL_SPI_TransmitReceive+0x21c>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2246      	movs	r2, #70	; 0x46
 8001c36:	5a9b      	ldrh	r3, [r3, r2]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	1c9a      	adds	r2, r3, #2
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2246      	movs	r2, #70	; 0x46
 8001c5a:	5a9b      	ldrh	r3, [r3, r2]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b299      	uxth	r1, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2246      	movs	r2, #70	; 0x46
 8001c66:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c6c:	f7fe fe12 	bl	8000894 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d80b      	bhi.n	8001c94 <HAL_SPI_TransmitReceive+0x244>
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7e:	3301      	adds	r3, #1
 8001c80:	d008      	beq.n	8001c94 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001c82:	2323      	movs	r3, #35	; 0x23
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	2203      	movs	r2, #3
 8001c88:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	225d      	movs	r2, #93	; 0x5d
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
        goto error;
 8001c92:	e0b1      	b.n	8001df8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d19f      	bne.n	8001bde <HAL_SPI_TransmitReceive+0x18e>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2246      	movs	r2, #70	; 0x46
 8001ca2:	5a9b      	ldrh	r3, [r3, r2]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d199      	bne.n	8001bde <HAL_SPI_TransmitReceive+0x18e>
 8001caa:	e089      	b.n	8001dc0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_SPI_TransmitReceive+0x270>
 8001cb4:	2312      	movs	r3, #18
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d000      	beq.n	8001cc0 <HAL_SPI_TransmitReceive+0x270>
 8001cbe:	e074      	b.n	8001daa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	330c      	adds	r3, #12
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ce6:	e060      	b.n	8001daa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d11c      	bne.n	8001d30 <HAL_SPI_TransmitReceive+0x2e0>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d017      	beq.n	8001d30 <HAL_SPI_TransmitReceive+0x2e0>
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d114      	bne.n	8001d30 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	330c      	adds	r3, #12
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d11e      	bne.n	8001d7c <HAL_SPI_TransmitReceive+0x32c>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2246      	movs	r2, #70	; 0x46
 8001d42:	5a9b      	ldrh	r3, [r3, r2]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d018      	beq.n	8001d7c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	330c      	adds	r3, #12
 8001d50:	001a      	movs	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	7812      	ldrb	r2, [r2, #0]
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2246      	movs	r2, #70	; 0x46
 8001d6a:	5a9b      	ldrh	r3, [r3, r2]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b299      	uxth	r1, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2246      	movs	r2, #70	; 0x46
 8001d76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d7c:	f7fe fd8a 	bl	8000894 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d802      	bhi.n	8001d92 <HAL_SPI_TransmitReceive+0x342>
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	3301      	adds	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_SPI_TransmitReceive+0x348>
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d108      	bne.n	8001daa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001d98:	2323      	movs	r3, #35	; 0x23
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	225d      	movs	r2, #93	; 0x5d
 8001da4:	2101      	movs	r1, #1
 8001da6:	5499      	strb	r1, [r3, r2]
        goto error;
 8001da8:	e026      	b.n	8001df8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d199      	bne.n	8001ce8 <HAL_SPI_TransmitReceive+0x298>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2246      	movs	r2, #70	; 0x46
 8001db8:	5a9b      	ldrh	r3, [r3, r2]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d193      	bne.n	8001ce8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 f954 	bl	8002074 <SPI_EndRxTxTransaction>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d006      	beq.n	8001dde <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001dd0:	2323      	movs	r3, #35	; 0x23
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8001de6:	2323      	movs	r3, #35	; 0x23
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e003      	b.n	8001df8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	225d      	movs	r2, #93	; 0x5d
 8001df4:	2101      	movs	r1, #1
 8001df6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	225c      	movs	r2, #92	; 0x5c
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e00:	2323      	movs	r3, #35	; 0x23
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b00a      	add	sp, #40	; 0x28
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	ffffefff 	.word	0xffffefff

08001e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	1dfb      	adds	r3, r7, #7
 8001e22:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e24:	f7fe fd36 	bl	8000894 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	18d3      	adds	r3, r2, r3
 8001e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e34:	f7fe fd2e 	bl	8000894 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e3c:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	015b      	lsls	r3, r3, #5
 8001e42:	0d1b      	lsrs	r3, r3, #20
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	4353      	muls	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e4a:	e058      	b.n	8001efe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	d055      	beq.n	8001efe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e52:	f7fe fd1f 	bl	8000894 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d902      	bls.n	8001e68 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d142      	bne.n	8001eee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	21e0      	movs	r1, #224	; 0xe0
 8001e74:	438a      	bics	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	2382      	movs	r3, #130	; 0x82
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d113      	bne.n	8001eac <SPI_WaitFlagStateUntilTimeout+0x98>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d005      	beq.n	8001e9c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d107      	bne.n	8001eac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2140      	movs	r1, #64	; 0x40
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	019b      	lsls	r3, r3, #6
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d110      	bne.n	8001eda <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	491a      	ldr	r1, [pc, #104]	; (8001f2c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0189      	lsls	r1, r1, #6
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	225d      	movs	r2, #93	; 0x5d
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	225c      	movs	r2, #92	; 0x5c
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e017      	b.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	4013      	ands	r3, r2
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	425a      	negs	r2, r3
 8001f0e:	4153      	adcs	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	001a      	movs	r2, r3
 8001f14:	1dfb      	adds	r3, r7, #7
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d197      	bne.n	8001e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b008      	add	sp, #32
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	ffffdfff 	.word	0xffffdfff

08001f30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f3e:	2317      	movs	r3, #23
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f46:	f7fe fca5 	bl	8000894 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	18d3      	adds	r3, r2, r3
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001f56:	f7fe fc9d 	bl	8000894 <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330c      	adds	r3, #12
 8001f64:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	189b      	adds	r3, r3, r2
 8001f70:	00da      	lsls	r2, r3, #3
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	0d1b      	lsrs	r3, r3, #20
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	4353      	muls	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f7c:	e068      	b.n	8002050 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	23c0      	movs	r3, #192	; 0xc0
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10a      	bne.n	8001f9e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	2117      	movs	r1, #23
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	d055      	beq.n	8002050 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fa4:	f7fe fc76 	bl	8000894 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d902      	bls.n	8001fba <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d142      	bne.n	8002040 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	21e0      	movs	r1, #224	; 0xe0
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	2382      	movs	r3, #130	; 0x82
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d113      	bne.n	8001ffe <SPI_WaitFifoStateUntilTimeout+0xce>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d005      	beq.n	8001fee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d107      	bne.n	8001ffe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2140      	movs	r1, #64	; 0x40
 8001ffa:	438a      	bics	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	429a      	cmp	r2, r3
 8002008:	d110      	bne.n	800202c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002016:	400a      	ands	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0189      	lsls	r1, r1, #6
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	225d      	movs	r2, #93	; 0x5d
 8002030:	2101      	movs	r1, #1
 8002032:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	225c      	movs	r2, #92	; 0x5c
 8002038:	2100      	movs	r1, #0
 800203a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e010      	b.n	8002062 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	3b01      	subs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d18e      	bne.n	8001f7e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b00a      	add	sp, #40	; 0x28
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	20000000 	.word	0x20000000
 8002070:	ffffdfff 	.word	0xffffdfff

08002074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	23c0      	movs	r3, #192	; 0xc0
 8002084:	0159      	lsls	r1, r3, #5
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	0013      	movs	r3, r2
 800208e:	2200      	movs	r2, #0
 8002090:	f7ff ff4e 	bl	8001f30 <SPI_WaitFifoStateUntilTimeout>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d007      	beq.n	80020a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209c:	2220      	movs	r2, #32
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e027      	b.n	80020f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	0013      	movs	r3, r2
 80020b2:	2200      	movs	r2, #0
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	f7ff fead 	bl	8001e14 <SPI_WaitFlagStateUntilTimeout>
 80020ba:	1e03      	subs	r3, r0, #0
 80020bc:	d007      	beq.n	80020ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	2220      	movs	r2, #32
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e014      	b.n	80020f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	23c0      	movs	r3, #192	; 0xc0
 80020d2:	00d9      	lsls	r1, r3, #3
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	0013      	movs	r3, r2
 80020dc:	2200      	movs	r2, #0
 80020de:	f7ff ff27 	bl	8001f30 <SPI_WaitFifoStateUntilTimeout>
 80020e2:	1e03      	subs	r3, r0, #0
 80020e4:	d007      	beq.n	80020f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	2220      	movs	r2, #32
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e000      	b.n	80020f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e044      	b.n	800219c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2278      	movs	r2, #120	; 0x78
 800211e:	2100      	movs	r1, #0
 8002120:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f7fe facb 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2224      	movs	r2, #36	; 0x24
 800212e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f830 	bl	80021a8 <UART_SetConfig>
 8002148:	0003      	movs	r3, r0
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e024      	b.n	800219c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 f963 	bl	8002428 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	490d      	ldr	r1, [pc, #52]	; (80021a4 <HAL_UART_Init+0xa4>)
 800216e:	400a      	ands	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	212a      	movs	r1, #42	; 0x2a
 800217e:	438a      	bics	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f000 f9fb 	bl	8002590 <UART_CheckIdleState>
 800219a:	0003      	movs	r3, r0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	ffffb7ff 	.word	0xffffb7ff

080021a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021b0:	231e      	movs	r3, #30
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a8d      	ldr	r2, [pc, #564]	; (800240c <UART_SetConfig+0x264>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a88      	ldr	r2, [pc, #544]	; (8002410 <UART_SetConfig+0x268>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a7f      	ldr	r2, [pc, #508]	; (8002414 <UART_SetConfig+0x26c>)
 8002216:	4013      	ands	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7b      	ldr	r2, [pc, #492]	; (8002418 <UART_SetConfig+0x270>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d127      	bne.n	800227e <UART_SetConfig+0xd6>
 800222e:	4b7b      	ldr	r3, [pc, #492]	; (800241c <UART_SetConfig+0x274>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	2203      	movs	r2, #3
 8002234:	4013      	ands	r3, r2
 8002236:	2b03      	cmp	r3, #3
 8002238:	d00d      	beq.n	8002256 <UART_SetConfig+0xae>
 800223a:	d81b      	bhi.n	8002274 <UART_SetConfig+0xcc>
 800223c:	2b02      	cmp	r3, #2
 800223e:	d014      	beq.n	800226a <UART_SetConfig+0xc2>
 8002240:	d818      	bhi.n	8002274 <UART_SetConfig+0xcc>
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <UART_SetConfig+0xa4>
 8002246:	2b01      	cmp	r3, #1
 8002248:	d00a      	beq.n	8002260 <UART_SetConfig+0xb8>
 800224a:	e013      	b.n	8002274 <UART_SetConfig+0xcc>
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e021      	b.n	800229a <UART_SetConfig+0xf2>
 8002256:	231f      	movs	r3, #31
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e01c      	b.n	800229a <UART_SetConfig+0xf2>
 8002260:	231f      	movs	r3, #31
 8002262:	18fb      	adds	r3, r7, r3
 8002264:	2204      	movs	r2, #4
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e017      	b.n	800229a <UART_SetConfig+0xf2>
 800226a:	231f      	movs	r3, #31
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2208      	movs	r2, #8
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e012      	b.n	800229a <UART_SetConfig+0xf2>
 8002274:	231f      	movs	r3, #31
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2210      	movs	r2, #16
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e00d      	b.n	800229a <UART_SetConfig+0xf2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a67      	ldr	r2, [pc, #412]	; (8002420 <UART_SetConfig+0x278>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d104      	bne.n	8002292 <UART_SetConfig+0xea>
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e003      	b.n	800229a <UART_SetConfig+0xf2>
 8002292:	231f      	movs	r3, #31
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2210      	movs	r2, #16
 8002298:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d15c      	bne.n	8002360 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d015      	beq.n	80022dc <UART_SetConfig+0x134>
 80022b0:	dc18      	bgt.n	80022e4 <UART_SetConfig+0x13c>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d00d      	beq.n	80022d2 <UART_SetConfig+0x12a>
 80022b6:	dc15      	bgt.n	80022e4 <UART_SetConfig+0x13c>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <UART_SetConfig+0x11a>
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d005      	beq.n	80022cc <UART_SetConfig+0x124>
 80022c0:	e010      	b.n	80022e4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022c2:	f7ff fa09 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
        break;
 80022ca:	e012      	b.n	80022f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022cc:	4b55      	ldr	r3, [pc, #340]	; (8002424 <UART_SetConfig+0x27c>)
 80022ce:	61bb      	str	r3, [r7, #24]
        break;
 80022d0:	e00f      	b.n	80022f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022d2:	f7ff f983 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]
        break;
 80022da:	e00a      	b.n	80022f2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	61bb      	str	r3, [r7, #24]
        break;
 80022e2:	e006      	b.n	80022f2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022e8:	231e      	movs	r3, #30
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
        break;
 80022f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d100      	bne.n	80022fa <UART_SetConfig+0x152>
 80022f8:	e07a      	b.n	80023f0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	005a      	lsls	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	18d2      	adds	r2, r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0019      	movs	r1, r3
 800230c:	0010      	movs	r0, r2
 800230e:	f7fd fefb 	bl	8000108 <__udivsi3>
 8002312:	0003      	movs	r3, r0
 8002314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d91c      	bls.n	8002356 <UART_SetConfig+0x1ae>
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	025b      	lsls	r3, r3, #9
 8002322:	429a      	cmp	r2, r3
 8002324:	d217      	bcs.n	8002356 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	b29a      	uxth	r2, r3
 800232a:	200e      	movs	r0, #14
 800232c:	183b      	adds	r3, r7, r0
 800232e:	210f      	movs	r1, #15
 8002330:	438a      	bics	r2, r1
 8002332:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	b29b      	uxth	r3, r3
 800233a:	2207      	movs	r2, #7
 800233c:	4013      	ands	r3, r2
 800233e:	b299      	uxth	r1, r3
 8002340:	183b      	adds	r3, r7, r0
 8002342:	183a      	adds	r2, r7, r0
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	183a      	adds	r2, r7, r0
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	e04c      	b.n	80023f0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002356:	231e      	movs	r3, #30
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e047      	b.n	80023f0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002360:	231f      	movs	r3, #31
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d015      	beq.n	8002396 <UART_SetConfig+0x1ee>
 800236a:	dc18      	bgt.n	800239e <UART_SetConfig+0x1f6>
 800236c:	2b04      	cmp	r3, #4
 800236e:	d00d      	beq.n	800238c <UART_SetConfig+0x1e4>
 8002370:	dc15      	bgt.n	800239e <UART_SetConfig+0x1f6>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <UART_SetConfig+0x1d4>
 8002376:	2b02      	cmp	r3, #2
 8002378:	d005      	beq.n	8002386 <UART_SetConfig+0x1de>
 800237a:	e010      	b.n	800239e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800237c:	f7ff f9ac 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002380:	0003      	movs	r3, r0
 8002382:	61bb      	str	r3, [r7, #24]
        break;
 8002384:	e012      	b.n	80023ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <UART_SetConfig+0x27c>)
 8002388:	61bb      	str	r3, [r7, #24]
        break;
 800238a:	e00f      	b.n	80023ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800238c:	f7ff f926 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8002390:	0003      	movs	r3, r0
 8002392:	61bb      	str	r3, [r7, #24]
        break;
 8002394:	e00a      	b.n	80023ac <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	61bb      	str	r3, [r7, #24]
        break;
 800239c:	e006      	b.n	80023ac <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023a2:	231e      	movs	r3, #30
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
        break;
 80023aa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01e      	beq.n	80023f0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	085a      	lsrs	r2, r3, #1
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	18d2      	adds	r2, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0019      	movs	r1, r3
 80023c2:	0010      	movs	r0, r2
 80023c4:	f7fd fea0 	bl	8000108 <__udivsi3>
 80023c8:	0003      	movs	r3, r0
 80023ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	d90a      	bls.n	80023e8 <UART_SetConfig+0x240>
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	429a      	cmp	r2, r3
 80023da:	d205      	bcs.n	80023e8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	e003      	b.n	80023f0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80023e8:	231e      	movs	r3, #30
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80023fc:	231e      	movs	r3, #30
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	781b      	ldrb	r3, [r3, #0]
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b008      	add	sp, #32
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	efff69f3 	.word	0xefff69f3
 8002410:	ffffcfff 	.word	0xffffcfff
 8002414:	fffff4ff 	.word	0xfffff4ff
 8002418:	40013800 	.word	0x40013800
 800241c:	40021000 	.word	0x40021000
 8002420:	40004400 	.word	0x40004400
 8002424:	007a1200 	.word	0x007a1200

08002428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d00b      	beq.n	8002452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a4a      	ldr	r2, [pc, #296]	; (800256c <UART_AdvFeatureConfig+0x144>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d00b      	beq.n	8002474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a43      	ldr	r2, [pc, #268]	; (8002570 <UART_AdvFeatureConfig+0x148>)
 8002464:	4013      	ands	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2204      	movs	r2, #4
 800247a:	4013      	ands	r3, r2
 800247c:	d00b      	beq.n	8002496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <UART_AdvFeatureConfig+0x14c>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2208      	movs	r2, #8
 800249c:	4013      	ands	r3, r2
 800249e:	d00b      	beq.n	80024b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a34      	ldr	r2, [pc, #208]	; (8002578 <UART_AdvFeatureConfig+0x150>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2210      	movs	r2, #16
 80024be:	4013      	ands	r3, r2
 80024c0:	d00b      	beq.n	80024da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a2c      	ldr	r2, [pc, #176]	; (800257c <UART_AdvFeatureConfig+0x154>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2220      	movs	r2, #32
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00b      	beq.n	80024fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <UART_AdvFeatureConfig+0x158>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	4013      	ands	r3, r2
 8002504:	d01d      	beq.n	8002542 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <UART_AdvFeatureConfig+0x15c>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	035b      	lsls	r3, r3, #13
 8002526:	429a      	cmp	r2, r3
 8002528:	d10b      	bne.n	8002542 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <UART_AdvFeatureConfig+0x160>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	4013      	ands	r3, r2
 800254a:	d00b      	beq.n	8002564 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <UART_AdvFeatureConfig+0x164>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
  }
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}
 800256c:	fffdffff 	.word	0xfffdffff
 8002570:	fffeffff 	.word	0xfffeffff
 8002574:	fffbffff 	.word	0xfffbffff
 8002578:	ffff7fff 	.word	0xffff7fff
 800257c:	ffffefff 	.word	0xffffefff
 8002580:	ffffdfff 	.word	0xffffdfff
 8002584:	ffefffff 	.word	0xffefffff
 8002588:	ff9fffff 	.word	0xff9fffff
 800258c:	fff7ffff 	.word	0xfff7ffff

08002590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b092      	sub	sp, #72	; 0x48
 8002594:	af02      	add	r7, sp, #8
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2284      	movs	r2, #132	; 0x84
 800259c:	2100      	movs	r1, #0
 800259e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025a0:	f7fe f978 	bl	8000894 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2208      	movs	r2, #8
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d12c      	bne.n	8002610 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	0391      	lsls	r1, r2, #14
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4a46      	ldr	r2, [pc, #280]	; (80026d8 <UART_CheckIdleState+0x148>)
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f000 f88c 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 80025c8:	1e03      	subs	r3, r0, #0
 80025ca:	d021      	beq.n	8002610 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025cc:	f3ef 8310 	mrs	r3, PRIMASK
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d6:	2301      	movs	r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	f383 8810 	msr	PRIMASK, r3
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	438a      	bics	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	f383 8810 	msr	PRIMASK, r3
}
 80025fc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2278      	movs	r2, #120	; 0x78
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e05f      	b.n	80026d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2204      	movs	r2, #4
 8002618:	4013      	ands	r3, r2
 800261a:	2b04      	cmp	r3, #4
 800261c:	d146      	bne.n	80026ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800261e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	03d1      	lsls	r1, r2, #15
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4a2c      	ldr	r2, [pc, #176]	; (80026d8 <UART_CheckIdleState+0x148>)
 8002628:	9200      	str	r2, [sp, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	f000 f858 	bl	80026e0 <UART_WaitOnFlagUntilTimeout>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d03b      	beq.n	80026ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002634:	f3ef 8310 	mrs	r3, PRIMASK
 8002638:	60fb      	str	r3, [r7, #12]
  return(result);
 800263a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
 800263e:	2301      	movs	r3, #1
 8002640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f383 8810 	msr	PRIMASK, r3
}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4921      	ldr	r1, [pc, #132]	; (80026dc <UART_CheckIdleState+0x14c>)
 8002656:	400a      	ands	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f383 8810 	msr	PRIMASK, r3
}
 8002664:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	61bb      	str	r3, [r7, #24]
  return(result);
 800266c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
 8002670:	2301      	movs	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f383 8810 	msr	PRIMASK, r3
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2101      	movs	r1, #1
 8002688:	438a      	bics	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	2120      	movs	r1, #32
 800269e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2278      	movs	r2, #120	; 0x78
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e011      	b.n	80026d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	2120      	movs	r1, #32
 80026b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2278      	movs	r2, #120	; 0x78
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b010      	add	sp, #64	; 0x40
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	01ffffff 	.word	0x01ffffff
 80026dc:	fffffedf 	.word	0xfffffedf

080026e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f0:	e04b      	b.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	d048      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7fe f8cc 	bl	8000894 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e04b      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2204      	movs	r2, #4
 800271a:	4013      	ands	r3, r2
 800271c:	d035      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2208      	movs	r2, #8
 8002726:	4013      	ands	r3, r2
 8002728:	2b08      	cmp	r3, #8
 800272a:	d111      	bne.n	8002750 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2208      	movs	r2, #8
 8002732:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f83c 	bl	80027b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2284      	movs	r2, #132	; 0x84
 8002740:	2108      	movs	r1, #8
 8002742:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2278      	movs	r2, #120	; 0x78
 8002748:	2100      	movs	r1, #0
 800274a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e02c      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	401a      	ands	r2, r3
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	429a      	cmp	r2, r3
 8002762:	d112      	bne.n	800278a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2280      	movs	r2, #128	; 0x80
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f81f 	bl	80027b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2284      	movs	r2, #132	; 0x84
 800277a:	2120      	movs	r1, #32
 800277c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2278      	movs	r2, #120	; 0x78
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e00f      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	425a      	negs	r2, r3
 800279a:	4153      	adcs	r3, r2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	001a      	movs	r2, r3
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d0a4      	beq.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027bc:	f3ef 8310 	mrs	r3, PRIMASK
 80027c0:	617b      	str	r3, [r7, #20]
  return(result);
 80027c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
 80027c6:	2301      	movs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f383 8810 	msr	PRIMASK, r3
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4926      	ldr	r1, [pc, #152]	; (8002878 <UART_EndRxTransfer+0xc4>)
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ee:	f3ef 8310 	mrs	r3, PRIMASK
 80027f2:	623b      	str	r3, [r7, #32]
  return(result);
 80027f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	633b      	str	r3, [r7, #48]	; 0x30
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	f383 8810 	msr	PRIMASK, r3
}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2101      	movs	r1, #1
 8002810:	438a      	bics	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002824:	2b01      	cmp	r3, #1
 8002826:	d118      	bne.n	800285a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002828:	f3ef 8310 	mrs	r3, PRIMASK
 800282c:	60bb      	str	r3, [r7, #8]
  return(result);
 800282e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002832:	2301      	movs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f383 8810 	msr	PRIMASK, r3
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2110      	movs	r1, #16
 800284a:	438a      	bics	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	2120      	movs	r1, #32
 8002860:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b00e      	add	sp, #56	; 0x38
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	fffffedf 	.word	0xfffffedf

0800287c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <MX_FATFS_Init+0x20>)
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <MX_FATFS_Init+0x24>)
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f000 fe3a 	bl	8003500 <FATFS_LinkDriver>
 800288c:	0003      	movs	r3, r0
 800288e:	001a      	movs	r2, r3
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <MX_FATFS_Init+0x28>)
 8002892:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	20000198 	.word	0x20000198
 80028a0:	2000000c 	.word	0x2000000c
 80028a4:	20000194 	.word	0x20000194

080028a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	0002      	movs	r2, r0
 80028b0:	1dfb      	adds	r3, r7, #7
 80028b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fa1f 	bl	8002cfc <USER_SPI_initialize>
 80028be:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	0002      	movs	r2, r0
 80028d0:	1dfb      	adds	r3, r7, #7
 80028d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80028d4:	1dfb      	adds	r3, r7, #7
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 fb27 	bl	8002f2c <USER_SPI_status>
 80028de:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	250f      	movs	r5, #15
 80028f6:	197b      	adds	r3, r7, r5
 80028f8:	1c02      	adds	r2, r0, #0
 80028fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read ( pdrv, buff,  sector,  count);
 80028fc:	683c      	ldr	r4, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	197b      	adds	r3, r7, r5
 8002904:	7818      	ldrb	r0, [r3, #0]
 8002906:	0023      	movs	r3, r4
 8002908:	f000 fb26 	bl	8002f58 <USER_SPI_read>
 800290c:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bdb0      	pop	{r4, r5, r7, pc}

08002916 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002916:	b5b0      	push	{r4, r5, r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	250f      	movs	r5, #15
 8002924:	197b      	adds	r3, r7, r5
 8002926:	1c02      	adds	r2, r0, #0
 8002928:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write ( pdrv, buff, sector, count);
 800292a:	683c      	ldr	r4, [r7, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	197b      	adds	r3, r7, r5
 8002932:	7818      	ldrb	r0, [r3, #0]
 8002934:	0023      	movs	r3, r4
 8002936:	f000 fb7b 	bl	8003030 <USER_SPI_write>
 800293a:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b004      	add	sp, #16
 8002942:	bdb0      	pop	{r4, r5, r7, pc}

08002944 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	603a      	str	r2, [r7, #0]
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	1c02      	adds	r2, r0, #0
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	1dbb      	adds	r3, r7, #6
 8002954:	1c0a      	adds	r2, r1, #0
 8002956:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl ( pdrv,  cmd, buff);
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	1dbb      	adds	r3, r7, #6
 800295c:	7819      	ldrb	r1, [r3, #0]
 800295e:	1dfb      	adds	r3, r7, #7
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	0018      	movs	r0, r3
 8002964:	f000 fbe4 	bl	8003130 <USER_SPI_ioctl>
 8002968:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800297c:	f7fd ff8a 	bl	8000894 <HAL_GetTick>
 8002980:	0002      	movs	r2, r0
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SPI_Timer_On+0x20>)
 8002984:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SPI_Timer_On+0x24>)
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200001a0 	.word	0x200001a0
 8002998:	200001a4 	.word	0x200001a4

0800299c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80029a0:	f7fd ff78 	bl	8000894 <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <SPI_Timer_Status+0x24>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <SPI_Timer_Status+0x28>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	419b      	sbcs	r3, r3
 80029b4:	425b      	negs	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	200001a0 	.word	0x200001a0
 80029c4:	200001a4 	.word	0x200001a4

080029c8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	0002      	movs	r2, r0
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 80029d4:	240f      	movs	r4, #15
 80029d6:	193a      	adds	r2, r7, r4
 80029d8:	1df9      	adds	r1, r7, #7
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <xchg_spi+0x2c>)
 80029dc:	2332      	movs	r3, #50	; 0x32
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2301      	movs	r3, #1
 80029e2:	f7ff f835 	bl	8001a50 <HAL_SPI_TransmitReceive>
    return rxDat;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	781b      	ldrb	r3, [r3, #0]
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b005      	add	sp, #20
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	200000a4 	.word	0x200000a4

080029f8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e00a      	b.n	8002a1e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	18d4      	adds	r4, r2, r3
 8002a0e:	20ff      	movs	r0, #255	; 0xff
 8002a10:	f7ff ffda 	bl	80029c8 <xchg_spi>
 8002a14:	0003      	movs	r3, r0
 8002a16:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3f0      	bcc.n	8002a08 <rcvr_spi_multi+0x10>
	}
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b005      	add	sp, #20
 8002a2e:	bd90      	pop	{r4, r7, pc}

08002a30 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e009      	b.n	8002a54 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	18d3      	adds	r3, r2, r3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff ffbd 	bl	80029c8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3301      	adds	r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d3f1      	bcc.n	8002a40 <xmit_spi_multi+0x10>
	}
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002a66:	b5b0      	push	{r4, r5, r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002a6e:	f7fd ff11 	bl	8000894 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002a7a:	250f      	movs	r5, #15
 8002a7c:	197c      	adds	r4, r7, r5
 8002a7e:	20ff      	movs	r0, #255	; 0xff
 8002a80:	f7ff ffa2 	bl	80029c8 <xchg_spi>
 8002a84:	0003      	movs	r3, r0
 8002a86:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002a88:	197b      	adds	r3, r7, r5
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2bff      	cmp	r3, #255	; 0xff
 8002a8e:	d007      	beq.n	8002aa0 <wait_ready+0x3a>
 8002a90:	f7fd ff00 	bl	8000894 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d8ec      	bhi.n	8002a7a <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	3bff      	subs	r3, #255	; 0xff
 8002aa8:	425a      	negs	r2, r3
 8002aaa:	4153      	adcs	r3, r2
 8002aac:	b2db      	uxtb	r3, r3
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b006      	add	sp, #24
 8002ab4:	bdb0      	pop	{r4, r5, r7, pc}

08002ab6 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	0059      	lsls	r1, r3, #1
 8002abe:	2390      	movs	r3, #144	; 0x90
 8002ac0:	05db      	lsls	r3, r3, #23
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fe f90b 	bl	8000ce0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002aca:	20ff      	movs	r0, #255	; 0xff
 8002acc:	f7ff ff7c 	bl	80029c8 <xchg_spi>

}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	0059      	lsls	r1, r3, #1
 8002ade:	2390      	movs	r3, #144	; 0x90
 8002ae0:	05db      	lsls	r3, r3, #23
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fe f8fb 	bl	8000ce0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002aea:	20ff      	movs	r0, #255	; 0xff
 8002aec:	f7ff ff6c 	bl	80029c8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002af0:	23fa      	movs	r3, #250	; 0xfa
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7ff ffb6 	bl	8002a66 <wait_ready>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <spiselect+0x2c>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e002      	b.n	8002b08 <spiselect+0x32>

	despiselect();
 8002b02:	f7ff ffd8 	bl	8002ab6 <despiselect>
	return 0;	/* Timeout */
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002b0e:	b5b0      	push	{r4, r5, r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002b18:	20c8      	movs	r0, #200	; 0xc8
 8002b1a:	f7ff ff2b 	bl	8002974 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002b1e:	250f      	movs	r5, #15
 8002b20:	197c      	adds	r4, r7, r5
 8002b22:	20ff      	movs	r0, #255	; 0xff
 8002b24:	f7ff ff50 	bl	80029c8 <xchg_spi>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002b2c:	197b      	adds	r3, r7, r5
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2bff      	cmp	r3, #255	; 0xff
 8002b32:	d103      	bne.n	8002b3c <rcvr_datablock+0x2e>
 8002b34:	f7ff ff32 	bl	800299c <SPI_Timer_Status>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d1f0      	bne.n	8002b1e <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2bfe      	cmp	r3, #254	; 0xfe
 8002b44:	d001      	beq.n	8002b4a <rcvr_datablock+0x3c>
 8002b46:	2300      	movs	r3, #0
 8002b48:	e00c      	b.n	8002b64 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0011      	movs	r1, r2
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff ff51 	bl	80029f8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002b56:	20ff      	movs	r0, #255	; 0xff
 8002b58:	f7ff ff36 	bl	80029c8 <xchg_spi>
 8002b5c:	20ff      	movs	r0, #255	; 0xff
 8002b5e:	f7ff ff33 	bl	80029c8 <xchg_spi>

	return 1;						/* Function succeeded */
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bdb0      	pop	{r4, r5, r7, pc}

08002b6c <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002b6c:	b5b0      	push	{r4, r5, r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	000a      	movs	r2, r1
 8002b76:	1cfb      	adds	r3, r7, #3
 8002b78:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002b7a:	23fa      	movs	r3, #250	; 0xfa
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff ff71 	bl	8002a66 <wait_ready>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d101      	bne.n	8002b8c <xmit_datablock+0x20>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e025      	b.n	8002bd8 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8002b8c:	1cfb      	adds	r3, r7, #3
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff ff19 	bl	80029c8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002b96:	1cfb      	adds	r3, r7, #3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2bfd      	cmp	r3, #253	; 0xfd
 8002b9c:	d01b      	beq.n	8002bd6 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	009a      	lsls	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0011      	movs	r1, r2
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff ff42 	bl	8002a30 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002bac:	20ff      	movs	r0, #255	; 0xff
 8002bae:	f7ff ff0b 	bl	80029c8 <xchg_spi>
 8002bb2:	20ff      	movs	r0, #255	; 0xff
 8002bb4:	f7ff ff08 	bl	80029c8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002bb8:	250f      	movs	r5, #15
 8002bba:	197c      	adds	r4, r7, r5
 8002bbc:	20ff      	movs	r0, #255	; 0xff
 8002bbe:	f7ff ff03 	bl	80029c8 <xchg_spi>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002bc6:	197b      	adds	r3, r7, r5
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	221f      	movs	r2, #31
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d001      	beq.n	8002bd6 <xmit_datablock+0x6a>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <xmit_datablock+0x6c>
	}
	return 1;
 8002bd6:	2301      	movs	r3, #1
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b004      	add	sp, #16
 8002bde:	bdb0      	pop	{r4, r5, r7, pc}

08002be0 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	0002      	movs	r2, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002bee:	1dfb      	adds	r3, r7, #7
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da15      	bge.n	8002c24 <send_cmd+0x44>
		cmd &= 0x7F;
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	1dfa      	adds	r2, r7, #7
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	217f      	movs	r1, #127	; 0x7f
 8002c00:	400a      	ands	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8002c04:	250e      	movs	r5, #14
 8002c06:	197c      	adds	r4, r7, r5
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2037      	movs	r0, #55	; 0x37
 8002c0c:	f7ff ffe8 	bl	8002be0 <send_cmd>
 8002c10:	0003      	movs	r3, r0
 8002c12:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8002c14:	002a      	movs	r2, r5
 8002c16:	18bb      	adds	r3, r7, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d902      	bls.n	8002c24 <send_cmd+0x44>
 8002c1e:	18bb      	adds	r3, r7, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	e067      	b.n	8002cf4 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d007      	beq.n	8002c3c <send_cmd+0x5c>
		despiselect();
 8002c2c:	f7ff ff43 	bl	8002ab6 <despiselect>
		if (!spiselect()) return 0xFF;
 8002c30:	f7ff ff51 	bl	8002ad6 <spiselect>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d101      	bne.n	8002c3c <send_cmd+0x5c>
 8002c38:	23ff      	movs	r3, #255	; 0xff
 8002c3a:	e05b      	b.n	8002cf4 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2240      	movs	r2, #64	; 0x40
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7ff febe 	bl	80029c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	0e1b      	lsrs	r3, r3, #24
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7ff feb8 	bl	80029c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	0c1b      	lsrs	r3, r3, #16
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff feb2 	bl	80029c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff feac 	bl	80029c8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff fea7 	bl	80029c8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002c82:	1dfb      	adds	r3, r7, #7
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <send_cmd+0xb0>
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2295      	movs	r2, #149	; 0x95
 8002c8e:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d103      	bne.n	8002ca0 <send_cmd+0xc0>
 8002c98:	230f      	movs	r3, #15
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2287      	movs	r2, #135	; 0x87
 8002c9e:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7ff fe8e 	bl	80029c8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d102      	bne.n	8002cba <send_cmd+0xda>
 8002cb4:	20ff      	movs	r0, #255	; 0xff
 8002cb6:	f7ff fe87 	bl	80029c8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002cba:	230f      	movs	r3, #15
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	220a      	movs	r2, #10
 8002cc0:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8002cc2:	250e      	movs	r5, #14
 8002cc4:	197c      	adds	r4, r7, r5
 8002cc6:	20ff      	movs	r0, #255	; 0xff
 8002cc8:	f7ff fe7e 	bl	80029c8 <xchg_spi>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8002cd0:	197b      	adds	r3, r7, r5
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da09      	bge.n	8002cee <send_cmd+0x10e>
 8002cda:	210f      	movs	r1, #15
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	187a      	adds	r2, r7, r1
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	3a01      	subs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e9      	bne.n	8002cc2 <send_cmd+0xe2>

	return res;							/* Return received response */
 8002cee:	230e      	movs	r3, #14
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}

08002cfc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002cfc:	b5b0      	push	{r4, r5, r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <USER_SPI_initialize+0x18>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e100      	b.n	8002f16 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002d14:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <USER_SPI_initialize+0x224>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d003      	beq.n	8002d2a <USER_SPI_initialize+0x2e>
 8002d22:	4b7f      	ldr	r3, [pc, #508]	; (8002f20 <USER_SPI_initialize+0x224>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e0f5      	b.n	8002f16 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8002d2a:	4b7e      	ldr	r3, [pc, #504]	; (8002f24 <USER_SPI_initialize+0x228>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2238      	movs	r2, #56	; 0x38
 8002d32:	4393      	bics	r3, r2
 8002d34:	001a      	movs	r2, r3
 8002d36:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <USER_SPI_initialize+0x228>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2130      	movs	r1, #48	; 0x30
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002d40:	230f      	movs	r3, #15
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	220a      	movs	r2, #10
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e008      	b.n	8002d5c <USER_SPI_initialize+0x60>
 8002d4a:	20ff      	movs	r0, #255	; 0xff
 8002d4c:	f7ff fe3c 	bl	80029c8 <xchg_spi>
 8002d50:	210f      	movs	r1, #15
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	240f      	movs	r4, #15
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f1      	bne.n	8002d4a <USER_SPI_initialize+0x4e>

	ty = 0;
 8002d66:	230d      	movs	r3, #13
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002d6e:	2100      	movs	r1, #0
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7ff ff35 	bl	8002be0 <send_cmd>
 8002d76:	0003      	movs	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d000      	beq.n	8002d7e <USER_SPI_initialize+0x82>
 8002d7c:	e0a6      	b.n	8002ecc <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002d7e:	23fa      	movs	r3, #250	; 0xfa
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff fdf6 	bl	8002974 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002d88:	23d5      	movs	r3, #213	; 0xd5
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	2008      	movs	r0, #8
 8002d90:	f7ff ff26 	bl	8002be0 <send_cmd>
 8002d94:	0003      	movs	r3, r0
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d162      	bne.n	8002e60 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e00f      	b.n	8002dc2 <USER_SPI_initialize+0xc6>
 8002da2:	250f      	movs	r5, #15
 8002da4:	197b      	adds	r3, r7, r5
 8002da6:	781c      	ldrb	r4, [r3, #0]
 8002da8:	20ff      	movs	r0, #255	; 0xff
 8002daa:	f7ff fe0d 	bl	80029c8 <xchg_spi>
 8002dae:	0003      	movs	r3, r0
 8002db0:	001a      	movs	r2, r3
 8002db2:	2308      	movs	r3, #8
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	551a      	strb	r2, [r3, r4]
 8002db8:	197b      	adds	r3, r7, r5
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	197b      	adds	r3, r7, r5
 8002dbe:	3201      	adds	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	230f      	movs	r3, #15
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d9ea      	bls.n	8002da2 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002dcc:	2208      	movs	r2, #8
 8002dce:	18bb      	adds	r3, r7, r2
 8002dd0:	789b      	ldrb	r3, [r3, #2]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d000      	beq.n	8002dd8 <USER_SPI_initialize+0xdc>
 8002dd6:	e079      	b.n	8002ecc <USER_SPI_initialize+0x1d0>
 8002dd8:	18bb      	adds	r3, r7, r2
 8002dda:	78db      	ldrb	r3, [r3, #3]
 8002ddc:	2baa      	cmp	r3, #170	; 0xaa
 8002dde:	d000      	beq.n	8002de2 <USER_SPI_initialize+0xe6>
 8002de0:	e074      	b.n	8002ecc <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	f7ff fdda 	bl	800299c <SPI_Timer_Status>
 8002de8:	1e03      	subs	r3, r0, #0
 8002dea:	d007      	beq.n	8002dfc <USER_SPI_initialize+0x100>
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	05db      	lsls	r3, r3, #23
 8002df0:	0019      	movs	r1, r3
 8002df2:	20a9      	movs	r0, #169	; 0xa9
 8002df4:	f7ff fef4 	bl	8002be0 <send_cmd>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d1f3      	bne.n	8002de4 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002dfc:	f7ff fdce 	bl	800299c <SPI_Timer_Status>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d063      	beq.n	8002ecc <USER_SPI_initialize+0x1d0>
 8002e04:	2100      	movs	r1, #0
 8002e06:	203a      	movs	r0, #58	; 0x3a
 8002e08:	f7ff feea 	bl	8002be0 <send_cmd>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d15d      	bne.n	8002ecc <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002e10:	230f      	movs	r3, #15
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e00f      	b.n	8002e3a <USER_SPI_initialize+0x13e>
 8002e1a:	250f      	movs	r5, #15
 8002e1c:	197b      	adds	r3, r7, r5
 8002e1e:	781c      	ldrb	r4, [r3, #0]
 8002e20:	20ff      	movs	r0, #255	; 0xff
 8002e22:	f7ff fdd1 	bl	80029c8 <xchg_spi>
 8002e26:	0003      	movs	r3, r0
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	551a      	strb	r2, [r3, r4]
 8002e30:	197b      	adds	r3, r7, r5
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	197b      	adds	r3, r7, r5
 8002e36:	3201      	adds	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	230f      	movs	r3, #15
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d9ea      	bls.n	8002e1a <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002e44:	2308      	movs	r3, #8
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d001      	beq.n	8002e56 <USER_SPI_initialize+0x15a>
 8002e52:	220c      	movs	r2, #12
 8002e54:	e000      	b.n	8002e58 <USER_SPI_initialize+0x15c>
 8002e56:	2204      	movs	r2, #4
 8002e58:	230d      	movs	r3, #13
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e035      	b.n	8002ecc <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002e60:	2100      	movs	r1, #0
 8002e62:	20a9      	movs	r0, #169	; 0xa9
 8002e64:	f7ff febc 	bl	8002be0 <send_cmd>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d808      	bhi.n	8002e80 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002e6e:	230d      	movs	r3, #13
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2202      	movs	r2, #2
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	230e      	movs	r3, #14
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	22a9      	movs	r2, #169	; 0xa9
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e007      	b.n	8002e90 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002e80:	230d      	movs	r3, #13
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	230e      	movs	r3, #14
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	f7ff fd83 	bl	800299c <SPI_Timer_Status>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d008      	beq.n	8002eac <USER_SPI_initialize+0x1b0>
 8002e9a:	230e      	movs	r3, #14
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7ff fe9c 	bl	8002be0 <send_cmd>
 8002ea8:	1e03      	subs	r3, r0, #0
 8002eaa:	d1f2      	bne.n	8002e92 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002eac:	f7ff fd76 	bl	800299c <SPI_Timer_Status>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d007      	beq.n	8002ec4 <USER_SPI_initialize+0x1c8>
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	2010      	movs	r0, #16
 8002ebc:	f7ff fe90 	bl	8002be0 <send_cmd>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d003      	beq.n	8002ecc <USER_SPI_initialize+0x1d0>
				ty = 0;
 8002ec4:	230d      	movs	r3, #13
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
		}
	} 
	CardType = ty;	/* Card type */
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <USER_SPI_initialize+0x22c>)
 8002ece:	240d      	movs	r4, #13
 8002ed0:	193a      	adds	r2, r7, r4
 8002ed2:	7812      	ldrb	r2, [r2, #0]
 8002ed4:	701a      	strb	r2, [r3, #0]
	despiselect();
 8002ed6:	f7ff fdee 	bl	8002ab6 <despiselect>

	if (ty) {			/* OK */
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d013      	beq.n	8002f0a <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <USER_SPI_initialize+0x228>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2238      	movs	r2, #56	; 0x38
 8002eea:	4393      	bics	r3, r2
 8002eec:	001a      	movs	r2, r3
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <USER_SPI_initialize+0x228>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <USER_SPI_initialize+0x224>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2201      	movs	r2, #1
 8002f00:	4393      	bics	r3, r2
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <USER_SPI_initialize+0x224>)
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e002      	b.n	8002f10 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <USER_SPI_initialize+0x224>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <USER_SPI_initialize+0x224>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20000020 	.word	0x20000020
 8002f24:	200000a4 	.word	0x200000a4
 8002f28:	2000019c 	.word	0x2000019c

08002f2c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	0002      	movs	r2, r0
 8002f34:	1dfb      	adds	r3, r7, #7
 8002f36:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <USER_SPI_status+0x18>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e002      	b.n	8002f4a <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <USER_SPI_status+0x28>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	20000020 	.word	0x20000020

08002f58 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	210f      	movs	r1, #15
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	1c02      	adds	r2, r0, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <USER_SPI_read+0x22>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <USER_SPI_read+0x26>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e04f      	b.n	800301e <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <USER_SPI_read+0xd0>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	001a      	movs	r2, r3
 8002f86:	2301      	movs	r3, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d001      	beq.n	8002f90 <USER_SPI_read+0x38>
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e046      	b.n	800301e <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <USER_SPI_read+0xd4>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	001a      	movs	r2, r3
 8002f96:	2308      	movs	r3, #8
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d102      	bne.n	8002fa2 <USER_SPI_read+0x4a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	025b      	lsls	r3, r3, #9
 8002fa0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d112      	bne.n	8002fce <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0019      	movs	r1, r3
 8002fac:	2011      	movs	r0, #17
 8002fae:	f7ff fe17 	bl	8002be0 <send_cmd>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d12d      	bne.n	8003012 <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	009a      	lsls	r2, r3, #2
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	0011      	movs	r1, r2
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7ff fda5 	bl	8002b0e <rcvr_datablock>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d024      	beq.n	8003012 <USER_SPI_read+0xba>
			count = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	e021      	b.n	8003012 <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	2012      	movs	r0, #18
 8002fd4:	f7ff fe04 	bl	8002be0 <send_cmd>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d11a      	bne.n	8003012 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	009a      	lsls	r2, r3, #2
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff fd92 	bl	8002b0e <rcvr_datablock>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d00c      	beq.n	8003008 <USER_SPI_read+0xb0>
				buff += 512;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	0092      	lsls	r2, r2, #2
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	4463      	add	r3, ip
 8002ff8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ea      	bne.n	8002fdc <USER_SPI_read+0x84>
 8003006:	e000      	b.n	800300a <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8003008:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800300a:	2100      	movs	r1, #0
 800300c:	200c      	movs	r0, #12
 800300e:	f7ff fde7 	bl	8002be0 <send_cmd>
		}
	}
	despiselect();
 8003012:	f7ff fd50 	bl	8002ab6 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	4193      	sbcs	r3, r2
 800301c:	b2db      	uxtb	r3, r3
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b004      	add	sp, #16
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	20000020 	.word	0x20000020
 800302c:	2000019c 	.word	0x2000019c

08003030 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	210f      	movs	r1, #15
 800303e:	187b      	adds	r3, r7, r1
 8003040:	1c02      	adds	r2, r0, #0
 8003042:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003044:	187b      	adds	r3, r7, r1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <USER_SPI_write+0x22>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <USER_SPI_write+0x26>
 8003052:	2304      	movs	r3, #4
 8003054:	e063      	b.n	800311e <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <USER_SPI_write+0xf8>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	001a      	movs	r2, r3
 800305e:	2301      	movs	r3, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d001      	beq.n	8003068 <USER_SPI_write+0x38>
 8003064:	2303      	movs	r3, #3
 8003066:	e05a      	b.n	800311e <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <USER_SPI_write+0xf8>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	001a      	movs	r2, r3
 8003070:	2304      	movs	r3, #4
 8003072:	4013      	ands	r3, r2
 8003074:	d001      	beq.n	800307a <USER_SPI_write+0x4a>
 8003076:	2302      	movs	r3, #2
 8003078:	e051      	b.n	800311e <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <USER_SPI_write+0xfc>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	001a      	movs	r2, r3
 8003080:	2308      	movs	r3, #8
 8003082:	4013      	ands	r3, r2
 8003084:	d102      	bne.n	800308c <USER_SPI_write+0x5c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d110      	bne.n	80030b4 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0019      	movs	r1, r3
 8003096:	2018      	movs	r0, #24
 8003098:	f7ff fda2 	bl	8002be0 <send_cmd>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d138      	bne.n	8003112 <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	21fe      	movs	r1, #254	; 0xfe
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff fd61 	bl	8002b6c <xmit_datablock>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d031      	beq.n	8003112 <USER_SPI_write+0xe2>
			count = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	e02e      	b.n	8003112 <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <USER_SPI_write+0xfc>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	001a      	movs	r2, r3
 80030ba:	2306      	movs	r3, #6
 80030bc:	4013      	ands	r3, r2
 80030be:	d004      	beq.n	80030ca <USER_SPI_write+0x9a>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	0019      	movs	r1, r3
 80030c4:	2097      	movs	r0, #151	; 0x97
 80030c6:	f7ff fd8b 	bl	8002be0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0019      	movs	r1, r3
 80030ce:	2019      	movs	r0, #25
 80030d0:	f7ff fd86 	bl	8002be0 <send_cmd>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	d11c      	bne.n	8003112 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	21fc      	movs	r1, #252	; 0xfc
 80030dc:	0018      	movs	r0, r3
 80030de:	f7ff fd45 	bl	8002b6c <xmit_datablock>
 80030e2:	1e03      	subs	r3, r0, #0
 80030e4:	d00c      	beq.n	8003100 <USER_SPI_write+0xd0>
				buff += 512;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2280      	movs	r2, #128	; 0x80
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	4694      	mov	ip, r2
 80030ee:	4463      	add	r3, ip
 80030f0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ec      	bne.n	80030d8 <USER_SPI_write+0xa8>
 80030fe:	e000      	b.n	8003102 <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003100:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003102:	21fd      	movs	r1, #253	; 0xfd
 8003104:	2000      	movs	r0, #0
 8003106:	f7ff fd31 	bl	8002b6c <xmit_datablock>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d101      	bne.n	8003112 <USER_SPI_write+0xe2>
 800310e:	2301      	movs	r3, #1
 8003110:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003112:	f7ff fcd0 	bl	8002ab6 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	4193      	sbcs	r3, r2
 800311c:	b2db      	uxtb	r3, r3
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	20000020 	.word	0x20000020
 800312c:	2000019c 	.word	0x2000019c

08003130 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b08d      	sub	sp, #52	; 0x34
 8003134:	af00      	add	r7, sp, #0
 8003136:	603a      	str	r2, [r7, #0]
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	1c02      	adds	r2, r0, #0
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <USER_SPI_ioctl+0x20>
 800314c:	2304      	movs	r3, #4
 800314e:	e178      	b.n	8003442 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003150:	4bbe      	ldr	r3, [pc, #760]	; (800344c <USER_SPI_ioctl+0x31c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	001a      	movs	r2, r3
 8003158:	2301      	movs	r3, #1
 800315a:	4013      	ands	r3, r2
 800315c:	d001      	beq.n	8003162 <USER_SPI_ioctl+0x32>
 800315e:	2303      	movs	r3, #3
 8003160:	e16f      	b.n	8003442 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8003162:	232f      	movs	r3, #47	; 0x2f
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 800316a:	1dbb      	adds	r3, r7, #6
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d100      	bne.n	8003174 <USER_SPI_ioctl+0x44>
 8003172:	e100      	b.n	8003376 <USER_SPI_ioctl+0x246>
 8003174:	dd00      	ble.n	8003178 <USER_SPI_ioctl+0x48>
 8003176:	e14d      	b.n	8003414 <USER_SPI_ioctl+0x2e4>
 8003178:	2b03      	cmp	r3, #3
 800317a:	d100      	bne.n	800317e <USER_SPI_ioctl+0x4e>
 800317c:	e074      	b.n	8003268 <USER_SPI_ioctl+0x138>
 800317e:	dd00      	ble.n	8003182 <USER_SPI_ioctl+0x52>
 8003180:	e148      	b.n	8003414 <USER_SPI_ioctl+0x2e4>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <USER_SPI_ioctl+0x5c>
 8003186:	2b01      	cmp	r3, #1
 8003188:	d00a      	beq.n	80031a0 <USER_SPI_ioctl+0x70>
 800318a:	e143      	b.n	8003414 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800318c:	f7ff fca3 	bl	8002ad6 <spiselect>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d100      	bne.n	8003196 <USER_SPI_ioctl+0x66>
 8003194:	e143      	b.n	800341e <USER_SPI_ioctl+0x2ee>
 8003196:	232f      	movs	r3, #47	; 0x2f
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
		break;
 800319e:	e13e      	b.n	800341e <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80031a0:	2100      	movs	r1, #0
 80031a2:	2009      	movs	r0, #9
 80031a4:	f7ff fd1c 	bl	8002be0 <send_cmd>
 80031a8:	1e03      	subs	r3, r0, #0
 80031aa:	d000      	beq.n	80031ae <USER_SPI_ioctl+0x7e>
 80031ac:	e139      	b.n	8003422 <USER_SPI_ioctl+0x2f2>
 80031ae:	240c      	movs	r4, #12
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	2110      	movs	r1, #16
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff fcaa 	bl	8002b0e <rcvr_datablock>
 80031ba:	1e03      	subs	r3, r0, #0
 80031bc:	d100      	bne.n	80031c0 <USER_SPI_ioctl+0x90>
 80031be:	e130      	b.n	8003422 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80031c0:	0020      	movs	r0, r4
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d115      	bne.n	80031fa <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80031ce:	183b      	adds	r3, r7, r0
 80031d0:	7a5b      	ldrb	r3, [r3, #9]
 80031d2:	001a      	movs	r2, r3
 80031d4:	183b      	adds	r3, r7, r0
 80031d6:	7a1b      	ldrb	r3, [r3, #8]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	18d3      	adds	r3, r2, r3
 80031dc:	0019      	movs	r1, r3
 80031de:	183b      	adds	r3, r7, r0
 80031e0:	79db      	ldrb	r3, [r3, #7]
 80031e2:	041a      	lsls	r2, r3, #16
 80031e4:	23fc      	movs	r3, #252	; 0xfc
 80031e6:	039b      	lsls	r3, r3, #14
 80031e8:	4013      	ands	r3, r2
 80031ea:	18cb      	adds	r3, r1, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	029a      	lsls	r2, r3, #10
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e031      	b.n	800325e <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80031fa:	200c      	movs	r0, #12
 80031fc:	183b      	adds	r3, r7, r0
 80031fe:	795b      	ldrb	r3, [r3, #5]
 8003200:	220f      	movs	r2, #15
 8003202:	4013      	ands	r3, r2
 8003204:	b2da      	uxtb	r2, r3
 8003206:	183b      	adds	r3, r7, r0
 8003208:	7a9b      	ldrb	r3, [r3, #10]
 800320a:	09db      	lsrs	r3, r3, #7
 800320c:	b2db      	uxtb	r3, r3
 800320e:	18d3      	adds	r3, r2, r3
 8003210:	b2da      	uxtb	r2, r3
 8003212:	183b      	adds	r3, r7, r0
 8003214:	7a5b      	ldrb	r3, [r3, #9]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2106      	movs	r1, #6
 800321c:	400b      	ands	r3, r1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	b2da      	uxtb	r2, r3
 8003224:	242e      	movs	r4, #46	; 0x2e
 8003226:	193b      	adds	r3, r7, r4
 8003228:	3202      	adds	r2, #2
 800322a:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800322c:	183b      	adds	r3, r7, r0
 800322e:	7a1b      	ldrb	r3, [r3, #8]
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	b2db      	uxtb	r3, r3
 8003234:	001a      	movs	r2, r3
 8003236:	183b      	adds	r3, r7, r0
 8003238:	79db      	ldrb	r3, [r3, #7]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	18d2      	adds	r2, r2, r3
 800323e:	183b      	adds	r3, r7, r0
 8003240:	799b      	ldrb	r3, [r3, #6]
 8003242:	0299      	lsls	r1, r3, #10
 8003244:	23c0      	movs	r3, #192	; 0xc0
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	400b      	ands	r3, r1
 800324a:	18d3      	adds	r3, r2, r3
 800324c:	3301      	adds	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003250:	193b      	adds	r3, r7, r4
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	3b09      	subs	r3, #9
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	409a      	lsls	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800325e:	232f      	movs	r3, #47	; 0x2f
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003266:	e0dc      	b.n	8003422 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003268:	4b79      	ldr	r3, [pc, #484]	; (8003450 <USER_SPI_ioctl+0x320>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	001a      	movs	r2, r3
 800326e:	2304      	movs	r3, #4
 8003270:	4013      	ands	r3, r2
 8003272:	d035      	beq.n	80032e0 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003274:	2100      	movs	r1, #0
 8003276:	208d      	movs	r0, #141	; 0x8d
 8003278:	f7ff fcb2 	bl	8002be0 <send_cmd>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d000      	beq.n	8003282 <USER_SPI_ioctl+0x152>
 8003280:	e0d1      	b.n	8003426 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8003282:	20ff      	movs	r0, #255	; 0xff
 8003284:	f7ff fba0 	bl	80029c8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003288:	230c      	movs	r3, #12
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2110      	movs	r1, #16
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff fc3d 	bl	8002b0e <rcvr_datablock>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d100      	bne.n	800329a <USER_SPI_ioctl+0x16a>
 8003298:	e0c5      	b.n	8003426 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800329a:	232e      	movs	r3, #46	; 0x2e
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	2230      	movs	r2, #48	; 0x30
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e008      	b.n	80032b6 <USER_SPI_ioctl+0x186>
 80032a4:	20ff      	movs	r0, #255	; 0xff
 80032a6:	f7ff fb8f 	bl	80029c8 <xchg_spi>
 80032aa:	212e      	movs	r1, #46	; 0x2e
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	3a01      	subs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	232e      	movs	r3, #46	; 0x2e
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f1      	bne.n	80032a4 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80032c0:	230c      	movs	r3, #12
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	7a9b      	ldrb	r3, [r3, #10]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	001a      	movs	r2, r3
 80032cc:	2310      	movs	r3, #16
 80032ce:	4093      	lsls	r3, r2
 80032d0:	001a      	movs	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80032d6:	232f      	movs	r3, #47	; 0x2f
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80032de:	e0a2      	b.n	8003426 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80032e0:	2100      	movs	r1, #0
 80032e2:	2009      	movs	r0, #9
 80032e4:	f7ff fc7c 	bl	8002be0 <send_cmd>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d000      	beq.n	80032ee <USER_SPI_ioctl+0x1be>
 80032ec:	e09b      	b.n	8003426 <USER_SPI_ioctl+0x2f6>
 80032ee:	240c      	movs	r4, #12
 80032f0:	193b      	adds	r3, r7, r4
 80032f2:	2110      	movs	r1, #16
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff fc0a 	bl	8002b0e <rcvr_datablock>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d100      	bne.n	8003300 <USER_SPI_ioctl+0x1d0>
 80032fe:	e092      	b.n	8003426 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003300:	4b53      	ldr	r3, [pc, #332]	; (8003450 <USER_SPI_ioctl+0x320>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	001a      	movs	r2, r3
 8003306:	2302      	movs	r3, #2
 8003308:	4013      	ands	r3, r2
 800330a:	d016      	beq.n	800333a <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800330c:	0021      	movs	r1, r4
 800330e:	187b      	adds	r3, r7, r1
 8003310:	7a9b      	ldrb	r3, [r3, #10]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	227e      	movs	r2, #126	; 0x7e
 8003316:	4013      	ands	r3, r2
 8003318:	187a      	adds	r2, r7, r1
 800331a:	7ad2      	ldrb	r2, [r2, #11]
 800331c:	09d2      	lsrs	r2, r2, #7
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	189b      	adds	r3, r3, r2
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	187b      	adds	r3, r7, r1
 8003326:	7b5b      	ldrb	r3, [r3, #13]
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	001a      	movs	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e018      	b.n	800336c <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800333a:	210c      	movs	r1, #12
 800333c:	187b      	adds	r3, r7, r1
 800333e:	7a9b      	ldrb	r3, [r3, #10]
 8003340:	109b      	asrs	r3, r3, #2
 8003342:	b29b      	uxth	r3, r3
 8003344:	001a      	movs	r2, r3
 8003346:	231f      	movs	r3, #31
 8003348:	4013      	ands	r3, r2
 800334a:	3301      	adds	r3, #1
 800334c:	0008      	movs	r0, r1
 800334e:	187a      	adds	r2, r7, r1
 8003350:	7ad2      	ldrb	r2, [r2, #11]
 8003352:	00d2      	lsls	r2, r2, #3
 8003354:	2118      	movs	r1, #24
 8003356:	400a      	ands	r2, r1
 8003358:	1839      	adds	r1, r7, r0
 800335a:	7ac9      	ldrb	r1, [r1, #11]
 800335c:	0949      	lsrs	r1, r1, #5
 800335e:	b2c9      	uxtb	r1, r1
 8003360:	1852      	adds	r2, r2, r1
 8003362:	3201      	adds	r2, #1
 8003364:	4353      	muls	r3, r2
 8003366:	001a      	movs	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800336c:	232f      	movs	r3, #47	; 0x2f
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
		break;
 8003374:	e057      	b.n	8003426 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <USER_SPI_ioctl+0x320>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	001a      	movs	r2, r3
 800337c:	2306      	movs	r3, #6
 800337e:	4013      	ands	r3, r2
 8003380:	d053      	beq.n	800342a <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003382:	240c      	movs	r4, #12
 8003384:	193a      	adds	r2, r7, r4
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	210b      	movs	r1, #11
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff fecf 	bl	8003130 <USER_SPI_ioctl>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d14b      	bne.n	800342e <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003396:	193b      	adds	r3, r7, r4
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <USER_SPI_ioctl+0x27e>
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	7a9b      	ldrb	r3, [r3, #10]
 80033a6:	001a      	movs	r2, r3
 80033a8:	2340      	movs	r3, #64	; 0x40
 80033aa:	4013      	ands	r3, r2
 80033ac:	d041      	beq.n	8003432 <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <USER_SPI_ioctl+0x320>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	001a      	movs	r2, r3
 80033c4:	2308      	movs	r3, #8
 80033c6:	4013      	ands	r3, r2
 80033c8:	d105      	bne.n	80033d6 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	025b      	lsls	r3, r3, #9
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	025b      	lsls	r3, r3, #9
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	0019      	movs	r1, r3
 80033da:	2020      	movs	r0, #32
 80033dc:	f7ff fc00 	bl	8002be0 <send_cmd>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d128      	bne.n	8003436 <USER_SPI_ioctl+0x306>
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	0019      	movs	r1, r3
 80033e8:	2021      	movs	r0, #33	; 0x21
 80033ea:	f7ff fbf9 	bl	8002be0 <send_cmd>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d121      	bne.n	8003436 <USER_SPI_ioctl+0x306>
 80033f2:	2100      	movs	r1, #0
 80033f4:	2026      	movs	r0, #38	; 0x26
 80033f6:	f7ff fbf3 	bl	8002be0 <send_cmd>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d11b      	bne.n	8003436 <USER_SPI_ioctl+0x306>
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <USER_SPI_ioctl+0x324>)
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff fb30 	bl	8002a66 <wait_ready>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d015      	beq.n	8003436 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 800340a:	232f      	movs	r3, #47	; 0x2f
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003412:	e010      	b.n	8003436 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8003414:	232f      	movs	r3, #47	; 0x2f
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	2204      	movs	r2, #4
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e00c      	b.n	8003438 <USER_SPI_ioctl+0x308>
		break;
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	e00a      	b.n	8003438 <USER_SPI_ioctl+0x308>
		break;
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	e008      	b.n	8003438 <USER_SPI_ioctl+0x308>
		break;
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	e006      	b.n	8003438 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	e004      	b.n	8003438 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	e002      	b.n	8003438 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	e000      	b.n	8003438 <USER_SPI_ioctl+0x308>
		break;
 8003436:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8003438:	f7ff fb3d 	bl	8002ab6 <despiselect>

	return res;
 800343c:	232f      	movs	r3, #47	; 0x2f
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b00d      	add	sp, #52	; 0x34
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000020 	.word	0x20000020
 8003450:	2000019c 	.word	0x2000019c
 8003454:	00007530 	.word	0x00007530

08003458 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	1dfb      	adds	r3, r7, #7
 8003464:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8003466:	2417      	movs	r4, #23
 8003468:	193b      	adds	r3, r7, r4
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800346e:	2016      	movs	r0, #22
 8003470:	183b      	adds	r3, r7, r0
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 8003478:	7a5b      	ldrb	r3, [r3, #9]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d836      	bhi.n	80034ee <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003480:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 8003482:	7a5b      	ldrb	r3, [r3, #9]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	001a      	movs	r2, r3
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 800348a:	2100      	movs	r1, #0
 800348c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 8003490:	7a5b      	ldrb	r3, [r3, #9]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	4a19      	ldr	r2, [pc, #100]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	3304      	adds	r3, #4
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 80034a0:	4b16      	ldr	r3, [pc, #88]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 80034a2:	7a5b      	ldrb	r3, [r3, #9]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	001a      	movs	r2, r3
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	1dfa      	adds	r2, r7, #7
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80034b2:	4b12      	ldr	r3, [pc, #72]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 80034b4:	7a5b      	ldrb	r3, [r3, #9]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	b2d1      	uxtb	r1, r2
 80034bc:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <FATFS_LinkDriverEx+0xa4>)
 80034be:	7251      	strb	r1, [r2, #9]
 80034c0:	183a      	adds	r2, r7, r0
 80034c2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 80034c4:	183b      	adds	r3, r7, r0
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	3330      	adds	r3, #48	; 0x30
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	3301      	adds	r3, #1
 80034d4:	223a      	movs	r2, #58	; 0x3a
 80034d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3302      	adds	r3, #2
 80034dc:	222f      	movs	r2, #47	; 0x2f
 80034de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	3303      	adds	r3, #3
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80034e8:	193b      	adds	r3, r7, r4
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80034ee:	2317      	movs	r3, #23
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b007      	add	sp, #28
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	200001a8 	.word	0x200001a8

08003500 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff ffa1 	bl	8003458 <FATFS_LinkDriverEx>
 8003516:	0003      	movs	r3, r0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <__libc_init_array>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	2600      	movs	r6, #0
 8003524:	4d0c      	ldr	r5, [pc, #48]	; (8003558 <__libc_init_array+0x38>)
 8003526:	4c0d      	ldr	r4, [pc, #52]	; (800355c <__libc_init_array+0x3c>)
 8003528:	1b64      	subs	r4, r4, r5
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	42a6      	cmp	r6, r4
 800352e:	d109      	bne.n	8003544 <__libc_init_array+0x24>
 8003530:	2600      	movs	r6, #0
 8003532:	f000 f821 	bl	8003578 <_init>
 8003536:	4d0a      	ldr	r5, [pc, #40]	; (8003560 <__libc_init_array+0x40>)
 8003538:	4c0a      	ldr	r4, [pc, #40]	; (8003564 <__libc_init_array+0x44>)
 800353a:	1b64      	subs	r4, r4, r5
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	42a6      	cmp	r6, r4
 8003540:	d105      	bne.n	800354e <__libc_init_array+0x2e>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	00b3      	lsls	r3, r6, #2
 8003546:	58eb      	ldr	r3, [r5, r3]
 8003548:	4798      	blx	r3
 800354a:	3601      	adds	r6, #1
 800354c:	e7ee      	b.n	800352c <__libc_init_array+0xc>
 800354e:	00b3      	lsls	r3, r6, #2
 8003550:	58eb      	ldr	r3, [r5, r3]
 8003552:	4798      	blx	r3
 8003554:	3601      	adds	r6, #1
 8003556:	e7f2      	b.n	800353e <__libc_init_array+0x1e>
 8003558:	080035c8 	.word	0x080035c8
 800355c:	080035c8 	.word	0x080035c8
 8003560:	080035c8 	.word	0x080035c8
 8003564:	080035cc 	.word	0x080035cc

08003568 <memset>:
 8003568:	0003      	movs	r3, r0
 800356a:	1882      	adds	r2, r0, r2
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	7019      	strb	r1, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <_init>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr

08003584 <_fini>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr
